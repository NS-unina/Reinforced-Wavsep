<?xml version="1.0"?>
<!DOCTYPE issues [
<!ELEMENT issues (issue*)>
<!ATTLIST issues burpVersion CDATA "">
<!ATTLIST issues exportTime CDATA "">
<!ELEMENT issue (serialNumber, type, name, host, path, location, severity, confidence, issueBackground?, remediationBackground?, references?, vulnerabilityClassifications?, issueDetail?, issueDetailItems?, remediationDetail?, requestresponse*, collaboratorEvent*, infiltratorEvent*, staticAnalysis*, dynamicAnalysis*, prototypePollution*)>
<!ELEMENT serialNumber (#PCDATA)>
<!ELEMENT type (#PCDATA)>
<!ELEMENT name (#PCDATA)>
<!ELEMENT host (#PCDATA)>
<!ATTLIST host ip CDATA "">
<!ELEMENT path (#PCDATA)>
<!ELEMENT location (#PCDATA)>
<!ELEMENT severity (#PCDATA)>
<!ELEMENT confidence (#PCDATA)>
<!ELEMENT issueBackground (#PCDATA)>
<!ELEMENT remediationBackground (#PCDATA)>
<!ELEMENT references (#PCDATA)>
<!ELEMENT vulnerabilityClassifications (#PCDATA)>
<!ELEMENT issueDetail (#PCDATA)>
<!ELEMENT issueDetailItems (issueDetailItem*)>
<!ELEMENT issueDetailItem (#PCDATA)>
<!ELEMENT remediationDetail (#PCDATA)>
<!ELEMENT requestresponse (request?, response?, responseRedirected?)>
<!ELEMENT request (#PCDATA)>
<!ATTLIST request method CDATA "">
<!ATTLIST request base64 (true|false) "false">
<!ELEMENT response (#PCDATA)>
<!ATTLIST response base64 (true|false) "false">
<!ELEMENT responseRedirected (#PCDATA)>
<!ELEMENT sender (#PCDATA)>
<!ELEMENT message (#PCDATA)>
<!ELEMENT conversation (#PCDATA)>
<!ELEMENT recipient (#PCDATA)>
<!ELEMENT recipients (recipient*)>
<!ELEMENT smtp (sender, recipients, message, conversation)>
<!ELEMENT collaboratorEvent (interactionType, originIp, time, lookupType?, lookupHost?, requestresponse?, smtp?)>
<!ELEMENT interactionType (#PCDATA)>
<!ELEMENT originIp (#PCDATA)>
<!ELEMENT time (#PCDATA)>
<!ELEMENT lookupType (#PCDATA)>
<!ELEMENT lookupHost (#PCDATA)>
<!ELEMENT infiltratorEvent (parameterName, platform, signature, stackTrace?, parameterValue?, collaboratorEvent)>
<!ELEMENT parameterName (#PCDATA)>
<!ELEMENT platform (#PCDATA)>
<!ELEMENT signature (#PCDATA)>
<!ELEMENT stackTrace (#PCDATA)>
<!ELEMENT parameterValue (#PCDATA)>
<!ELEMENT dynamicAnalysis (source, sink, sourceStackTrace, sinkStackTrace, eventListenerStackTrace, sourceValue, sinkValue, eventHandlerData, eventHandlerDataType, eventHandlerManipulatedData, poc, origin, isOriginChecked, sourceElementId, sourceElementName, eventFiredEventName, eventFiredElementId, eventFiredElementName, eventFiredOuterHtml)>
<!ELEMENT prototypePollution (poc, pollutionTechnique, pollutionType)>
<!ELEMENT staticAnalysis (source, sink, codeSnippets)>
<!ELEMENT source (#PCDATA)>
<!ELEMENT sink (#PCDATA)>
<!ELEMENT sourceStackTrace (#PCDATA)>
<!ELEMENT sinkStackTrace (#PCDATA)>
<!ELEMENT eventListenerStackTrace (#PCDATA)>
<!ELEMENT sourceValue (#PCDATA)>
<!ELEMENT sinkValue (#PCDATA)>
<!ELEMENT eventHandlerData (#PCDATA)>
<!ELEMENT eventHandlerDataType (#PCDATA)>
<!ELEMENT sourceElementId (#PCDATA)>
<!ELEMENT sourceElementName (#PCDATA)>
<!ELEMENT eventFiredEventName (#PCDATA)>
<!ELEMENT eventFiredElementId (#PCDATA)>
<!ELEMENT eventFiredElementName (#PCDATA)>
<!ELEMENT eventFiredOuterHtml (#PCDATA)>
<!ELEMENT eventHandlerManipulatedData (#PCDATA)>
<!ELEMENT poc (#PCDATA)>
<!ELEMENT origin (#PCDATA)>
<!ELEMENT isOriginChecked (#PCDATA)>
<!ELEMENT codeSnippets (codeSnippet*)>
<!ELEMENT codeSnippet (#PCDATA)>
<!ELEMENT pollutionTechnique (#PCDATA)>
<!ELEMENT pollutionType (#PCDATA)>
]>
<issues burpVersion="2024.1.1.6" exportTime="Fri Apr 19 19:35:26 CEST 2024">
  <issue>
    <serialNumber>3835589818043431936</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET-Experimental/Case01-Tag2HtmlPageScope-StripScriptTag.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET-Experimental/Case01-Tag2HtmlPageScope-StripScriptTag.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>n0r1v&lt;img src=a onerror=alert(1)&gt;ju8ph</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtRXhwZXJpbWVudGFsL0Nhc2UwMS1UYWcySHRtbFBhZ2VTY29wZS1TdHJpcFNjcmlwdFRhZy5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZW4wcjF2JTNjaW1nJTIwc3JjJTNkYSUyMG9uZXJyb3IlM2RhbGVydCgxKSUzZWp1OHBoIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtRXhwZXJpbWVudGFsL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUJEMEZCNzcxMTJCQkExRUFGMTFGQzAzRUQ4RjNDMDc2DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MTgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIHBhZ2UgdGhhdCBTdHJpcHMgU2NyaXB0IFRhZ3M8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKPCEtLQoJSW5zcGlyZWQgYnkgYSB2dWxuZXJhYmxlIHRlc3QgY2FzZSBvcmlnaW5hbGx5IHdyaXR0ZW4gZm9yIHRoZSBPV0FTUCBaZWQgQXR0YWNrIFByb3h5IChaQVApIHByb2plY3QKCShodHRwOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvT1dBU1BfWmVkX0F0dGFja19Qcm94eV9Qcm9qZWN0KSAKCU9yaWdpbmFsIEF1dGhvcjogcHNpaW5vbiAocHNpaW5vbkBnbWFpbC5jb20pLgotLT4KClRoZSByZWZsZWN0ZWQgdmFsdWU6IHRleHR2YWx1ZW4wcjF2PGltZyBzcmM9YSBvbmVycm9yPWFsZXJ0KDEpPmp1OHBoCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5036406455500688384</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET-Experimental/Case05-ScriptlessInjectionInFormTagActionAttribute.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET-Experimental/Case05-ScriptlessInjectionInFormTagActionAttribute.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of a tag attribute which can contain JavaScript. The payload <b>&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;alert(1)//rx1k6czq</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The application attempts to prevent execution of script by blocking use of the javascript: protocol. However, this defense can by circumvented by HTML-encoding the protocol prefix in the attack string.]]></issueDetail>
    <remediationDetail><![CDATA[Blacklist-based filters designed to block known bad inputs are usually inadequate and should be replaced with more effective input and output validation. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtRXhwZXJpbWVudGFsL0Nhc2UwNS1TY3JpcHRsZXNzSW5qZWN0aW9uSW5Gb3JtVGFnQWN0aW9uQXR0cmlidXRlLmpzcD91c2VyaW5wdXQ9JTI2JTIzeDZhJTNiJTI2JTIzeDYxJTNiJTI2JTIzeDc2JTNiJTI2JTIzeDYxJTNiJTI2JTIzeDczJTNiJTI2JTIzeDYzJTNiJTI2JTIzeDcyJTNiJTI2JTIzeDY5JTNiJTI2JTIzeDcwJTNiJTI2JTIzeDc0JTNiJTI2JTIzeDNhJTNiYWxlcnQoMSklMmYlMmZyeDFrNmN6cSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULUV4cGVyaW1lbnRhbC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1CRDBGQjc3MTEyQkJBMUVBRjExRkMwM0VEOEYzQzA3Ng0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjA0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MzQNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+U2NyaXB0bGVzcyBJbmplY3Rpb24gaW4gSFRNTCBGb3JtIFRhZyBBY3Rpb24gQXR0cmlidXRlIHNjb3BlIG9mIHRoZSBIVE1MIHBhZ2UuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KPCEtLQoJQ29udHJpYnV0ZWQgYnkgdGhlIElyb25XQVNQIHByb2plY3QgKGh0dHA6Ly9pcm9ud2FzcC5vcmcvKS4KCU9yaWdpbmFsIEF1dGhvcjogTGF2YWt1bWFyIEt1cHBhbiAobGF2YUBpcm9ud2FzcC5vcmcpLgotLT4KCjxmb3JtIGFjdGlvbj0iJiN4NmE7JiN4NjE7JiN4NzY7JiN4NjE7JiN4NzM7JiN4NjM7JiN4NzI7JiN4Njk7JiN4NzA7JiN4NzQ7JiN4M2E7YWxlcnQoMSkvL3J4MWs2Y3pxIj4KRW50ZXIgUGFzc3dvcmQ6IDxpbnB1dCBuYW1lPSdwYXNzd29yZCcgaWQ9J3Bhc3N3b3JkJyB0eXBlPSdwYXNzd29yZCcgdmFsdWU9JycvPgo8L2Zvcm0+IAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2959774306916755456</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case01-Tag2HtmlPageScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case01-Tag2HtmlPageScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>dt9pf&lt;script&gt;alert(1)&lt;/script&gt;lr531</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTAxLVRhZzJIdG1sUGFnZVNjb3BlLmpzcD91c2VyaW5wdXQ9dGV4dHZhbHVlZHQ5cGYlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZWxyNTMxIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjcNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBSWFNTIHZpYSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgcGFnZTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgcmVmbGVjdGVkIHZhbHVlOiB0ZXh0dmFsdWVkdDlwZjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5scjUzMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4797878253921882112</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case02-Tag2TagScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case02-Tag2TagScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>cll82&lt;script&gt;alert(1)&lt;/script&gt;plttp</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTAyLVRhZzJUYWdTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZWNsbDgyJTNjc2NyaXB0JTNlYWxlcnQoMSklM2MlMmZzY3JpcHQlM2VwbHR0cCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODcNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBSWFNTIHZpYSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgdGFnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxURVhUQVJFQT5UaGUgcmVmbGVjdGVkIHZhbHVlOiB0ZXh0dmFsdWVjbGw4MjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5wbHR0cDwvVEVYVEFSRUE+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1195110271223464960</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case03-Tag2TagStructure.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case03-Tag2TagStructure.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>wbt26"&gt;&lt;script&gt;alert(1)&lt;/script&gt;joqfx</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTAzLVRhZzJUYWdTdHJ1Y3R1cmUuanNwP3VzZXJpbnB1dD10ZXh0dmFsdWV3YnQyNiUyMiUzZSUzY3NjcmlwdCUzZWFsZXJ0KDEpJTNjJTJmc2NyaXB0JTNlam9xZnggSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD04QUY3NjcxODVBNzNENkExNTA0QjFFNDJGMDM0MzRENQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzMNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPHRpdGxlPkNhc2UgMyAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYW4gSFRNTCB0YWcgc3RydWN0dXJlPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxpbnB1dCB0eXBlPSJ0ZXh0IiB2YWx1ZT0iVGhlIHJlZmxlY3RlZCB2YWx1ZTogdGV4dHZhbHVld2J0MjYiPjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5qb3FmeCI+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7593228912192295936</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case04-Tag2HtmlComment.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case04-Tag2HtmlComment.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into an HTML comment. The payload <b>f246d--&gt;&lt;script&gt;alert(1)&lt;/script&gt;qgsgd</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within HTML comment tags does not prevent XSS attacks if the user is able to close the comment or use other techniques to introduce scripts within the comment context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTA0LVRhZzJIdG1sQ29tbWVudC5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZWYyNDZkLS0lM2UlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZXFnc2dkIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MDcNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA0IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGNvbW1lbnQ8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIHJlZmxlY3RlZCB2YWx1ZSBpcyB3aXRoaW4gYW4gaHRtbCBjb21tZW50OiA8IS0tdGV4dHZhbHVlZjI0NmQtLT48c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+cWdzZ2QtLT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>682633667168303104</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case05-Tag2Frameset.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case05-Tag2Frameset.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of a tag attribute which can contain JavaScript. The payload <b>javascript:alert(1)//z7180y3v</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTA1LVRhZzJGcmFtZXNldC5qc3A/dXNlcmlucHV0PWphdmFzY3JpcHQlM2FhbGVydCgxKSUyZiUyZno3MTgweTN2IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA1IC0gUlhTUyB2aWEgZnJhbWUgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGZyYW1lc2V0PC90aXRsZT4KPC9oZWFkPgoKCgo8ZnJhbWVzZXQgY29scz0iMjUlLDc1JSI+CjxmcmFtZSBuYW1lPSJmcmFtZTEiIGlkPSJmcmFtZTEiIHNyYz0iZHVtbXkuaHRtbCI+CjxmcmFtZSBuYW1lPSJmcmFtZTIiIGlkPSJmcmFtZTIiIHNyYz0iamF2YXNjcmlwdDphbGVydCgxKS8vejcxODB5M3YiPiAKCjwvZnJhbWVzZXQ+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6680721435329924096</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case06-Event2TagScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case06-Event2TagScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>qkci1"onload="alert(1)"t433s</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTA2LUV2ZW50MlRhZ1Njb3BlLmpzcD91c2VyaW5wdXQ9dGV4dHZhbHVlcWtjaTElMjJvbmxvYWQlM2QlMjJhbGVydCgxKSUyMnQ0MzNzIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA2IC0gUlhTUyB2aWEgREhUTUwgZXZlbnQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgdGFnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClVzZXIgQ29udHJvbGxlZCBJbWFnZTogPGltZyBzcmM9InRleHR2YWx1ZXFrY2kxIm9ubG9hZD0iYWxlcnQoMSkidDQzM3MiPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>117267442329545728</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case07-Event2DoubleQuotePropertyScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case07-Event2DoubleQuotePropertyScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>vu34s"onload="alert(1)"r3z8j</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTA3LUV2ZW50MkRvdWJsZVF1b3RlUHJvcGVydHlTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZXZ1MzRzJTIyb25sb2FkJTNkJTIyYWxlcnQoMSklMjJyM3o4aiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA3IC0gUlhTUyB2aWEgREhUTUwgZXZlbnQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgcHJvcGVydHkgKERvdWJsZSBRdW90ZSBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClVzZXIgQ29udHJvbGxlZCBJbWFnZTogPGltZyBzcmM9InRleHR2YWx1ZXZ1MzRzIm9ubG9hZD0iYWxlcnQoMSkicjN6OGoiPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8524710329953503232</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case08-Event2SingleQuotePropertyScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case08-Event2SingleQuotePropertyScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>h4k03'onload='alert(1)'xlaib</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTA4LUV2ZW50MlNpbmdsZVF1b3RlUHJvcGVydHlTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZWg0azAzJ29ubG9hZCUzZCdhbGVydCgxKSd4bGFpYiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA4IC0gUlhTUyB2aWEgREhUTUwgZXZlbnQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgcHJvcGVydHkgKFNpbmdsZSBRdW90ZSBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClVzZXIgQ29udHJvbGxlZCBJbWFnZTogPGltZyBzcmM9J3RleHR2YWx1ZWg0azAzJ29ubG9hZD0nYWxlcnQoMSkneGxhaWInPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4494200655883967488</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case09-SrcProperty2TagStructure.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case09-SrcProperty2TagStructure.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is not encapsulated in any quotation marks. The payload <b>eliwc onload=alert(1) cwhng</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTA5LVNyY1Byb3BlcnR5MlRhZ1N0cnVjdHVyZS5qc3A/dXNlcmlucHV0PWVsaXdjJTIwb25sb2FkJTNkYWxlcnQoMSklMjBjd2huZyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTMNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA5IC0gUlhTUyB2aWEgc3JjIHByb3BlcnR5IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIHRhZyBzdHJ1Y3R1cmUgKFJGSSk8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2NyaXB0IFRhZzogPHNjcmlwdCBpZD1lbGl3YyBvbmxvYWQ9YWxlcnQoMSkgY3dobmc+CmRvY3VtZW50LndyaXRlKCdoZWxsbycpOwo8L3NjcmlwdD4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8006314149850525696</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case10-Js2DoubleQuoteJsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case10-Js2DoubleQuoteJsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>13365';alert(1)//745</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTEwLUpzMkRvdWJsZVF1b3RlSnNFdmVudFNjb3BlLmpzcD91c2VyaW5wdXQ9dGV4dHZhbHVlMTMzNjUnJTNiYWxlcnQoMSklMmYlMmY3NDUgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD04QUY3NjcxODVBNzNENkExNTA0QjFFNDJGMDM0MzRENQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMCAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwvSmF2YXNjcmlwdCBFdmVudCAoRG91YmxlIFF1b3RlIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKSGVsbG8gQnV0dG9uOiA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iQ2xpY2tNZSIgb25DbGljaz0idmFyIGN1c3RvbWVyTmFtZT0ndGV4dHZhbHVlMTMzNjUnO2FsZXJ0KDEpLy83NDUnOyBhbGVydCgnV2VsY29tZSBNci4gJyArIGN1c3RvbWVyTmFtZSk7Ij4gCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6859472415226795008</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case11-Js2SingleQuoteJsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case11-Js2SingleQuoteJsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in single quotation marks. The payload <b>17276";alert(1)//996</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTExLUpzMlNpbmdsZVF1b3RlSnNFdmVudFNjb3BlLmpzcD91c2VyaW5wdXQ9dGV4dHZhbHVlMTcyNzYlMjIlM2JhbGVydCgxKSUyZiUyZjk5NiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMSAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwvSmF2YXNjcmlwdCBFdmVudCAoU2luZ2xlIFF1b3RlIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKSGVsbG8gQnV0dG9uOiA8aW5wdXQgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2xpY2tNZScgb25DbGljaz0ndmFyIGN1c3RvbWVyTmFtZT0idGV4dHZhbHVlMTcyNzYiO2FsZXJ0KDEpLy85OTYiOyBhbGVydCgiV2VsY29tZSBNci4gIiArIGN1c3RvbWVyTmFtZSk7Jz4gCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4347008237953883136</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case12-Js2JsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case12-Js2JsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>51329;alert(1)//575</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTEyLUpzMkpzRXZlbnRTY29wZS5qc3A/dXNlcmlucHV0PTEyMzQ1MTMyOSUzYmFsZXJ0KDEpJTJmJTJmNTc1IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTUNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMiAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwvSmF2YXNjcmlwdCBFdmVudCAoQW55IERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKSGVsbG8gQnV0dG9uOiA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iQ2xpY2tNZSIgb25DbGljaz0idmFyIG9yZGVyTnVtYmVyPTEyMzQ1MTMyOTthbGVydCgxKS8vNTc1OyBhbGVydCgnT3JkZXIgTnVtYmVyICcrIG9yZGVyTnVtYmVyICsnIFdhcyBBcHByb3ZlZCcpOyI+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6090962553915962368</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case13-Vbs2DoubleQuoteVbsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case13-Vbs2DoubleQuoteVbsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>23244';alert(1)//350</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTEzLVZiczJEb3VibGVRdW90ZVZic0V2ZW50U2NvcGUuanNwP3VzZXJpbnB1dD10ZXh0dmFsdWUyMzI0NCclM2JhbGVydCgxKSUyZiUyZjM1MCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzENCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMyAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1ML1ZCU2NyaXB0IEV2ZW50IChEb3VibGUgUXVvdGUgRGVsaW1pdGVyKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpIZWxsbyBCdXR0b246IDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJDbGlja01lIiBvbkNsaWNrPSJWQlNjcmlwdDpEb2N1bWVudC5Xcml0ZSAnaGVsbG8gbXIuIHRleHR2YWx1ZTIzMjQ0JzthbGVydCgxKS8vMzUwJyI+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8460079760040836096</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case14-Vbs2SingleQuoteVbsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case14-Vbs2SingleQuoteVbsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in single quotation marks. The payload <b>10381";alert(1)//356</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTE0LVZiczJTaW5nbGVRdW90ZVZic0V2ZW50U2NvcGUuanNwP3VzZXJpbnB1dD10ZXh0dmFsdWUxMDM4MSUyMiUzYmFsZXJ0KDEpJTJmJTJmMzU2IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzENCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNCAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1ML1ZCU2NyaXB0IEV2ZW50IChTaW5nbGUgUXVvdGUgRGVsaW1pdGVyKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpIZWxsbyBCdXR0b246IDxpbnB1dCB0eXBlPSdidXR0b24nIHZhbHVlPSdDbGlja01lJyBvbkNsaWNrPSdWQlNjcmlwdDpEb2N1bWVudC5Xcml0ZSAiaGVsbG8gbXIuIHRleHR2YWx1ZTEwMzgxIjthbGVydCgxKS8vMzU2Iic+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>195027066361135104</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case15-Vbs2VbsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case15-Vbs2VbsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>55136;alert(1)//724</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTE1LVZiczJWYnNFdmVudFNjb3BlLmpzcD91c2VyaW5wdXQ9MTIzNDU1MTM2JTNiYWxlcnQoMSklMmYlMmY3MjQgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD04QUY3NjcxODVBNzNENkExNTA0QjFFNDJGMDM0MzRENQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNSAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1ML1ZCU2NyaXB0IEV2ZW50IChBbnkgRGVsaW1pdGVyKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpIZWxsbyBCdXR0b246IDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJDbGlja01lIiBvbkNsaWNrPSJWQlNjcmlwdDogRGltIE9yZGVySUQKT3JkZXJJRCA9IDEyMzQ1NTEzNjthbGVydCgxKS8vNzI0CiBEb2N1bWVudC5Xcml0ZSAnT3JkZXIgTnVtYmVyJyAmIE9yZGVySUQgJiAnIFdhcyBBcHByb3ZlZCcKIj4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>931297146839884800</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case16-Js2ScriptSupportingProperty.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case16-Js2ScriptSupportingProperty.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of a tag attribute which can contain JavaScript. The payload <b>javascript:alert(1)//w4gvqnhq</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTE2LUpzMlNjcmlwdFN1cHBvcnRpbmdQcm9wZXJ0eS5qc3A/dXNlcmlucHV0PWphdmFzY3JpcHQlM2FhbGVydCgxKSUyZiUyZnc0Z3ZxbmhxIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNiAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHN1cHBvcnRpbmcgcHJvcGVydHk8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9ImZyYW1lMiIgaWQ9ImZyYW1lMiIgc3JjPSJqYXZhc2NyaXB0OmFsZXJ0KDEpLy93NGd2cW5ocSI+IAoKPC9mcmFtZXNldD4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5962767156042517504</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case17-Js2PropertyJsScopeDoubleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case17-Js2PropertyJsScopeDoubleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>60098";alert(1)//835</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTE3LUpzMlByb3BlcnR5SnNTY29wZURvdWJsZVF1b3RlRGVsaW1pdGVyLmpzcD91c2VyaW5wdXQ9NjAwOTglMjIlM2JhbGVydCgxKSUyZiUyZjgzNSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NjkNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNyAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGphdmFzY3JpcHQgY29kZSB3aXRoaW4gYSBwcm9wZXJ0eSAoRG91YmxlIFF1b3RlIFN0cmluZyBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgoKCgo8ZnJhbWVzZXQgY29scz0iMjUlLDc1JSI+CjxmcmFtZSBuYW1lPSJmcmFtZTEiIGlkPSJmcmFtZTEiIHNyYz0iZHVtbXkuaHRtbCI+CjxmcmFtZSBuYW1lPSdmcmFtZTInIGlkPSdmcmFtZTInIHNyYz0namF2YXNjcmlwdDp2YXIgY3VzdG9tZXJOYW1lPSI2MDA5OCI7YWxlcnQoMSkvLzgzNSI7IGFsZXJ0KCJXZWxjb21lIE1yLiAiICsgY3VzdG9tZXJOYW1lKTsnPiAKCjwvZnJhbWVzZXQ+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1727089707678930944</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case18-Js2PropertyJsScopeSingleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case18-Js2PropertyJsScopeSingleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>71982';alert(1)//318</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTE4LUpzMlByb3BlcnR5SnNTY29wZVNpbmdsZVF1b3RlRGVsaW1pdGVyLmpzcD91c2VyaW5wdXQ9NzE5ODInJTNiYWxlcnQoMSklMmYlMmYzMTggSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD04QUY3NjcxODVBNzNENkExNTA0QjFFNDJGMDM0MzRENQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NzQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgoJPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cgk8dGl0bGU+Q2FzZSAxOCAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGphdmFzY3JpcHQgY29kZSB3aXRoaW4gYSBwcm9wZXJ0eSAoU2luZ2xlIFF1b3RlIFN0cmluZyBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgoKCgo8ZnJhbWVzZXQgY29scz0iMjUlLDc1JSI+Cgk8ZnJhbWUgbmFtZT0iZnJhbWUxIiBpZD0iZnJhbWUxIiBzcmM9ImR1bW15Lmh0bWwiPgoJPGZyYW1lIG5hbWU9ImZyYW1lMiIgaWQ9ImZyYW1lMiIgc3JjPSJqYXZhc2NyaXB0OnZhciBjdXN0b21lck5hbWU9JzcxOTgyJzthbGVydCgxKS8vMzE4JzsgYWxlcnQoJ1dlbGNvbWUgTXIuICcgKyBjdXN0b21lck5hbWUpOyI+IAoKPC9mcmFtZXNldD4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4028907030481539072</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case19-Js2PropertyJsScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case19-Js2PropertyJsScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>28233;alert(1)//816</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTE5LUpzMlByb3BlcnR5SnNTY29wZS5qc3A/dXNlcmlucHV0PTI4MjMzJTNiYWxlcnQoMSklMmYlMmY4MTYgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD04QUY3NjcxODVBNzNENkExNTA0QjFFNDJGMDM0MzRENQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NjQNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxOSAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGphdmFzY3JpcHQgY29kZSB3aXRoaW4gYSBwcm9wZXJ0eSAoTm8gU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9ImZyYW1lMiIgaWQ9ImZyYW1lMiIgc3JjPSJqYXZhc2NyaXB0OnZhciBvcmRlcklkPTI4MjMzO2FsZXJ0KDEpLy84MTY7IGFsZXJ0KCdPcmRlciBOdW1iZXIgJyArIG9yZGVySWQgKycgV2FzIEFwcHJvdmVkJyk7Ij4gCgo8L2ZyYW1lc2V0Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1836346567462313984</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case20-Vbs2PropertyVbsScopeDoubleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case20-Vbs2PropertyVbsScopeDoubleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>95121"&amp;msgbox(1)&amp;"391</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary VBScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTIwLVZiczJQcm9wZXJ0eVZic1Njb3BlRG91YmxlUXVvdGVEZWxpbWl0ZXIuanNwP3VzZXJpbnB1dD05NTEyMSUyMiUyNm1zZ2JveCgxKSUyNiUyMjM5MSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyMCAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBWQlNjcmlwdCBjb2RlIHdpdGhpbiBhIHByb3BlcnR5IChEb3VibGUgUXVvdGUgU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9J2ZyYW1lMicgaWQ9J2ZyYW1lMicgc3JjPSdWQlNjcmlwdDogCkRvY3VtZW50LldyaXRlICgiV2VsY29tZSBNci4gOTUxMjEiJm1zZ2JveCgxKSYiMzkxIikKJz4gCgo8L2ZyYW1lc2V0Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8570106861745384448</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case21-Vbs2PropertyVbsScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case21-Vbs2PropertyVbsScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>68141&amp;msgbox(1)&amp;128</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary VBScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTIxLVZiczJQcm9wZXJ0eVZic1Njb3BlLmpzcD91c2VyaW5wdXQ9NjgxNDElMjZtc2dib3goMSklMjYxMjggSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD04QUY3NjcxODVBNzNENkExNTA0QjFFNDJGMDM0MzRENQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDENCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyMSAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBWQlNjcmlwdCBjb2RlIHdpdGhpbiBhIHByb3BlcnR5IChTaW5nbGUgUXVvdGUgU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9J2ZyYW1lMicgaWQ9J2ZyYW1lMicgc3JjPSdWQlNjcmlwdDogCkRvY3VtZW50LldyaXRlICgiV2VsY29tZSBNci4gIiAmIDY4MTQxJm1zZ2JveCgxKSYxMjgpCic+IAoKPC9mcmFtZXNldD4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8323033927727118336</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case22-Js2ScriptTagDoubleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case22-Js2ScriptTagDoubleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in double quotation marks. The payload <b>84781";alert(1)//226</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTIyLUpzMlNjcmlwdFRhZ0RvdWJsZVF1b3RlRGVsaW1pdGVyLmpzcD91c2VyaW5wdXQ9ZGF2aWQ4NDc4MSUyMiUzYmFsZXJ0KDEpJTJmJTJmMjI2IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODANCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyMiAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyAoSmF2YXNjcmlwdCwgRG91YmxlIFF1b3RlIFN0cmluZyBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnPgp2YXIgY3VzdG9tZXJOYW1lPSJkYXZpZDg0NzgxIjthbGVydCgxKS8vMjI2IjsKIGFsZXJ0KCJXZWxjb21lIE1yLiAiICsgY3VzdG9tZXJOYW1lKTsKPC9zY3JpcHQ+IAoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8966694577948924928</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case23-Js2ScriptTagSingleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case23-Js2ScriptTagSingleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in single quotation marks. The payload <b>32608';alert(1)//989</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTIzLUpzMlNjcmlwdFRhZ1NpbmdsZVF1b3RlRGVsaW1pdGVyLmpzcD91c2VyaW5wdXQ9ZGF2aWQzMjYwOCclM2JhbGVydCgxKSUyZiUyZjk4OSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODANCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyMyAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyAoSmF2YXNjcmlwdCwgU2luZ2xlIFF1b3RlIFN0cmluZyBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnPgp2YXIgY3VzdG9tZXJOYW1lPSdkYXZpZDMyNjA4JzthbGVydCgxKS8vOTg5JzsKIGFsZXJ0KCdXZWxjb21lIE1yLiAnICsgY3VzdG9tZXJOYW1lKTsKPC9zY3JpcHQ+IAoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3907378427977601024</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case24-Js2ScriptTag.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case24-Js2ScriptTag.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript expression which is not encapsulated in any quotation marks. The payload <b>23911;alert(1)//865</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTI0LUpzMlNjcmlwdFRhZy5qc3A/dXNlcmlucHV0PTEyMzQyMzkxMSUzYmFsZXJ0KDEpJTJmJTJmODY1IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzcNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyNCAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyAoSmF2YXNjcmlwdCwgTm8gU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKPHNjcmlwdCBsYW5ndWFnZT0namF2YXNjcmlwdCc+CnZhciBvcmRlcklkID0gMTIzNDIzOTExO2FsZXJ0KDEpLy84NjU7CiBhbGVydCgnT3JkZXIgTnVtYmVyICcgKyBvcmRlcklkICsgJyBXYXMgQXBwcm92ZWQnKTsKPC9zY3JpcHQ+IAoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6260977985061987328</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case25-Vbs2ScriptTagDoubleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case25-Vbs2ScriptTagDoubleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in double quotation marks. The payload <b>68934";alert(1)//350</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTI1LVZiczJTY3JpcHRUYWdEb3VibGVRdW90ZURlbGltaXRlci5qc3A/dXNlcmlucHV0PWRhdmlkNjg5MzQlMjIlM2JhbGVydCgxKSUyZiUyZjM1MCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyNSAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhIHNjcmlwdCB0YWcgKFZCU2NyaXB0LCBEb3VibGUgUXVvdGUgU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKPHNjcmlwdCBsYW5ndWFnZT0nVkJTY3JpcHQnPgpEaW0gY3VzdG9tZXJOYW1lCmN1c3RvbWVyTmFtZSA9ICJkYXZpZDY4OTM0IjthbGVydCgxKS8vMzUwIgpEb2N1bWVudC5Xcml0ZSAoIldlbGNvbWUgIiAmIGN1c3RvbWVyTmFtZSkKPC9zY3JpcHQ+IAoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2291350830381656064</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case26-Vbs2ScriptTag.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case26-Vbs2ScriptTag.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript expression which is not encapsulated in any quotation marks. The payload <b>92029;alert(1)//793</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTI2LVZiczJTY3JpcHRUYWcuanNwP3VzZXJpbnB1dD0xMjM0OTIwMjklM2JhbGVydCgxKSUyZiUyZjc5MyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODYNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyNiAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhIHNjcmlwdCB0YWcgKFZCU2NyaXB0LCBObyBTdHJpbmcgRGVsaW1pdGVyKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0IGxhbmd1YWdlPSdWQlNjcmlwdCc+CkRpbSBvcmRlcklkCm9yZGVySWQgPSAxMjM0OTIwMjk7YWxlcnQoMSkvLzc5MwpEb2N1bWVudC5Xcml0ZSAoIk9yZGVyIE51bWJlciAiICYgb3JkZXJJZCAmICIgV2FzIEFwcHJvdmVkIikKPC9zY3JpcHQ+IAoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1682385592848523264</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case27-Js2ScriptTagOLCommentScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case27-Js2ScriptTagOLCommentScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript rest-of-line comment. The payload <b>58604[0x0a]alert(1)//245</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTI3LUpzMlNjcmlwdFRhZ09MQ29tbWVudFNjb3BlLmpzcD91c2VyaW5wdXQ9MTIzNDU4NjA0JTBhYWxlcnQoMSklMmYlMmYyNDUgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD04QUY3NjcxODVBNzNENkExNTA0QjFFNDJGMDM0MzRENQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MzgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyNyAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyBzaW5nbGUgbGluZSBjb21tZW50PC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnPgovL3ZhciBvcmRlcklkID0gMTIzNDU4NjA0CmFsZXJ0KDEpLy8yNDU7CiBhbGVydCgnT3JkZXIgQXBwcm92ZWQnKTsKPC9zY3JpcHQ+IAoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3337808484766667776</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case28-Js2ScriptTagMLCommentScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case28-Js2ScriptTagMLCommentScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript inline comment. The payload <b>16719*/alert(1)//760</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTI4LUpzMlNjcmlwdFRhZ01MQ29tbWVudFNjb3BlLmpzcD91c2VyaW5wdXQ9MTIzNDE2NzE5KiUyZmFsZXJ0KDEpJTJmJTJmNzYwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NDENCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyOCAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyBtdWx0aWxpbmUgY29tbWVudDwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0IGxhbmd1YWdlPSdqYXZhc2NyaXB0Jz4KLyogdmFyIG9yZGVySWQgPSAxMjM0MTY3MTkqL2FsZXJ0KDEpLy83NjA7ICovCiBhbGVydCgnT3JkZXIgQXBwcm92ZWQnKTsKPC9zY3JpcHQ+IAoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3991602689799705600</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case29-Vbs2ScriptTagOLCommentScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case29-Vbs2ScriptTagOLCommentScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript expression which is not encapsulated in any quotation marks. The payload <b>75935;alert(1)//451</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTI5LVZiczJTY3JpcHRUYWdPTENvbW1lbnRTY29wZS5qc3A/dXNlcmlucHV0PTEyMzQ3NTkzNSUzYmFsZXJ0KDEpJTJmJTJmNDUxIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTENCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyOSAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhIHNjcmlwdCB0YWcgc2luZ2xlIGxpbmUgY29tbWVudDwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0IGxhbmd1YWdlPSdWQlNjcmlwdCc+CkRpbSBvcmRlcklkClJlbSBvcmRlcklkID0gMTIzNDc1OTM1O2FsZXJ0KDEpLy80NTEKRG9jdW1lbnQuV3JpdGUgKCJPcmRlciBBcHByb3ZlZCIpCjwvc2NyaXB0PiAKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4628552625688401920</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case30-Tag2HtmlPageScopeMultipleVulnerabilities.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case30-Tag2HtmlPageScopeMultipleVulnerabilities.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>fe6fi&lt;script&gt;alert(1)&lt;/script&gt;dfq87</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTMwLVRhZzJIdG1sUGFnZVNjb3BlTXVsdGlwbGVWdWxuZXJhYmlsaXRpZXMuanNwP3VzZXJpbnB1dD0xMjM0ZmU2ZmklM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZWRmcTg3JnVzZXJpbnB1dDI9MTIzNCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MjkNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMwIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIHBhZ2UgKE11bHRpcGxlIFJYU1MgVnVsbmVyYWJpbGl0aWVzKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgMXN0IHJlZmxlY3RlZCB2YWx1ZTogMTIzNGZlNmZpPHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PmRmcTg3ClRoZSAybmQgcmVmbGVjdGVkIHZhbHVlOiAxMjM0CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4178894625710453760</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case30-Tag2HtmlPageScopeMultipleVulnerabilities.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case30-Tag2HtmlPageScopeMultipleVulnerabilities.jsp [userinput2 parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput2</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>lvmmi&lt;script&gt;alert(1)&lt;/script&gt;v2cg9</b> was submitted in the userinput2 parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTMwLVRhZzJIdG1sUGFnZVNjb3BlTXVsdGlwbGVWdWxuZXJhYmlsaXRpZXMuanNwP3VzZXJpbnB1dD0xMjM0JnVzZXJpbnB1dDI9MTIzNGx2bW1pJTNjc2NyaXB0JTNlYWxlcnQoMSklM2MlMmZzY3JpcHQlM2V2MmNnOSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MjkNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMwIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIHBhZ2UgKE11bHRpcGxlIFJYU1MgVnVsbmVyYWJpbGl0aWVzKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgMXN0IHJlZmxlY3RlZCB2YWx1ZTogMTIzNApUaGUgMm5kIHJlZmxlY3RlZCB2YWx1ZTogMTIzNGx2bW1pPHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PnYyY2c5CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8825642055592497152</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case32-Tag2HtmlPageScopeValidViewstateRequired.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case32-Tag2HtmlPageScopeValidViewstateRequired.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>r2f56&lt;script&gt;alert(1)&lt;/script&gt;rxwj6</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTMyLVRhZzJIdG1sUGFnZVNjb3BlVmFsaWRWaWV3c3RhdGVSZXF1aXJlZC5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZXIyZjU2JTNjc2NyaXB0JTNlYWxlcnQoMSklM2MlMmZzY3JpcHQlM2VyeHdqNiZfX1ZJRVdTVEFURT0lMkZ3RVBEd1VFTlRNNE1XUmtoc2pGJTJCNjJnV25oWVVjRXl1UndUSHhHRFZ6QSUzRCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPThBRjc2NzE4NUE3M0Q2QTE1MDRCMUU0MkYwMzQzNEQ1DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODkNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMyIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIHBhZ2UgKFZpZXdzdGF0ZSBSZXF1aXJlZCk8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIHJlZmxlY3RlZCB2YWx1ZTogdGV4dHZhbHVlcjJmNTY8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+cnh3ajYKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3838593686727579648</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST-Experimental/Case01-Tag2HtmlPageScope-StripScriptTag.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST-Experimental/Case01-Tag2HtmlPageScope-StripScriptTag.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>kxlm0&lt;img src=a onerror=alert(1)&gt;kq4mzwddt7b</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULUV4cGVyaW1lbnRhbC9DYXNlMDEtVGFnMkh0bWxQYWdlU2NvcGUtU3RyaXBTY3JpcHRUYWcuanNwP3VzZXJpbnB1dD10ZXN0aW5wdXRreGxtMCUzY2ltZyUyMHNyYyUzZGElMjBvbmVycm9yJTNkYWxlcnQoMSklM2VrcTRtendkZHQ3YiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULUV4cGVyaW1lbnRhbC9DYXNlMDEtVGFnMkh0bWxQYWdlU2NvcGUtU3RyaXBTY3JpcHRUYWcuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MjMNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBSWFNTIHZpYSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgcGFnZSB0aGF0IFN0cmlwcyBTY3JpcHQgVGFnczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8IS0tCglJbnNwaXJlZCBieSBhIHZ1bG5lcmFibGUgdGVzdCBjYXNlIG9yaWdpbmFsbHkgd3JpdHRlbiBmb3IgdGhlIE9XQVNQIFplZCBBdHRhY2sgUHJveHkgKFpBUCkgcHJvamVjdAoJKGh0dHA6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9PV0FTUF9aZWRfQXR0YWNrX1Byb3h5X1Byb2plY3QpIAoJT3JpZ2luYWwgQXV0aG9yOiBwc2lpbm9uIChwc2lpbm9uQGdtYWlsLmNvbSkuCi0tPgoKVGhlIHJlZmxlY3RlZCB2YWx1ZTogdGVzdGlucHV0a3hsbTA8aW1nIHNyYz1hIG9uZXJyb3I9YWxlcnQoMSk+a3E0bXp3ZGR0N2IKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7060167781803361280</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST-Experimental/Case05-ScriptlessInjectionInFormTagActionAttribute.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST-Experimental/Case05-ScriptlessInjectionInFormTagActionAttribute.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of a tag attribute which can contain JavaScript. The payload <b>&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;alert(1)//ngoxh2e7</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The application attempts to prevent execution of script by blocking use of the javascript: protocol. However, this defense can by circumvented by HTML-encoding the protocol prefix in the attack string.]]></issueDetail>
    <remediationDetail><![CDATA[Blacklist-based filters designed to block known bad inputs are usually inadequate and should be replaced with more effective input and output validation. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULUV4cGVyaW1lbnRhbC9DYXNlMDUtU2NyaXB0bGVzc0luamVjdGlvbkluRm9ybVRhZ0FjdGlvbkF0dHJpYnV0ZS5qc3A/dXNlcmlucHV0PSUyNiUyM3g2YSUzYiUyNiUyM3g2MSUzYiUyNiUyM3g3NiUzYiUyNiUyM3g2MSUzYiUyNiUyM3g3MyUzYiUyNiUyM3g2MyUzYiUyNiUyM3g3MiUzYiUyNiUyM3g2OSUzYiUyNiUyM3g3MCUzYiUyNiUyM3g3NCUzYiUyNiUyM3gzYSUzYmFsZXJ0KDEpJTJmJTJmbmdveGgyZTcgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtRXhwZXJpbWVudGFsL0Nhc2UwNS1TY3JpcHRsZXNzSW5qZWN0aW9uSW5Gb3JtVGFnQWN0aW9uQXR0cmlidXRlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MzQNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+U2NyaXB0bGVzcyBJbmplY3Rpb24gaW4gSFRNTCBGb3JtIFRhZyBBY3Rpb24gQXR0cmlidXRlIHNjb3BlIG9mIHRoZSBIVE1MIHBhZ2UuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KPCEtLQoJQ29udHJpYnV0ZWQgYnkgdGhlIElyb25XQVNQIHByb2plY3QgKGh0dHA6Ly9pcm9ud2FzcC5vcmcvKS4KCU9yaWdpbmFsIEF1dGhvcjogTGF2YWt1bWFyIEt1cHBhbiAobGF2YUBpcm9ud2FzcC5vcmcpLgotLT4KCjxmb3JtIGFjdGlvbj0iJiN4NmE7JiN4NjE7JiN4NzY7JiN4NjE7JiN4NzM7JiN4NjM7JiN4NzI7JiN4Njk7JiN4NzA7JiN4NzQ7JiN4M2E7YWxlcnQoMSkvL25nb3hoMmU3Ij4KRW50ZXIgUGFzc3dvcmQ6IDxpbnB1dCBuYW1lPSdwYXNzd29yZCcgaWQ9J3Bhc3N3b3JkJyB0eXBlPSdwYXNzd29yZCcgdmFsdWU9JycvPgo8L2Zvcm0+IAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6534114874611332096</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case01-Tag2HtmlPageScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case01-Tag2HtmlPageScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>gcx10&lt;script&gt;alert(1)&lt;/script&gt;xdqeuflph99</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwMS1UYWcySHRtbFBhZ2VTY29wZS5qc3A/dXNlcmlucHV0PXRlc3R2YWx1ZWdjeDEwJTNjc2NyaXB0JTNlYWxlcnQoMSklM2MlMmZzY3JpcHQlM2V4ZHFldWZscGg5OSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QvQ2FzZTAxLVRhZzJIdG1sUGFnZVNjb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTBFMjMxNDU4MDVGREQyQzhENTY2MThFRkM2MzdFMUFDDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNzMNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBSWFNTIHZpYSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgcGFnZTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgcmVmbGVjdGVkIHZhbHVlOiB0ZXN0dmFsdWVnY3gxMDxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD54ZHFldWZscGg5OQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5475295644151884800</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case02-Tag2TagScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case02-Tag2TagScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>x3l6k&lt;script&gt;alert(1)&lt;/script&gt;a7gf1lx92qg</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwMi1UYWcyVGFnU2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0dmFsdWV4M2w2ayUzY3NjcmlwdCUzZWFsZXJ0KDEpJTNjJTJmc2NyaXB0JTNlYTdnZjFseDkycWcgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwMi1UYWcyVGFnU2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTMNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBSWFNTIHZpYSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgdGFnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxURVhUQVJFQT5UaGUgcmVmbGVjdGVkIHZhbHVlOiB0ZXN0dmFsdWV4M2w2azxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5hN2dmMWx4OTJxZzwvVEVYVEFSRUE+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5162042380363951104</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case03-Tag2TagStructure.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case03-Tag2TagStructure.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>j3c1w"&gt;&lt;script&gt;alert(1)&lt;/script&gt;tsejqbwxtgx</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwMy1UYWcyVGFnU3RydWN0dXJlLmpzcD91c2VyaW5wdXQ9dGVzdHZhbHVlajNjMXclMjIlM2UlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZXRzZWpxYnd4dGd4IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMDMtVGFnMlRhZ1N0cnVjdHVyZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBSWFNTIHZpYSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgdGFnIHN0cnVjdHVyZTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8aW5wdXQgdHlwZT0idGV4dCIgdmFsdWU9IlRoZSByZWZsZWN0ZWQgdmFsdWU6IHRlc3R2YWx1ZWozYzF3Ij48c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+dHNlanFid3h0Z3giPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5489089274566881280</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case04-Tag2HtmlComment.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case04-Tag2HtmlComment.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into an HTML comment. The payload <b>qswk6--&gt;&lt;script&gt;alert(1)&lt;/script&gt;d9vjxnhxvm0</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within HTML comment tags does not prevent XSS attacks if the user is able to close the comment or use other techniques to introduce scripts within the comment context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwNC1UYWcySHRtbENvbW1lbnQuanNwP3VzZXJpbnB1dD10ZXN0dmFsdWVxc3drNi0tJTNlJTNjc2NyaXB0JTNlYWxlcnQoMSklM2MlMmZzY3JpcHQlM2VkOXZqeG5oeHZtMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QvQ2FzZTA0LVRhZzJIdG1sQ29tbWVudC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDQgLSBSWFNTIHZpYSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgY29tbWVudDwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgcmVmbGVjdGVkIHZhbHVlIGlzIHdpdGhpbiBhbiBodG1sIGNvbW1lbnQ6IDwhLS10ZXN0dmFsdWVxc3drNi0tPjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5kOXZqeG5oeHZtMC0tPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8154341437123130368</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case05-Tag2Frameset.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case05-Tag2Frameset.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of a tag attribute which can contain JavaScript. The payload <b>javascript:alert(1)//efc5zy0ds6pjdk</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwNS1UYWcyRnJhbWVzZXQuanNwP3VzZXJpbnB1dD1qYXZhc2NyaXB0JTNhYWxlcnQoMSklMmYlMmZlZmM1enkwZHM2cGpkayBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QvQ2FzZTA1LVRhZzJGcmFtZXNldC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NjMNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBSWFNTIHZpYSBmcmFtZSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgZnJhbWVzZXQ8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9ImZyYW1lMiIgaWQ9ImZyYW1lMiIgc3JjPSJqYXZhc2NyaXB0OmFsZXJ0KDEpLy9lZmM1enkwZHM2cGpkayI+IAoKPC9mcmFtZXNldD4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2568751257262398464</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case06-Event2TagScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case06-Event2TagScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>a2if5"onload="alert(1)"m0sqenm8avh</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwNi1FdmVudDJUYWdTY29wZS5qc3A/dXNlcmlucHV0PXRlc3R2YWx1ZWEyaWY1JTIyb25sb2FkJTNkJTIyYWxlcnQoMSklMjJtMHNxZW5tOGF2aCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QvQ2FzZTA2LUV2ZW50MlRhZ1Njb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTBFMjMxNDU4MDVGREQyQzhENTY2MThFRkM2MzdFMUFDDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA2IC0gUlhTUyB2aWEgREhUTUwgZXZlbnQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgdGFnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClVzZXIgQ29udHJvbGxlZCBJbWFnZTogPGltZyBzcmM9InRlc3R2YWx1ZWEyaWY1Im9ubG9hZD0iYWxlcnQoMSkibTBzcWVubThhdmgiPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9171701121757594624</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case07-Event2DoubleQuotePropertyScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case07-Event2DoubleQuotePropertyScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>hc5pv"onload="alert(1)"j6qk5rambmb</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwNy1FdmVudDJEb3VibGVRdW90ZVByb3BlcnR5U2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0dmFsdWVoYzVwdiUyMm9ubG9hZCUzZCUyMmFsZXJ0KDEpJTIyajZxazVyYW1ibWIgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwNy1FdmVudDJEb3VibGVRdW90ZVByb3BlcnR5U2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA3IC0gUlhTUyB2aWEgREhUTUwgZXZlbnQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgcHJvcGVydHkgKERvdWJsZSBRdW90ZSBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClVzZXIgQ29udHJvbGxlZCBJbWFnZTogPGltZyBzcmM9InRlc3R2YWx1ZWhjNXB2Im9ubG9hZD0iYWxlcnQoMSkiajZxazVyYW1ibWIiPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8814316268848478208</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case08-Event2SingleQuotePropertyScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case08-Event2SingleQuotePropertyScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>pdwbx'onload='alert(1)'zh5a1cy2imv</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwOC1FdmVudDJTaW5nbGVRdW90ZVByb3BlcnR5U2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0dmFsdWVwZHdieCdvbmxvYWQlM2QnYWxlcnQoMSknemg1YTFjeTJpbXYgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwOC1FdmVudDJTaW5nbGVRdW90ZVByb3BlcnR5U2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA4IC0gUlhTUyB2aWEgREhUTUwgZXZlbnQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgcHJvcGVydHkgKFNpbmdsZSBRdW90ZSBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClVzZXIgQ29udHJvbGxlZCBJbWFnZTogPGltZyBzcmM9J3Rlc3R2YWx1ZXBkd2J4J29ubG9hZD0nYWxlcnQoMSknemg1YTFjeTJpbXYnPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4632898244788241408</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case09-SrcProperty2TagStructure.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case09-SrcProperty2TagStructure.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is not encapsulated in any quotation marks. The payload <b>gmjb8 onload=alert(1) bi3h7mjs6ly</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwOS1TcmNQcm9wZXJ0eTJUYWdTdHJ1Y3R1cmUuanNwP3VzZXJpbnB1dD1nbWpiOCUyMG9ubG9hZCUzZGFsZXJ0KDEpJTIwYmkzaDdtanM2bHkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UwOS1TcmNQcm9wZXJ0eTJUYWdTdHJ1Y3R1cmUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTkNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA5IC0gUlhTUyB2aWEgc3JjIHByb3BlcnR5IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIHRhZyBzdHJ1Y3R1cmUgKFJGSSk8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2NyaXB0IFRhZzogPHNjcmlwdCBpZD1nbWpiOCBvbmxvYWQ9YWxlcnQoMSkgYmkzaDdtanM2bHk+CmRvY3VtZW50LndyaXRlKCdoZWxsbycpOwo8L3NjcmlwdD4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7889230955800489984</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case10-Js2DoubleQuoteJsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case10-Js2DoubleQuoteJsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>73500';alert(1)//508m8dlud</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxMC1KczJEb3VibGVRdW90ZUpzRXZlbnRTY29wZS5qc3A/dXNlcmlucHV0PXRlc3R2YWx1ZTczNTAwJyUzYmFsZXJ0KDEpJTJmJTJmNTA4bThkbHVkIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMTAtSnMyRG91YmxlUXVvdGVKc0V2ZW50U2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDQNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMCAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwvSmF2YXNjcmlwdCBFdmVudCAoRG91YmxlIFF1b3RlIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKSGVsbG8gQnV0dG9uOiA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iQ2xpY2tNZSIgb25DbGljaz0idmFyIGN1c3RvbWVyTmFtZT0ndGVzdHZhbHVlNzM1MDAnO2FsZXJ0KDEpLy81MDhtOGRsdWQnOyBhbGVydCgnV2VsY29tZSBNci4gJyArIGN1c3RvbWVyTmFtZSk7Ij4gCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6412409083498616832</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case11-Js2SingleQuoteJsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case11-Js2SingleQuoteJsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in single quotation marks. The payload <b>13170";alert(1)//874giu8jd</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxMS1KczJTaW5nbGVRdW90ZUpzRXZlbnRTY29wZS5qc3A/dXNlcmlucHV0PXRlc3R2YWx1ZTEzMTcwJTIyJTNiYWxlcnQoMSklMmYlMmY4NzRnaXU4amQgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxMS1KczJTaW5nbGVRdW90ZUpzRXZlbnRTY29wZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDQNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMSAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwvSmF2YXNjcmlwdCBFdmVudCAoU2luZ2xlIFF1b3RlIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKSGVsbG8gQnV0dG9uOiA8aW5wdXQgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2xpY2tNZScgb25DbGljaz0ndmFyIGN1c3RvbWVyTmFtZT0idGVzdHZhbHVlMTMxNzAiO2FsZXJ0KDEpLy84NzRnaXU4amQiOyBhbGVydCgiV2VsY29tZSBNci4gIiArIGN1c3RvbWVyTmFtZSk7Jz4gCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4986454982066794496</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case12-Js2JsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case12-Js2JsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>22868;alert(1)//937sqp4ey</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxMi1KczJKc0V2ZW50U2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0dmFsdWUyMjg2OCUzYmFsZXJ0KDEpJTJmJTJmOTM3c3FwNGV5IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMTItSnMySnNFdmVudFNjb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTBFMjMxNDU4MDVGREQyQzhENTY2MThFRkM2MzdFMUFDDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDYNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMiAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwvSmF2YXNjcmlwdCBFdmVudCAoQW55IERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKSGVsbG8gQnV0dG9uOiA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iQ2xpY2tNZSIgb25DbGljaz0idmFyIG9yZGVyTnVtYmVyPXRlc3R2YWx1ZTIyODY4O2FsZXJ0KDEpLy85MzdzcXA0ZXk7IGFsZXJ0KCdPcmRlciBOdW1iZXIgJysgb3JkZXJOdW1iZXIgKycgV2FzIEFwcHJvdmVkJyk7Ij4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6843907274098432000</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case13-Vbs2DoubleQuoteVbsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case13-Vbs2DoubleQuoteVbsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>90534';alert(1)//715t0mxb6</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxMy1WYnMyRG91YmxlUXVvdGVWYnNFdmVudFNjb3BlLmpzcD91c2VyaW5wdXQ9dGVzdHZhbHVlOTA1MzQnJTNiYWxlcnQoMSklMmYlMmY3MTV0MG14YjYgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxMy1WYnMyRG91YmxlUXVvdGVWYnNFdmVudFNjb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTBFMjMxNDU4MDVGREQyQzhENTY2MThFRkM2MzdFMUFDDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzcNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMyAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1ML1ZCU2NyaXB0IEV2ZW50IChEb3VibGUgUXVvdGUgRGVsaW1pdGVyKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpIZWxsbyBCdXR0b246IDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJDbGlja01lIiBvbkNsaWNrPSJWQlNjcmlwdDpEb2N1bWVudC5Xcml0ZSAnaGVsbG8gbXIuIHRlc3R2YWx1ZTkwNTM0JzthbGVydCgxKS8vNzE1dDBteGI2JyI+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1618356969478949888</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case14-Vbs2SingleQuoteVbsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case14-Vbs2SingleQuoteVbsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in single quotation marks. The payload <b>40224";alert(1)//385jgwf0w</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxNC1WYnMyU2luZ2xlUXVvdGVWYnNFdmVudFNjb3BlLmpzcD91c2VyaW5wdXQ9dGVzdHZhbHVlNDAyMjQlMjIlM2JhbGVydCgxKSUyZiUyZjM4NWpnd2YwdyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QvQ2FzZTE0LVZiczJTaW5nbGVRdW90ZVZic0V2ZW50U2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzcNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNCAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1ML1ZCU2NyaXB0IEV2ZW50IChTaW5nbGUgUXVvdGUgRGVsaW1pdGVyKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpIZWxsbyBCdXR0b246IDxpbnB1dCB0eXBlPSdidXR0b24nIHZhbHVlPSdDbGlja01lJyBvbkNsaWNrPSdWQlNjcmlwdDpEb2N1bWVudC5Xcml0ZSAiaGVsbG8gbXIuIHRlc3R2YWx1ZTQwMjI0IjthbGVydCgxKS8vMzg1amd3ZjB3Iic+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9124804806452122624</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case15-Vbs2VbsEventScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case15-Vbs2VbsEventScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>36617;alert(1)//663ckaga1</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxNS1WYnMyVmJzRXZlbnRTY29wZS5qc3A/dXNlcmlucHV0PXRlc3R2YWx1ZTM2NjE3JTNiYWxlcnQoMSklMmYlMmY2NjNja2FnYTEgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxNS1WYnMyVmJzRXZlbnRTY29wZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjMNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNSAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1ML1ZCU2NyaXB0IEV2ZW50IChBbnkgRGVsaW1pdGVyKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpIZWxsbyBCdXR0b246IDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJDbGlja01lIiBvbkNsaWNrPSJWQlNjcmlwdDogRGltIE9yZGVySUQKT3JkZXJJRCA9IHRlc3R2YWx1ZTM2NjE3O2FsZXJ0KDEpLy82NjNja2FnYTEKIERvY3VtZW50LldyaXRlICdPcmRlciBOdW1iZXInICYgT3JkZXJJRCAmICcgV2FzIEFwcHJvdmVkJwoiPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>153655308054816768</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case16-Js2ScriptSupportingProperty.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case16-Js2ScriptSupportingProperty.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of a tag attribute which can contain JavaScript. The payload <b>javascript:alert(1)//zs9zf3xvhztvy9</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxNi1KczJTY3JpcHRTdXBwb3J0aW5nUHJvcGVydHkuanNwP3VzZXJpbnB1dD1qYXZhc2NyaXB0JTNhYWxlcnQoMSklMmYlMmZ6czl6ZjN4dmh6dHZ5OSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QvQ2FzZTE2LUpzMlNjcmlwdFN1cHBvcnRpbmdQcm9wZXJ0eS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNiAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHN1cHBvcnRpbmcgcHJvcGVydHk8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9ImZyYW1lMiIgaWQ9ImZyYW1lMiIgc3JjPSJqYXZhc2NyaXB0OmFsZXJ0KDEpLy96czl6ZjN4dmh6dHZ5OSI+IAoKPC9mcmFtZXNldD4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4978637712883582976</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case17-Js2PropertyJsScopeDoubleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case17-Js2PropertyJsScopeDoubleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>79690";alert(1)//405ovbo0y</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxNy1KczJQcm9wZXJ0eUpzU2NvcGVEb3VibGVRdW90ZURlbGltaXRlci5qc3A/dXNlcmlucHV0PTc5NjkwJTIyJTNiYWxlcnQoMSklMmYlMmY0MDVvdmJvMHkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxNy1KczJQcm9wZXJ0eUpzU2NvcGVEb3VibGVRdW90ZURlbGltaXRlci5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NzUNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNyAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGphdmFzY3JpcHQgY29kZSB3aXRoaW4gYSBwcm9wZXJ0eSAoRG91YmxlIFF1b3RlIFN0cmluZyBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgoKCgo8ZnJhbWVzZXQgY29scz0iMjUlLDc1JSI+CjxmcmFtZSBuYW1lPSJmcmFtZTEiIGlkPSJmcmFtZTEiIHNyYz0iZHVtbXkuaHRtbCI+CjxmcmFtZSBuYW1lPSdmcmFtZTInIGlkPSdmcmFtZTInIHNyYz0namF2YXNjcmlwdDp2YXIgY3VzdG9tZXJOYW1lPSI3OTY5MCI7YWxlcnQoMSkvLzQwNW92Ym8weSI7IGFsZXJ0KCJXZWxjb21lIE1yLiAiICsgY3VzdG9tZXJOYW1lKTsnPiAKCjwvZnJhbWVzZXQ+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7150604951956222976</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case18-Js2PropertyJsScopeSingleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case18-Js2PropertyJsScopeSingleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>62573';alert(1)//499wc6kx7</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxOC1KczJQcm9wZXJ0eUpzU2NvcGVTaW5nbGVRdW90ZURlbGltaXRlci5qc3A/dXNlcmlucHV0PTYyNTczJyUzYmFsZXJ0KDEpJTJmJTJmNDk5d2M2a3g3IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMTgtSnMyUHJvcGVydHlKc1Njb3BlU2luZ2xlUXVvdGVEZWxpbWl0ZXIuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NzUNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxOCAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGphdmFzY3JpcHQgY29kZSB3aXRoaW4gYSBwcm9wZXJ0eSAoU2luZ2xlIFF1b3RlIFN0cmluZyBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgoKCgo8ZnJhbWVzZXQgY29scz0iMjUlLDc1JSI+CjxmcmFtZSBuYW1lPSJmcmFtZTEiIGlkPSJmcmFtZTEiIHNyYz0iZHVtbXkuaHRtbCI+CjxmcmFtZSBuYW1lPSJmcmFtZTIiIGlkPSJmcmFtZTIiIHNyYz0iamF2YXNjcmlwdDp2YXIgY3VzdG9tZXJOYW1lPSc2MjU3Myc7YWxlcnQoMSkvLzQ5OXdjNmt4Nyc7IGFsZXJ0KCdXZWxjb21lIE1yLiAnICsgY3VzdG9tZXJOYW1lKTsiPiAKCjwvZnJhbWVzZXQ+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2825551470222502912</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case19-Js2PropertyJsScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case19-Js2PropertyJsScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>24775;alert(1)//278q63afb</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UxOS1KczJQcm9wZXJ0eUpzU2NvcGUuanNwP3VzZXJpbnB1dD0yNDc3NSUzYmFsZXJ0KDEpJTJmJTJmMjc4cTYzYWZiIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMTktSnMyUHJvcGVydHlKc1Njb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTBFMjMxNDU4MDVGREQyQzhENTY2MThFRkM2MzdFMUFDDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NzANCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxOSAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGphdmFzY3JpcHQgY29kZSB3aXRoaW4gYSBwcm9wZXJ0eSAoTm8gU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9ImZyYW1lMiIgaWQ9ImZyYW1lMiIgc3JjPSJqYXZhc2NyaXB0OnZhciBvcmRlcklkPTI0Nzc1O2FsZXJ0KDEpLy8yNzhxNjNhZmI7IGFsZXJ0KCdPcmRlciBOdW1iZXIgJyArIG9yZGVySWQgKycgV2FzIEFwcHJvdmVkJyk7Ij4gCgo8L2ZyYW1lc2V0Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4315390265190494208</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case20-Vbs2PropertyVbsScopeDoubleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case20-Vbs2PropertyVbsScopeDoubleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>81187"&amp;msgbox(1)&amp;"381</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary VBScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMjAtVmJzMlByb3BlcnR5VmJzU2NvcGVEb3VibGVRdW90ZURlbGltaXRlci5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE5DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyMC1WYnMyUHJvcGVydHlWYnNTY29wZURvdWJsZVF1b3RlRGVsaW1pdGVyLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTBFMjMxNDU4MDVGREQyQzhENTY2MThFRkM2MzdFMUFDDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdXNlcmlucHV0PTgxMTg3JTIyJTI2bXNnYm94KDEpJTI2JTIyMzgx]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyMCAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBWQlNjcmlwdCBjb2RlIHdpdGhpbiBhIHByb3BlcnR5IChEb3VibGUgUXVvdGUgU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9J2ZyYW1lMicgaWQ9J2ZyYW1lMicgc3JjPSdWQlNjcmlwdDogCkRvY3VtZW50LldyaXRlICgiV2VsY29tZSBNci4gODExODciJm1zZ2JveCgxKSYiMzgxIikKJz4gCgo8L2ZyYW1lc2V0Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>391510857386002432</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case21-Vbs2PropertyVbsScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case21-Vbs2PropertyVbsScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>90413&amp;msgbox(1)&amp;364</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary VBScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMjEtVmJzMlByb3BlcnR5VmJzU2NvcGUuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxOQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMjEtVmJzMlByb3BlcnR5VmJzU2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VyaW5wdXQ9OTA0MTMlMjZtc2dib3goMSklMjYzNjQ=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDENCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyMSAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBWQlNjcmlwdCBjb2RlIHdpdGhpbiBhIHByb3BlcnR5IChTaW5nbGUgUXVvdGUgU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9J2ZyYW1lMicgaWQ9J2ZyYW1lMicgc3JjPSdWQlNjcmlwdDogCkRvY3VtZW50LldyaXRlICgiV2VsY29tZSBNci4gIiAmIDkwNDEzJm1zZ2JveCgxKSYzNjQpCic+IAoKPC9mcmFtZXNldD4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6004655258117567488</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case22-Js2ScriptTagDoubleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case22-Js2ScriptTagDoubleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in double quotation marks. The payload <b>43385";alert(1)//801t5opuy</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyMi1KczJTY3JpcHRUYWdEb3VibGVRdW90ZURlbGltaXRlci5qc3A/dXNlcmlucHV0PXRlc3R2YWx1ZTQzMzg1JTIyJTNiYWxlcnQoMSklMmYlMmY4MDF0NW9wdXkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyMi1KczJTY3JpcHRUYWdEb3VibGVRdW90ZURlbGltaXRlci5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTANCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyMiAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyAoSmF2YXNjcmlwdCwgRG91YmxlIFF1b3RlIFN0cmluZyBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnPgp2YXIgY3VzdG9tZXJOYW1lPSJ0ZXN0dmFsdWU0MzM4NSI7YWxlcnQoMSkvLzgwMXQ1b3B1eSI7CiBhbGVydCgiV2VsY29tZSBNci4gIiArIGN1c3RvbWVyTmFtZSk7Cjwvc2NyaXB0PiAKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8860766008673952768</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case23-Js2ScriptTagSingleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case23-Js2ScriptTagSingleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in single quotation marks. The payload <b>99066';alert(1)//701jrot1g</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyMy1KczJTY3JpcHRUYWdTaW5nbGVRdW90ZURlbGltaXRlci5qc3A/dXNlcmlucHV0PXRlc3R2YWx1ZTk5MDY2JyUzYmFsZXJ0KDEpJTJmJTJmNzAxanJvdDFnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMjMtSnMyU2NyaXB0VGFnU2luZ2xlUXVvdGVEZWxpbWl0ZXIuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTANCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyMyAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyAoSmF2YXNjcmlwdCwgU2luZ2xlIFF1b3RlIFN0cmluZyBEZWxpbWl0ZXIpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnPgp2YXIgY3VzdG9tZXJOYW1lPSd0ZXN0dmFsdWU5OTA2Nic7YWxlcnQoMSkvLzcwMWpyb3QxZyc7CiBhbGVydCgnV2VsY29tZSBNci4gJyArIGN1c3RvbWVyTmFtZSk7Cjwvc2NyaXB0PiAKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3891876004678301696</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case24-Js2ScriptTag.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case24-Js2ScriptTag.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript expression which is not encapsulated in any quotation marks. The payload <b>57773;alert(1)//829gvpt8z</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyNC1KczJTY3JpcHRUYWcuanNwP3VzZXJpbnB1dD10ZXN0dmFsdWU1Nzc3MyUzYmFsZXJ0KDEpJTJmJTJmODI5Z3ZwdDh6IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMjQtSnMyU2NyaXB0VGFnLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTBFMjMxNDU4MDVGREQyQzhENTY2MThFRkM2MzdFMUFDDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyNCAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyAoSmF2YXNjcmlwdCwgTm8gU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKPHNjcmlwdCBsYW5ndWFnZT0namF2YXNjcmlwdCc+CnZhciBvcmRlcklkID0gdGVzdHZhbHVlNTc3NzM7YWxlcnQoMSkvLzgyOWd2cHQ4ejsKIGFsZXJ0KCdPcmRlciBOdW1iZXIgJyArIG9yZGVySWQgKyAnIFdhcyBBcHByb3ZlZCcpOwo8L3NjcmlwdD4gCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6765777679025954816</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case25-Vbs2ScriptTagDoubleQuoteDelimiter.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case25-Vbs2ScriptTagDoubleQuoteDelimiter.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in double quotation marks. The payload <b>28148";alert(1)//763duwobx</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyNS1WYnMyU2NyaXB0VGFnRG91YmxlUXVvdGVEZWxpbWl0ZXIuanNwP3VzZXJpbnB1dD10ZXN0dmFsdWUyODE0OCUyMiUzYmFsZXJ0KDEpJTJmJTJmNzYzZHV3b2J4IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMjUtVmJzMlNjcmlwdFRhZ0RvdWJsZVF1b3RlRGVsaW1pdGVyLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTBFMjMxNDU4MDVGREQyQzhENTY2MThFRkM2MzdFMUFDDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyNSAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhIHNjcmlwdCB0YWcgKFZCU2NyaXB0LCBEb3VibGUgUXVvdGUgU3RyaW5nIERlbGltaXRlcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKPHNjcmlwdCBsYW5ndWFnZT0nVkJTY3JpcHQnPgpEaW0gY3VzdG9tZXJOYW1lCmN1c3RvbWVyTmFtZSA9ICJ0ZXN0dmFsdWUyODE0OCI7YWxlcnQoMSkvLzc2M2R1d29ieCIKRG9jdW1lbnQuV3JpdGUgKCJXZWxjb21lICIgJiBjdXN0b21lck5hbWUpCjwvc2NyaXB0PiAKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8551108327148056576</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case26-Vbs2ScriptTag.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case26-Vbs2ScriptTag.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript expression which is not encapsulated in any quotation marks. The payload <b>88093;alert(1)//136sw5648</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyNi1WYnMyU2NyaXB0VGFnLmpzcD91c2VyaW5wdXQ9dGVzdHZhbHVlODgwOTMlM2JhbGVydCgxKSUyZiUyZjEzNnN3NTY0OCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QvQ2FzZTI2LVZiczJTY3JpcHRUYWcuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTcNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyNiAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhIHNjcmlwdCB0YWcgKFZCU2NyaXB0LCBObyBTdHJpbmcgRGVsaW1pdGVyKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0IGxhbmd1YWdlPSdWQlNjcmlwdCc+CkRpbSBvcmRlcklkCm9yZGVySWQgPSB0ZXN0dmFsdWU4ODA5MzthbGVydCgxKS8vMTM2c3c1NjQ4CkRvY3VtZW50LldyaXRlICgiT3JkZXIgTnVtYmVyICIgJiBvcmRlcklkICYgIiBXYXMgQXBwcm92ZWQiKQo8L3NjcmlwdD4gCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5483506635067827200</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case27-Js2ScriptTagOLCommentScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case27-Js2ScriptTagOLCommentScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript rest-of-line comment. The payload <b>28807[0x0a]alert(1)//829p9ruqk</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyNy1KczJTY3JpcHRUYWdPTENvbW1lbnRTY29wZS5qc3A/dXNlcmlucHV0PXRlc3R2YWx1ZTI4ODA3JTBhYWxlcnQoMSklMmYlMmY4MjlwOXJ1cWsgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyNy1KczJTY3JpcHRUYWdPTENvbW1lbnRTY29wZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NDkNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyNyAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyBzaW5nbGUgbGluZSBjb21tZW50PC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnPgovL3ZhciBvcmRlcklkID0gdGVzdHZhbHVlMjg4MDcKYWxlcnQoMSkvLzgyOXA5cnVxazsKIGFsZXJ0KCdPcmRlciBBcHByb3ZlZCcpOwo8L3NjcmlwdD4gCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7929528654051946496</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case28-Js2ScriptTagMLCommentScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case28-Js2ScriptTagMLCommentScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript inline comment. The payload <b>68257*/alert(1)//381cb8h6w</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyOC1KczJTY3JpcHRUYWdNTENvbW1lbnRTY29wZS5qc3A/dXNlcmlucHV0PXRlc3R2YWx1ZTY4MjU3KiUyZmFsZXJ0KDEpJTJmJTJmMzgxY2I4aDZ3IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMjgtSnMyU2NyaXB0VGFnTUxDb21tZW50U2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyOCAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHRhZyBtdWx0aWxpbmUgY29tbWVudDwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0IGxhbmd1YWdlPSdqYXZhc2NyaXB0Jz4KLyogdmFyIG9yZGVySWQgPSB0ZXN0dmFsdWU2ODI1NyovYWxlcnQoMSkvLzM4MWNiOGg2dzsgKi8KIGFsZXJ0KCdPcmRlciBBcHByb3ZlZCcpOwo8L3NjcmlwdD4gCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3623458411963643904</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case29-Vbs2ScriptTagOLCommentScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case29-Vbs2ScriptTagOLCommentScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript expression which is not encapsulated in any quotation marks. The payload <b>30884;alert(1)//344nb9ico</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UyOS1WYnMyU2NyaXB0VGFnT0xDb21tZW50U2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0dmFsdWUzMDg4NCUzYmFsZXJ0KDEpJTJmJTJmMzQ0bmI5aWNvIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMjktVmJzMlNjcmlwdFRhZ09MQ29tbWVudFNjb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTBFMjMxNDU4MDVGREQyQzhENTY2MThFRkM2MzdFMUFDDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NjINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyOSAtIFJYU1MgdmlhIFZCU2NyaXB0IGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhIHNjcmlwdCB0YWcgc2luZ2xlIGxpbmUgY29tbWVudDwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0IGxhbmd1YWdlPSdWQlNjcmlwdCc+CkRpbSBvcmRlcklkClJlbSBvcmRlcklkID0gdGVzdHZhbHVlMzA4ODQ7YWxlcnQoMSkvLzM0NG5iOWljbwpEb2N1bWVudC5Xcml0ZSAoIk9yZGVyIEFwcHJvdmVkIikKPC9zY3JpcHQ+IAoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8610388828172859392</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case30-Tag2HtmlPageScopeMultipleVulnerabilities.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case30-Tag2HtmlPageScopeMultipleVulnerabilities.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>fylep&lt;script&gt;alert(1)&lt;/script&gt;ql56xu6ts0a</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UzMC1UYWcySHRtbFBhZ2VTY29wZU11bHRpcGxlVnVsbmVyYWJpbGl0aWVzLmpzcD91c2VyaW5wdXQ9dGVzdHZhbHVlZnlsZXAlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZXFsNTZ4dTZ0czBhJnVzZXJpbnB1dDI9dGVzdHZhbHVlIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMzAtVGFnMkh0bWxQYWdlU2NvcGVNdWx0aXBsZVZ1bG5lcmFiaWxpdGllcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NDUNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMwIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIHBhZ2UgKE11bHRpcGxlIFJYU1MgVnVsbmVyYWJpbGl0aWVzKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgMXN0IHJlZmxlY3RlZCB2YWx1ZTogdGVzdHZhbHVlZnlsZXA8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+cWw1Nnh1NnRzMGEKVGhlIDJuZCByZWZsZWN0ZWQgdmFsdWU6IHRlc3R2YWx1ZQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8573937513955507200</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case30-Tag2HtmlPageScopeMultipleVulnerabilities.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case30-Tag2HtmlPageScopeMultipleVulnerabilities.jsp [userinput2 parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput2</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>qc6ru&lt;script&gt;alert(1)&lt;/script&gt;boqkmicz9xu</b> was submitted in the userinput2 parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UzMC1UYWcySHRtbFBhZ2VTY29wZU11bHRpcGxlVnVsbmVyYWJpbGl0aWVzLmpzcD91c2VyaW5wdXQ9dGVzdHZhbHVlJnVzZXJpbnB1dDI9dGVzdHZhbHVlcWM2cnUlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZWJvcWttaWN6OXh1IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwczovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMzAtVGFnMkh0bWxQYWdlU2NvcGVNdWx0aXBsZVZ1bG5lcmFiaWxpdGllcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NDUNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMwIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIHBhZ2UgKE11bHRpcGxlIFJYU1MgVnVsbmVyYWJpbGl0aWVzKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgMXN0IHJlZmxlY3RlZCB2YWx1ZTogdGVzdHZhbHVlClRoZSAybmQgcmVmbGVjdGVkIHZhbHVlOiB0ZXN0dmFsdWVxYzZydTxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5ib3FrbWljejl4dQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9143008295878097920</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case32-Tag2HtmlPageScopeValidViewstateRequired.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case32-Tag2HtmlPageScopeValidViewstateRequired.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>ck27d&lt;script&gt;alert(1)&lt;/script&gt;a0hqlgth35e</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UzMi1UYWcySHRtbFBhZ2VTY29wZVZhbGlkVmlld3N0YXRlUmVxdWlyZWQuanNwP19fVklFV1NUQVRFPSUyRndFUER3VUVOVE00TVdSa2hzakYlMkI2MmdXbmhZVWNFeXVSd1RIeEdEVnpBJTNEJnVzZXJpbnB1dD10ZXN0dmFsdWVjazI3ZCUzY3NjcmlwdCUzZWFsZXJ0KDEpJTNjJTJmc2NyaXB0JTNlYTBocWxndGgzNWUgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwczovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NUL0Nhc2UzMi1UYWcySHRtbFBhZ2VTY29wZVZhbGlkVmlld3N0YXRlUmVxdWlyZWQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9MEUyMzE0NTgwNUZERDJDOEQ1NjYxOEVGQzYzN0UxQUMNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTUNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMyIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIHBhZ2UgKFZpZXdzdGF0ZSBSZXF1aXJlZCk8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIHJlZmxlY3RlZCB2YWx1ZTogdGVzdHZhbHVlY2syN2Q8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+YTBocWxndGgzNWUKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5438365961164468224</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case01-Tag2HtmlAttributeNameScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case01-Tag2HtmlAttributeNameScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the name of an HTML tag attribute. The payload <b>ttk3d&gt;&lt;script&gt;alert(1)&lt;/script&gt;dge5j</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UwMS1UYWcySHRtbEF0dHJpYnV0ZU5hbWVTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZXR0azNkJTNlJTNjc2NyaXB0JTNlYWxlcnQoMSklM2MlMmZzY3JpcHQlM2VkZ2U1aiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtTmV3LUNvbnRleHRzLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MDgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGF0dHJpYnV0ZSBuYW1lPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxpbWcgc3JjPSZxdW90O2EuZ2lmJnF1b3Q7IHRleHR2YWx1ZXR0azNkPjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5kZ2U1aiBvbmVycm9yPSZxdW90OyZxdW90Oz4KCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>59185217554076672</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case02-Tag2HtmlEventAttributeValueQuotelessScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case02-Tag2HtmlEventAttributeValueQuotelessScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is not encapsulated in any quotation marks. The payload <b>37392;alert(1)//853</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UwMi1UYWcySHRtbEV2ZW50QXR0cmlidXRlVmFsdWVRdW90ZWxlc3NTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZTM3MzkyJTNiYWxlcnQoMSklMmYlMmY4NTMgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODMNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGV2ZW50IGF0dHJpYnV0ZSBxdW90ZWxlc3MgdmFsdWU8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKPGltZyBzcmM9YS5naWYgb25lcnJvcj10ZXh0dmFsdWUzNzM5MjthbGVydCgxKS8vODUzPgoKCjwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7421597703165613056</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case03-Tag2HtmlURLAttributeValueQuotelessScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case03-Tag2HtmlURLAttributeValueQuotelessScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of a tag attribute which can contain JavaScript. The payload <b>javascript:alert(1)//ia4okf7i</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UwMy1UYWcySHRtbFVSTEF0dHJpYnV0ZVZhbHVlUXVvdGVsZXNzU2NvcGUuanNwP3VzZXJpbnB1dD1qYXZhc2NyaXB0JTNhYWxlcnQoMSklMmYlMmZpYTRva2Y3aSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtTmV3LUNvbnRleHRzLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAzIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIFVSTCBhdHRyaWJ1dGUgcXVvdGVsZXNzIHZhbHVlPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxhIGhyZWY9amF2YXNjcmlwdDphbGVydCgxKS8vaWE0b2tmN2k+IENsaWNrIG1lISA8L2E+CgoKPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4837100998304989184</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case04-Tag2HtmlAttributeValueSingleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case04-Tag2HtmlAttributeValueSingleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>loofo'&gt;&lt;script&gt;alert(1)&lt;/script&gt;kzx51</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UwNC1UYWcySHRtbEF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZWxvb2ZvJyUzZSUzY3NjcmlwdCUzZWFsZXJ0KDEpJTNjJTJmc2NyaXB0JTNla3p4NTEgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTYNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA0IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGF0dHJpYnV0ZSBzaW5nbGVxdW90ZSB2YWx1ZTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0IGlkPSd0ZXh0dmFsdWVsb29mbyc+PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pmt6eDUxJz48L3NjcmlwdD4KCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6399712370494382080</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case05-Tag2HtmlAttributeValueSingleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case05-Tag2HtmlAttributeValueSingleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>sf7ef'onload='alert(1)'a7riy</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UwNS1UYWcySHRtbEF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZXNmN2VmJ29ubG9hZCUzZCdhbGVydCgxKSdhN3JpeSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtTmV3LUNvbnRleHRzLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA1IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGF0dHJpYnV0ZSBzaW5nbGVxdW90ZSB2YWx1ZTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8aW1nIGlkPSd0ZXh0dmFsdWVzZjdlZidvbmxvYWQ9J2FsZXJ0KDEpJ2E3cml5JyBzcmM9ICdhLmdpZic+CgoKPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6351734400221233152</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case06-Tag2HtmlMetaAttributeValueDoubleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case06-Tag2HtmlMetaAttributeValueDoubleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>qbokv"&gt;&lt;script&gt;alert(1)&lt;/script&gt;w38np</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UwNi1UYWcySHRtbE1ldGFBdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlU2NvcGUuanNwP3VzZXJpbnB1dD10ZXh0dmFsdWVxYm9rdiUyMiUzZSUzY3NjcmlwdCUzZWFsZXJ0KDEpJTNjJTJmc2NyaXB0JTNldzM4bnAgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDEyDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0idGV4dHZhbHVlcWJva3YiPjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD53MzhucCI+Cgo8dGl0bGU+Q2FzZSA2IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIG1ldGEgYXR0cmlidXRlIGRvdWJsZXF1b3RlIHZhbHVlPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgoKPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5493567302508271616</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case07-Tag2HtmlMetaAttributeValueSingleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case07-Tag2HtmlMetaAttributeValueSingleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>k36ld'&gt;&lt;script&gt;alert(1)&lt;/script&gt;bgxxa</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UwNy1UYWcySHRtbE1ldGFBdHRyaWJ1dGVWYWx1ZVNpbmdsZVF1b3RlU2NvcGUuanNwP3VzZXJpbnB1dD10ZXh0dmFsdWVrMzZsZCclM2UlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZWJneHhhIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDEyDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8bWV0YSBuYW1lPSd2aWV3cG9ydCcgY29udGVudD0ndGV4dHZhbHVlazM2bGQnPjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5iZ3h4YSc+Cgo8dGl0bGU+Q2FzZSA3IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIG1ldGEgYXR0cmlidXRlIHNpbmdsZXF1b3RlIHZhbHVlPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgoKPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5573846279190179840</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case08-Tag2HtmlMetaAttributeValueQuotelessScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case08-Tag2HtmlMetaAttributeValueQuotelessScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is not encapsulated in any quotation marks. The payload <b>wfyyq&gt;&lt;script&gt;alert(1)&lt;/script&gt;mixyd</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UwOC1UYWcySHRtbE1ldGFBdHRyaWJ1dGVWYWx1ZVF1b3RlbGVzc1Njb3BlLmpzcD91c2VyaW5wdXQ9d2Z5eXElM2UlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZW1peHlkIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogMzk2DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8bWV0YSBuYW1lPXZpZXdwb3J0IGNvbnRlbnQ9d2Z5eXE+PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pm1peHlkPgoKPHRpdGxlPkNhc2UgOCAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYW4gSFRNTCBtZXRhIGF0dHJpYnV0ZSBxdW90ZWxlc3MgdmFsdWU8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6758481381221058560</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case09-Tag2HtmlJavaScriptCodeScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case09-Tag2HtmlJavaScriptCodeScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript expression which is not encapsulated in any quotation marks. The payload <b>82032;alert(1)//466</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UwOS1UYWcySHRtbEphdmFTY3JpcHRDb2RlU2NvcGUuanNwP3VzZXJpbnB1dD10ZXh0dmFsdWU4MjAzMiUzYmFsZXJ0KDEpJTJmJTJmNDY2IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDY0DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA5IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhIEphdmFTY3JpcHQgY29kZTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKCQogICAgPHNjcmlwdD4KCWZ1bmN0aW9uIG15RnVuY3Rpb24ocDEpIHsKICAJCXJldHVybiBwMS50b1N0cmluZygpOwoJfQoJdmFyIGlucHV0ID0gbXlGdW5jdGlvbih0ZXh0dmFsdWU4MjAzMjthbGVydCgxKS8vNDY2KTsKCXZhciBmb28gPSBpbnB1dDsKCTwvc2NyaXB0PgoKCjwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3313441167396419584</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case10-Tag2HtmlJavaScriptCodeDoubleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case10-Tag2HtmlJavaScriptCodeDoubleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in double quotation marks. The payload <b>60279";alert(1)//888</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UxMC1UYWcySHRtbEphdmFTY3JpcHRDb2RlRG91YmxlUXVvdGVTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZTYwMjc5JTIyJTNiYWxlcnQoMSklMmYlMmY4ODggSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDY4DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMCAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYSBKYXZhU2NyaXB0IGNvZGU8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCgkKICAgIDxzY3JpcHQ+CglmdW5jdGlvbiBteUZ1bmN0aW9uKHAxKSB7CiAgCQlyZXR1cm4gcDEudG9TdHJpbmcoKTsKCX0KCXZhciBpbnB1dCA9IG15RnVuY3Rpb24oInRleHR2YWx1ZTYwMjc5IjthbGVydCgxKS8vODg4Iik7Cgl2YXIgZm9vID0gaW5wdXQ7Cgk8L3NjcmlwdD4KCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4336494565040148480</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case11-Tag2HtmlJavaScriptCodeSingleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case11-Tag2HtmlJavaScriptCodeSingleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in single quotation marks. The payload <b>66229';alert(1)//903</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UxMS1UYWcySHRtbEphdmFTY3JpcHRDb2RlU2luZ2xlUXVvdGVTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZTY2MjI5JyUzYmFsZXJ0KDEpJTJmJTJmOTAzIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDY4DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMSAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYSBKYXZhU2NyaXB0IGNvZGU8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCgkKICAgIDxzY3JpcHQ+CglmdW5jdGlvbiBteUZ1bmN0aW9uKHAxKSB7CiAgCQlyZXR1cm4gcDEudG9TdHJpbmcoKTsKCX0KCXZhciBpbnB1dCA9IG15RnVuY3Rpb24oJ3RleHR2YWx1ZTY2MjI5JzthbGVydCgxKS8vOTAzJyk7Cgl2YXIgZm9vID0gaW5wdXQ7Cgk8L3NjcmlwdD4KCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6970574779803548672</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case12-Tag2CSSQuotedStringScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case12-Tag2CSSQuotedStringScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>jfhlj&lt;script&gt;alert(1)&lt;/script&gt;tpsfq</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UxMi1UYWcyQ1NTUXVvdGVkU3RyaW5nU2NvcGUuanNwP3VzZXJpbnB1dD10ZXh0dmFsdWVqZmhsaiUzY3NjcmlwdCUzZWFsZXJ0KDEpJTNjJTJmc2NyaXB0JTNldHBzZnEgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDQ0DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMiAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYSBDU1MgcXVvdGVkIHN0cmluZzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKCTxzdHlsZT4KCWE6OmFmdGVyIHsKICAJCWNvbnRlbnQ6ICIgKHRleHR2YWx1ZWpmaGxqPHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PnRwc2ZxKSAiOwoJfQoJPC9zdHlsZT4KCQoJPGEgaHJlZj0iIyI+RW1wdHkgTGluayA8L2E+CQoKCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8234093193301397504</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case13-Tag2CSSCommentScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-GET/Case13-Tag2CSSCommentScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>kqv2e&lt;script&gt;alert(1)&lt;/script&gt;hkesc</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL0Nhc2UxMy1UYWcyQ1NTQ29tbWVudFNjb3BlLmpzcD91c2VyaW5wdXQ9dGV4dHZhbHVla3F2MmUlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZWhrZXNjIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtR0VUL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDkxDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMyAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYSBDU1MgcXVvdGVkIHN0cmluZzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKCTxzdHlsZT4KCS8qIHRoaXMgYXBwZW5kcyBfbGluayBhZnRlciBhbnkgPGE+IHRhZy4gdGV4dHZhbHVla3F2MmU8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+aGtlc2MgKi8KCWE6OmFmdGVyIHsKICAJCWNvbnRlbnQ6ICJfbGluayI7Cgl9Cgk8L3N0eWxlPgoJCgk8YSBocmVmPSIjIj5FbXB0eSBMaW5rIDwvYT4JCgoKCjwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1065225740710393856</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case01-Tag2HtmlAttributeNameScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case01-Tag2HtmlAttributeNameScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the name of an HTML tag attribute. The payload <b>fouha&gt;&lt;script&gt;alert(1)&lt;/script&gt;li1mwbj5klw</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDEtVGFnMkh0bWxBdHRyaWJ1dGVOYW1lU2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0aW5wdXRmb3VoYSUzZSUzY3NjcmlwdCUzZWFsZXJ0KDEpJTNjJTJmc2NyaXB0JTNlbGkxbXdiajVrbHcgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtTmV3LUNvbnRleHRzLVBPU1QvQ2FzZTAxLVRhZzJIdG1sQXR0cmlidXRlTmFtZVNjb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTQNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGF0dHJpYnV0ZSBuYW1lPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxpbWcgc3JjPSZxdW90O2EuZ2lmJnF1b3Q7IHRlc3RpbnB1dGZvdWhhPjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5saTFtd2JqNWtsdyBvbmVycm9yPSZxdW90OyZxdW90Oz4KCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5751281010621927424</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case02-Tag2HtmlEventAttributeValueQuotelessScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case02-Tag2HtmlEventAttributeValueQuotelessScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is an event handler and is not encapsulated in any quotation marks. The payload <b>53083;alert(1)//805p8gym8</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDItVGFnMkh0bWxFdmVudEF0dHJpYnV0ZVZhbHVlUXVvdGVsZXNzU2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0aW5wdXQ1MzA4MyUzYmFsZXJ0KDEpJTJmJTJmODA1cDhneW04IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1QT1NUL0Nhc2UwMi1UYWcySHRtbEV2ZW50QXR0cmlidXRlVmFsdWVRdW90ZWxlc3NTY29wZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODkNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGV2ZW50IGF0dHJpYnV0ZSBxdW90ZWxlc3MgdmFsdWU8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKPGltZyBzcmM9YS5naWYgb25lcnJvcj10ZXN0aW5wdXQ1MzA4MzthbGVydCgxKS8vODA1cDhneW04PgoKCjwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3664071171095287808</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case03-Tag2HtmlURLAttributeValueQuotelessScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case03-Tag2HtmlURLAttributeValueQuotelessScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of a tag attribute which can contain JavaScript. The payload <b>javascript:alert(1)//tpm8tqbpsmgn36</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDMtVGFnMkh0bWxVUkxBdHRyaWJ1dGVWYWx1ZVF1b3RlbGVzc1Njb3BlLmpzcD91c2VyaW5wdXQ9amF2YXNjcmlwdCUzYWFsZXJ0KDEpJTJmJTJmdHBtOHRxYnBzbWduMzYgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtTmV3LUNvbnRleHRzLVBPU1QvQ2FzZTAzLVRhZzJIdG1sVVJMQXR0cmlidXRlVmFsdWVRdW90ZWxlc3NTY29wZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAzIC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIFVSTCBhdHRyaWJ1dGUgcXVvdGVsZXNzIHZhbHVlPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjxhIGhyZWY9amF2YXNjcmlwdDphbGVydCgxKS8vdHBtOHRxYnBzbWduMzY+IENsaWNrIG1lISA8L2E+CgoKPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7575170478491508736</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case04-Tag2HtmlAttributeValueSingleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case04-Tag2HtmlAttributeValueSingleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>dzb8y'&gt;&lt;script&gt;alert(1)&lt;/script&gt;ff4zwsfc6lt</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDQtVGFnMkh0bWxBdHRyaWJ1dGVWYWx1ZVNpbmdsZVF1b3RlU2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0aW5wdXRkemI4eSclM2UlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZWZmNHp3c2ZjNmx0IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1QT1NUL0Nhc2UwNC1UYWcySHRtbEF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVTY29wZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MDINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA0IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGF0dHJpYnV0ZSBzaW5nbGVxdW90ZSB2YWx1ZTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0IGlkPSd0ZXN0aW5wdXRkemI4eSc+PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PmZmNHp3c2ZjNmx0Jz48L3NjcmlwdD4KCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2932035834752589824</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case05-Tag2HtmlAttributeValueSingleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case05-Tag2HtmlAttributeValueSingleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>smb3m'onload='alert(1)'pibr1n69g2n</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. The proof-of-concept attack demonstrated uses an event handler to introduce arbitrary JavaScript into the document.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDUtVGFnMkh0bWxBdHRyaWJ1dGVWYWx1ZVNpbmdsZVF1b3RlU2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0aW5wdXRzbWIzbSdvbmxvYWQlM2QnYWxlcnQoMSkncGlicjFuNjlnMm4gSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtTmV3LUNvbnRleHRzLVBPU1QvQ2FzZTA1LVRhZzJIdG1sQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZVNjb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTQNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA1IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGF0dHJpYnV0ZSBzaW5nbGVxdW90ZSB2YWx1ZTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8aW1nIGlkPSd0ZXN0aW5wdXRzbWIzbSdvbmxvYWQ9J2FsZXJ0KDEpJ3BpYnIxbjY5ZzJuJyBzcmM9ICdhLmdpZic+CgoKPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3831720010766605312</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case06-Tag2HtmlMetaAttributeValueDoubleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case06-Tag2HtmlMetaAttributeValueDoubleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>orlkr"&gt;&lt;script&gt;alert(1)&lt;/script&gt;ut2eua5fw5v</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDYtVGFnMkh0bWxNZXRhQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZVNjb3BlLmpzcD91c2VyaW5wdXQ9dGVzdGlucHV0b3Jsa3IlMjIlM2UlM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZXV0MmV1YTVmdzV2IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1QT1NUL0Nhc2UwNi1UYWcySHRtbE1ldGFBdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlU2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDE4DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0idGVzdGlucHV0b3Jsa3IiPjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD51dDJldWE1Znc1diI+Cgo8dGl0bGU+Q2FzZSA2IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIG1ldGEgYXR0cmlidXRlIGRvdWJsZXF1b3RlIHZhbHVlPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgoKPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6740298673597693952</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case07-Tag2HtmlMetaAttributeValueSingleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case07-Tag2HtmlMetaAttributeValueSingleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in single quotation marks. The payload <b>of5tx'&gt;&lt;script&gt;alert(1)&lt;/script&gt;p7ci1ykqqef</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDctVGFnMkh0bWxNZXRhQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZVNjb3BlLmpzcD91c2VyaW5wdXQ9dGVzdGlucHV0b2Y1dHgnJTNlJTNjc2NyaXB0JTNlYWxlcnQoMSklM2MlMmZzY3JpcHQlM2VwN2NpMXlrcXFlZiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDctVGFnMkh0bWxNZXRhQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZVNjb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDE4DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8bWV0YSBuYW1lPSd2aWV3cG9ydCcgY29udGVudD0ndGVzdGlucHV0b2Y1dHgnPjxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD5wN2NpMXlrcXFlZic+Cgo8dGl0bGU+Q2FzZSA3IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIG1ldGEgYXR0cmlidXRlIHNpbmdsZXF1b3RlIHZhbHVlPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgoKPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9217553339655433216</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case08-Tag2HtmlMetaAttributeValueQuotelessScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case08-Tag2HtmlMetaAttributeValueQuotelessScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the value of an HTML tag attribute which is not encapsulated in any quotation marks. The payload <b>pcfzr&gt;&lt;script&gt;alert(1)&lt;/script&gt;o8k29xi2iov</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDgtVGFnMkh0bWxNZXRhQXR0cmlidXRlVmFsdWVRdW90ZWxlc3NTY29wZS5qc3A/dXNlcmlucHV0PXBjZnpyJTNlJTNjc2NyaXB0JTNlYWxlcnQoMSklM2MlMmZzY3JpcHQlM2VvOGsyOXhpMmlvdiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDgtVGFnMkh0bWxNZXRhQXR0cmlidXRlVmFsdWVRdW90ZWxlc3NTY29wZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDAyDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8bWV0YSBuYW1lPXZpZXdwb3J0IGNvbnRlbnQ9cGNmenI+PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pm84azI5eGkyaW92PgoKPHRpdGxlPkNhc2UgOCAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYW4gSFRNTCBtZXRhIGF0dHJpYnV0ZSBxdW90ZWxlc3MgdmFsdWU8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4809599423168970752</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case09-Tag2HtmlJavaScriptCodeScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case09-Tag2HtmlJavaScriptCodeScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript expression which is not encapsulated in any quotation marks. The payload <b>76216;alert(1)//801vbxwgk</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDktVGFnMkh0bWxKYXZhU2NyaXB0Q29kZVNjb3BlLmpzcD91c2VyaW5wdXQ9dGVzdGlucHV0NzYyMTYlM2JhbGVydCgxKSUyZiUyZjgwMXZieHdnayBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMDktVGFnMkh0bWxKYXZhU2NyaXB0Q29kZVNjb3BlLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDcwDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA5IC0gUlhTUyB2aWEgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhIEphdmFTY3JpcHQgY29kZTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKCQogICAgPHNjcmlwdD4KCWZ1bmN0aW9uIG15RnVuY3Rpb24ocDEpIHsKICAJCXJldHVybiBwMS50b1N0cmluZygpOwoJfQoJdmFyIGlucHV0ID0gbXlGdW5jdGlvbih0ZXN0aW5wdXQ3NjIxNjthbGVydCgxKS8vODAxdmJ4d2drKTsKCXZhciBmb28gPSBpbnB1dDsKCTwvc2NyaXB0PgoKCjwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>162144308769924096</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case10-Tag2HtmlJavaScriptCodeDoubleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case10-Tag2HtmlJavaScriptCodeDoubleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in double quotation marks. The payload <b>70906";alert(1)//953ib2i4d</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMTAtVGFnMkh0bWxKYXZhU2NyaXB0Q29kZURvdWJsZVF1b3RlU2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0aW5wdXQ3MDkwNiUyMiUzYmFsZXJ0KDEpJTJmJTJmOTUzaWIyaTRkIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1QT1NUL0Nhc2UxMC1UYWcySHRtbEphdmFTY3JpcHRDb2RlRG91YmxlUXVvdGVTY29wZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDc0DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMCAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYSBKYXZhU2NyaXB0IGNvZGU8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCgkKICAgIDxzY3JpcHQ+CglmdW5jdGlvbiBteUZ1bmN0aW9uKHAxKSB7CiAgCQlyZXR1cm4gcDEudG9TdHJpbmcoKTsKCX0KCXZhciBpbnB1dCA9IG15RnVuY3Rpb24oInRlc3RpbnB1dDcwOTA2IjthbGVydCgxKS8vOTUzaWIyaTRkIik7Cgl2YXIgZm9vID0gaW5wdXQ7Cgk8L3NjcmlwdD4KCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7974055584671312896</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case11-Tag2HtmlJavaScriptCodeSingleQuoteScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case11-Tag2HtmlJavaScriptCodeSingleQuoteScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into a JavaScript string which is encapsulated in single quotation marks. The payload <b>62394';alert(1)//604iwu4hs</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMTEtVGFnMkh0bWxKYXZhU2NyaXB0Q29kZVNpbmdsZVF1b3RlU2NvcGUuanNwP3VzZXJpbnB1dD10ZXN0aW5wdXQ2MjM5NCclM2JhbGVydCgxKSUyZiUyZjYwNGl3dTRocyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMTEtVGFnMkh0bWxKYXZhU2NyaXB0Q29kZVNpbmdsZVF1b3RlU2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDc0DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMSAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYSBKYXZhU2NyaXB0IGNvZGU8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCgkKICAgIDxzY3JpcHQ+CglmdW5jdGlvbiBteUZ1bmN0aW9uKHAxKSB7CiAgCQlyZXR1cm4gcDEudG9TdHJpbmcoKTsKCX0KCXZhciBpbnB1dCA9IG15RnVuY3Rpb24oJ3Rlc3RpbnB1dDYyMzk0JzthbGVydCgxKS8vNjA0aXd1NGhzJyk7Cgl2YXIgZm9vID0gaW5wdXQ7Cgk8L3NjcmlwdD4KCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4714012193945026560</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case12-Tag2CSSQuotedStringScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case12-Tag2CSSQuotedStringScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>uztw9&lt;script&gt;alert(1)&lt;/script&gt;d2kgbf7eyrn</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMTItVGFnMkNTU1F1b3RlZFN0cmluZ1Njb3BlLmpzcD91c2VyaW5wdXQ9dGVzdGlucHV0dXp0dzklM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZWQya2diZjdleXJuIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLU5ldy1Db250ZXh0cy1QT1NUL0Nhc2UxMi1UYWcyQ1NTUXVvdGVkU3RyaW5nU2NvcGUuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDUwDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMiAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYSBDU1MgcXVvdGVkIHN0cmluZzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKCTxzdHlsZT4KCWE6OmFmdGVyIHsKICAJCWNvbnRlbnQ6ICIgKHRlc3RpbnB1dHV6dHc5PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PmQya2diZjdleXJuKSAiOwoJfQoJPC9zdHlsZT4KCQoJPGEgaHJlZj0iIyI+RW1wdHkgTGluayA8L2E+CQoKCgo8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6021873138272878592</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case13-Tag2CSSCommentScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-New-Contexts-POST/Case13-Tag2CSSCommentScope.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>b5a9t&lt;script&gt;alert(1)&lt;/script&gt;iafyvmskzlj</b> was submitted in the userinput parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method, however it was possible to convert the request to use the GET method, to enable easier demonstration and delivery of the attack.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMTMtVGFnMkNTU0NvbW1lbnRTY29wZS5qc3A/dXNlcmlucHV0PXRlc3RpbnB1dGI1YTl0JTNjc2NyaXB0JTNlYWxlcnQoMSklM2MlMmZzY3JpcHQlM2VpYWZ5dm1za3psaiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1OZXctQ29udGV4dHMtUE9TVC9DYXNlMTMtVGFnMkNTU0NvbW1lbnRTY29wZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDk3DQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxMyAtIFJYU1MgdmlhIHRhZyBpbmplY3Rpb24gaW50byB0aGUgc2NvcGUgb2YgYSBDU1MgcXVvdGVkIHN0cmluZzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKCTxzdHlsZT4KCS8qIHRoaXMgYXBwZW5kcyBfbGluayBhZnRlciBhbnkgPGE+IHRhZy4gdGVzdGlucHV0YjVhOXQ8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+aWFmeXZtc2t6bGogKi8KCWE6OmFmdGVyIHsKICAJCWNvbnRlbnQ6ICJfbGluayI7Cgl9Cgk8L3N0eWxlPgoJCgk8YSBocmVmPSIjIj5FbXB0eSBMaW5rIDwvYT4JCgoKCjwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8350605712061181952</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-WebSecLab-GET/js3.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-WebSecLab-GET/js3.jsp [in parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>in</b> request parameter is copied into a JavaScript expression which is not encapsulated in any quotation marks. The payload <b>48809;alert(1)//530</b> was submitted in the in parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1XZWJTZWNMYWItR0VUL2pzMy5qc3A/aW49dGV4dHZhbHVlNDg4MDklM2JhbGVydCgxKSUyZiUyZjUzMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtV2ViU2VjTGFiLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NjkNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxIC0gUlhTUyBleHBsb2l0YWJsZSBpbmplY3Rpb24gaW50byBKUyBleGVjdXRhYmxlIGNvbnRleHQgKHVucXVvdGVkIGlucHV0KTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0PnZhciBmID0geyBkYXRlOiAnJywgd2VlazogJzEnLCBiYWQ6IHRleHR2YWx1ZTQ4ODA5O2FsZXJ0KDEpLy81MzAsIHBoYXNlOiAnMicsfTs8L3NjcmlwdD4KCgpIZWxsbyE8QlI+IApUaGlzIHRlc3QgZGVtb25zdHJhdGVzIGV4cGxvaXRhYmxlIEluamVjdGlvbiBpbnRvIEpTIGV4ZWN1dGFibGUgY29udGV4dDogZXhwbG9pdGFibGUgaW5qZWN0aW9uIGludG8gSlMgZXhlY3V0YWJsZSBjb250ZXh0ICh1bnF1b3RlZCBpbnB1dCkuCjwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4173641614653102080</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-WebSecLab-GET/js4_dq.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-WebSecLab-GET/js4_dq.jsp [in parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>in</b> request parameter is copied into a JavaScript string which is encapsulated in double quotation marks. The payload <b>53373";alert(1)//191</b> was submitted in the in parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1XZWJTZWNMYWItR0VUL2pzNF9kcS5qc3A/aW49dGV4dHZhbHVlNTMzNzMlMjIlM2JhbGVydCgxKSUyZiUyZjE5MSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtV2ViU2VjTGFiLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDgNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAyIC0gUlhTUyBleHBsb2l0YWJsZSBKYXZhc2NyaXB0IGFuZCBkb3VibGUgcXVvdGVzIGluamVjdGlvbiBpbnRvIGEgc2NyaXB0IGJsb2NrLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgo8c2NyaXB0PnZhciBmID0geyBkYXRlOiAiIiwgd2VlazogIjEiLCBiYWQ6ICJ0ZXh0dmFsdWU1MzM3MyI7YWxlcnQoMSkvLzE5MSIsIHBoYXNlOiAiMiIsfTs8L3NjcmlwdD4KCgpIZWxsbyE8QlI+IApUaGlzIHRlc3QgZGVtb25zdHJhdGVzIGV4cGxvaXRhYmxlIEluamVjdGlvbiBkdWUgdG8gdW5zYWZlIGhhbmRsaW5nIG9mIGRvdWJsZSBxdW90ZXMgaW50byBhIEphdmFzY3JpcHQgYmxvY2suCjwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8392863031387679744</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-WebSecLab-GET/js6_sq.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-WebSecLab-GET/js6_sq.jsp [in parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>in</b> request parameter is copied into a JavaScript string which is encapsulated in single quotation marks. The payload <b>56514';alert(1)//966</b> was submitted in the in parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.]]></issueDetail>
    <remediationDetail><![CDATA[Echoing user-controllable data within a script context is inherently dangerous and can make XSS attacks difficult to prevent. If at all possible, the application should avoid echoing user data within this context. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1XZWJTZWNMYWItR0VUL2pzNl9zcS5qc3A/aW49dGV4dHZhbHVlNTY1MTQnJTNiYWxlcnQoMSklMmYlMmY5NjYgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLVdlYlNlY0xhYi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NTQNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAzIC0gUlhTUyAgZXhwbG9pdGFibGUgSmF2YXNjcmlwdCBhbmQgc2luZ2xlIHF1b3RlcyBpbmplY3Rpb24gaW50byBhIHNjcmlwdCBibG9jay48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKPHNjcmlwdD52YXIgZiA9IHsgZGF0ZTogJycsIHdlZWs6ICcxJywgYmFkOiAndGV4dHZhbHVlNTY1MTQnO2FsZXJ0KDEpLy85NjYnLCBwaGFzZTogJzInLH07PC9zY3JpcHQ+CgoKSGVsbG8hPEJSPiAKVGhpcyB0ZXN0IGRlbW9uc3RyYXRlcyBleHBsb2l0YWJsZSBJbmplY3Rpb24gZHVlIHRvIHVuc2FmZSBoYW5kbGluZyBvZiBzaW5nbGUgcXVvdGVzIGluc2lkZSBvZiBhIEphdmFzY3JpcHQgYmxvY2suCjwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7836944377370137600</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET-Experimental/Case07-ScriptlessInjectionInScriptTagSrcAttribute.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET-Experimental/Case07-ScriptlessInjectionInScriptTagSrcAttribute.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the response within the hostname of a URL from which JavaScript will be loaded. The payload <b>//gcainbapik</b> was submitted in the userinput parameter. This input was echoed unmodified within the "src" attribute of a "script" tag.<br><br>This proof-of-concept attack demonstrates that it is possible to modify the URL to reference an external host and so inject arbitrary JavaScript in the response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtRXhwZXJpbWVudGFsL0Nhc2UwNy1TY3JpcHRsZXNzSW5qZWN0aW9uSW5TY3JpcHRUYWdTcmNBdHRyaWJ1dGUuanNwP3VzZXJpbnB1dD0lMmYlMmZnY2FpbmJhcGlrIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtRXhwZXJpbWVudGFsL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUJEMEZCNzcxMTJCQkExRUFGMTFGQzAzRUQ4RjNDMDc2DQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjA0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+U2NyaXB0bGVzcyBJbmplY3Rpb24gaW4gSFRNTCBTY3JpcHQgVGFnIFNyYyBBdHRyaWJ1dGUgc2NvcGUgb2YgdGhlIEhUTUwgcGFnZS48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5Pgo8IS0tCglDb250cmlidXRlZCBieSB0aGUgSXJvbldBU1AgcHJvamVjdCAoaHR0cDovL2lyb253YXNwLm9yZy8pLgoJT3JpZ2luYWwgQXV0aG9yOiBMYXZha3VtYXIgS3VwcGFuIChsYXZhQGlyb253YXNwLm9yZykuCi0tPgoKPHNjcmlwdCBzcmM9Ii8vZ2NhaW5iYXBpayIvPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8157737122660875264</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case05-Tag2Frameset.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case05-Tag2Frameset.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the response within the hostname of a URL from which JavaScript will be loaded. The payload <b>http://ruytddynmd</b> was submitted in the userinput parameter. This input was echoed unmodified within the "src" attribute of a "frame" tag.<br><br>This proof-of-concept attack demonstrates that it is possible to modify the URL to reference an external host and so inject arbitrary JavaScript in the response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTA1LVRhZzJGcmFtZXNldC5qc3A/dXNlcmlucHV0PWh0dHAlM2ElMmYlMmZydXl0ZGR5bm1kIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9OEFGNzY3MTg1QTczRDZBMTUwNEIxRTQyRjAzNDM0RDUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NDYNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSA1IC0gUlhTUyB2aWEgZnJhbWUgdGFnIGluamVjdGlvbiBpbnRvIHRoZSBzY29wZSBvZiBhbiBIVE1MIGZyYW1lc2V0PC90aXRsZT4KPC9oZWFkPgoKCgo8ZnJhbWVzZXQgY29scz0iMjUlLDc1JSI+CjxmcmFtZSBuYW1lPSJmcmFtZTEiIGlkPSJmcmFtZTEiIHNyYz0iZHVtbXkuaHRtbCI+CjxmcmFtZSBuYW1lPSJmcmFtZTIiIGlkPSJmcmFtZTIiIHNyYz0iaHR0cDovL3J1eXRkZHlubWQiPiAKCjwvZnJhbWVzZXQ+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8261795991149961216</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case16-Js2ScriptSupportingProperty.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-GET/Case16-Js2ScriptSupportingProperty.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the response within the hostname of a URL from which JavaScript will be loaded. The payload <b>//mxekhankwb</b> was submitted in the userinput parameter. This input was echoed unmodified within the "src" attribute of a "frame" tag.<br><br>This proof-of-concept attack demonstrates that it is possible to modify the URL to reference an external host and so inject arbitrary JavaScript in the response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQvQ2FzZTE2LUpzMlNjcmlwdFN1cHBvcnRpbmdQcm9wZXJ0eS5qc3A/dXNlcmlucHV0PSUyZiUyZm14ZWtoYW5rd2IgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD04QUY3NjcxODVBNzNENkExNTA0QjFFNDJGMDM0MzRENQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTUNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNiAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHN1cHBvcnRpbmcgcHJvcGVydHk8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9ImZyYW1lMiIgaWQ9ImZyYW1lMiIgc3JjPSIvL214ZWtoYW5rd2IiPiAKCjwvZnJhbWVzZXQ+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5444914907010997248</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST-Experimental/Case07-ScriptlessInjectionInScriptTagSrcAttribute.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST-Experimental/Case07-ScriptlessInjectionInScriptTagSrcAttribute.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the response within the hostname of a URL from which JavaScript will be loaded. The payload <b>//idsznzhxfj</b> was submitted in the userinput parameter. This input was echoed unmodified within the "src" attribute of a "script" tag.<br><br>This proof-of-concept attack demonstrates that it is possible to modify the URL to reference an external host and so inject arbitrary JavaScript in the response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULUV4cGVyaW1lbnRhbC9DYXNlMDctU2NyaXB0bGVzc0luamVjdGlvbkluU2NyaXB0VGFnU3JjQXR0cmlidXRlLmpzcD91c2VyaW5wdXQ9JTJmJTJmaWRzem56aHhmaiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC1FeHBlcmltZW50YWwvQ2FzZTA3LVNjcmlwdGxlc3NJbmplY3Rpb25JblNjcmlwdFRhZ1NyY0F0dHJpYnV0ZS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzINCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+U2NyaXB0bGVzcyBJbmplY3Rpb24gaW4gSFRNTCBTY3JpcHQgVGFnIFNyYyBBdHRyaWJ1dGUgc2NvcGUgb2YgdGhlIEhUTUwgcGFnZS48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5Pgo8IS0tCglDb250cmlidXRlZCBieSB0aGUgSXJvbldBU1AgcHJvamVjdCAoaHR0cDovL2lyb253YXNwLm9yZy8pLgoJT3JpZ2luYWwgQXV0aG9yOiBMYXZha3VtYXIgS3VwcGFuIChsYXZhQGlyb253YXNwLm9yZykuCi0tPgoKPHNjcmlwdCBzcmM9Ii8vaWRzem56aHhmaiIvPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7344718470380487680</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case05-Tag2Frameset.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case05-Tag2Frameset.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the response within the hostname of a URL from which JavaScript will be loaded. The payload <b>http://rabrpykire</b> was submitted in the userinput parameter. This input was echoed unmodified within the "src" attribute of a "frame" tag.<br><br>This proof-of-concept attack demonstrates that it is possible to modify the URL to reference an external host and so inject arbitrary JavaScript in the response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMDUtVGFnMkZyYW1lc2V0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTkNCk9yaWdpbjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QvQ2FzZTA1LVRhZzJGcmFtZXNldC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnVzZXJpbnB1dD1odHRwJTNhJTJmJTJmcmFicnB5a2lyZQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NDUNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBSWFNTIHZpYSBmcmFtZSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgZnJhbWVzZXQ8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9ImZyYW1lMiIgaWQ9ImZyYW1lMiIgc3JjPSJodHRwOi8vcmFicnB5a2lyZSI+IAoKPC9mcmFtZXNldD4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1403258434973302784</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case16-Js2ScriptSupportingProperty.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-POST/Case16-Js2ScriptSupportingProperty.jsp [userinput parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> request parameter is copied into the response within the hostname of a URL from which JavaScript will be loaded. The payload <b>//hvkgxgykfn</b> was submitted in the userinput parameter. This input was echoed unmodified within the "src" attribute of a "frame" tag.<br><br>This proof-of-concept attack demonstrates that it is possible to modify the URL to reference an external host and so inject arbitrary JavaScript in the response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC9DYXNlMTYtSnMyU2NyaXB0U3VwcG9ydGluZ1Byb3BlcnR5LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTkNCk9yaWdpbjogaHR0cHM6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvUmVmbGVjdGVkLVhTUy9SWFNTLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QvQ2FzZTE2LUpzMlNjcmlwdFN1cHBvcnRpbmdQcm9wZXJ0eS5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD0wRTIzMTQ1ODA1RkREMkM4RDU2NjE4RUZDNjM3RTFBQw0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnVzZXJpbnB1dD0lMmYlMmZodmtneGd5a2Zu]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI2OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTUNCg0KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNiAtIFJYU1MgdmlhIEphdmFzY3JpcHQgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGEgc2NyaXB0IHN1cHBvcnRpbmcgcHJvcGVydHk8L3RpdGxlPgo8L2hlYWQ+CgoKCjxmcmFtZXNldCBjb2xzPSIyNSUsNzUlIj4KPGZyYW1lIG5hbWU9ImZyYW1lMSIgaWQ9ImZyYW1lMSIgc3JjPSJkdW1teS5odG1sIj4KPGZyYW1lIG5hbWU9ImZyYW1lMiIgaWQ9ImZyYW1lMiIgc3JjPSIvL2h2a2d4Z3lrZm4iPiAKCjwvZnJhbWVzZXQ+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9025438306957077504</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-COOKIE-Experimental/Case01-Tag2HtmlPageScope.jsp]]></path>
    <location><![CDATA[/wavsep/active/Reflected-XSS/RXSS-Detection-Evaluation-COOKIE-Experimental/Case01-Tag2HtmlPageScope.jsp [userinput cookie]]]></location>
    <severity>Medium</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting">Web Security Academy: Cross-site scripting</a></li>
	<li><a href="https://portswigger.net/web-security/cross-site-scripting/reflected">Web Security Academy: Reflected cross-site scripting</a></li>
	<li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
    <li><a href="https://capec.mitre.org/data/definitions/591.html">CAPEC-591: Reflected XSS</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>userinput</b> cookie is copied into the HTML document as plain text between tags. The payload <b>se3jz&lt;script&gt;alert(1)&lt;/script&gt;uyqt1</b> was submitted in the userinput cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain "cookie-forcing" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1JlZmxlY3RlZC1YU1MvUlhTUy1EZXRlY3Rpb24tRXZhbHVhdGlvbi1DT09LSUUtRXhwZXJpbWVudGFsL0Nhc2UwMS1UYWcySHRtbFBhZ2VTY29wZS5qc3A/dXNlcmlucHV0PXRleHR2YWx1ZSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9SZWZsZWN0ZWQtWFNTL1JYU1MtRGV0ZWN0aW9uLUV2YWx1YXRpb24tQ09PS0lFLUV4cGVyaW1lbnRhbC9pbmRleC5qc3ANCkNvb2tpZTogdXNlcmlucHV0PUVtcHR5VmFsdWVzZTNqejxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD51eXF0MTsgSlNFU1NJT05JRD1CRDBGQjc3MTEyQkJBMUVBRjExRkMwM0VEOEYzQzA3Ng0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBGcmksIDE5IEFwciAyMDI0IDE3OjI1OjUyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MjANCg0KPCEtLQpUT0RPOiBjb21wcmVuZGVyZSBjaGUgdnVvbGUgZmFyZSBlIGNvcnJlZ2dlcmUgaWwgYnVnLiBJbm9sdHJlLCBjb25uZWN0b3Igbm9uIHBhcmUgZXNzZXJlIHVzYXRvCgotLT4KCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBSWFNTIHZpYSB0YWcgaW5qZWN0aW9uIGludG8gdGhlIHNjb3BlIG9mIGFuIEhUTUwgcGFnZSAoQ29va2llIElucHV0IFZlY3Rvcik8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKPCEtLQoJSW5zcGlyZWQgYnkgYSB2dWxuZXJhYmxlIHRlc3QgY2FzZSBvcmlnaW5hbGx5IHdyaXR0ZW4gZm9yIHRoZSBPV0FTUCBaZWQgQXR0YWNrIFByb3h5IChaQVApIHByb2plY3QKCShodHRwOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvT1dBU1BfWmVkX0F0dGFja19Qcm94eV9Qcm9qZWN0KSAKCU9yaWdpbmFsIEF1dGhvcjogcHNpaW5vbiAocHNpaW5vbkBnbWFpbC5jb20pLgotLT4KCgoKVGhlIHJlZmxlY3RlZCB2YWx1ZTogRW1wdHlWYWx1ZXNlM2p6PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PnV5cXQxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
</issues>
